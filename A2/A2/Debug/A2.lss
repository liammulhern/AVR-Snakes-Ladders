
A2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a2  00800100  000034e0  00003574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000264  008005a2  008005a2  00003a16  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003a16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  00003ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000634b  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001be1  00000000  00000000  0000a3ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003332  00000000  00000000  0000bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001198  00000000  00000000  0000f314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001855  00000000  00000000  000104ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f55  00000000  00000000  00011d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00015c56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__ctors_end>
       4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
       8:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
       c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      10:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      14:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_5>
      18:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      1c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      20:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      24:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      28:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      2c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      30:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      34:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      38:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      3c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      40:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__vector_16>
      44:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      48:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      4c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      50:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__vector_20>
      54:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__vector_21>
      58:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      5c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      60:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      64:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      68:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      6c:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      70:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      74:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>
      78:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	44 69       	ori	r20, 0x94	; 148
      7e:	63 65       	ori	r22, 0x53	; 83
      80:	3a 20       	and	r3, r10
      82:	52 6f       	ori	r21, 0xF2	; 242
      84:	6c 6c       	ori	r22, 0xCC	; 204
      86:	69 6e       	ori	r22, 0xE9	; 233
      88:	67 00       	.word	0x0067	; ????

0000008a <__c.2097>:
      8a:	44 69 63 65 3a 20 53 74 6f 70 70 65 64 00           Dice: Stopped.

00000098 <__c.2608>:
      98:	47 41 4d 45 20 50 41 55 53 45 44 00                 GAME PAUSED.

000000a4 <__c.2604>:
      a4:	47 41 4d 45 20 53 54 41 52 54 00                    GAME START.

000000af <__c.2585>:
      af:	50 72 65 73 73 20 28 71 29 20 54 6f 20 4d 75 74     Press (q) To Mut
      bf:	65 20 53 6f 75 6e 64 00                             e Sound.

000000c7 <__c.2583>:
      c7:	50 72 65 73 73 20 28 73 29 2f 28 41 6e 79 20 42     Press (s)/(Any B
      d7:	75 74 74 6f 6e 29 20 54 6f 20 53 74 61 72 74 20     utton) To Start 
      e7:	4e 65 77 20 47 61 6d 65 00                          New Game.

000000f0 <__c.2578>:
      f0:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000fa <__c.2573>:
      fa:	50 72 65 73 73 20 28 71 29 20 54 6f 20 4d 75 74     Press (q) To Mut
     10a:	65 20 53 6f 75 6e 64 00                             e Sound.

00000112 <__c.2571>:
     112:	50 72 65 73 73 20 28 70 29 2f 28 42 33 29 20 54     Press (p)/(B3) T
     122:	6f 20 50 61 75 73 65 20 47 61 6d 65 00              o Pause Game.

0000012f <__c.2569>:
     12f:	50 72 65 73 73 20 28 65 29 2f 28 6d 29 2f 28 68     Press (e)/(m)/(h
     13f:	29 20 54 6f 20 53 65 6c 65 63 74 20 44 69 66 66     ) To Select Diff
     14f:	69 63 75 6c 74 79 00                                iculty.

00000156 <__c.2567>:
     156:	44 69 63 65 3a 20 53 74 6f 70 70 65 64 00           Dice: Stopped.

00000164 <__c.2565>:
     164:	47 41 4d 45 20 53 54 41 52 54 00                    GAME START.

0000016f <__c.2563>:
     16f:	54 69 6d 65 20 52 65 6d 61 69 6e 69 6e 67 3a 20     Time Remaining: 
	...

00000180 <__c.2558>:
     180:	4d 6f 64 65 20 3a 20 4d 75 6c 74 69 2d 50 6c 61     Mode : Multi-Pla
     190:	79 65 72 00                                         yer.

00000194 <__c.2556>:
     194:	4d 6f 64 65 20 3a 20 53 69 6e 67 6c 65 2d 50 6c     Mode : Single-Pl
     1a4:	61 79 65 72 00                                      ayer.

000001a9 <__c.2551>:
     1a9:	50 72 65 73 73 20 28 71 29 20 54 6f 20 4d 75 74     Press (q) To Mut
     1b9:	65 20 53 6f 75 6e 64 00                             e Sound.

000001c1 <__c.2549>:
     1c1:	50 72 65 73 73 20 28 73 29 2f 28 41 6e 79 20 42     Press (s)/(Any B
     1d1:	75 74 74 6f 6e 29 20 54 6f 20 53 74 61 72 74 20     utton) To Start 
     1e1:	53 65 6c 65 63 74 65 64 20 4c 65 76 65 6c 00        Selected Level.

000001f0 <__c.2547>:
     1f0:	50 72 65 73 73 20 28 31 29 2f 28 32 29 20 54 6f     Press (1)/(2) To
     200:	20 53 65 6c 65 63 74 20 4d 75 6c 74 69 2d 50 6c      Select Multi-Pl
     210:	61 79 65 72 20 47 61 6d 65 00                       ayer Game.

0000021a <__c.2545>:
     21a:	50 72 65 73 73 20 28 62 29 20 54 6f 20 53 65 6c     Press (b) To Sel
     22a:	65 63 74 20 4c 65 76 65 6c 00                       ect Level.

00000234 <__c.2543>:
     234:	50 72 65 73 73 20 28 65 29 2f 28 6d 29 2f 28 68     Press (e)/(m)/(h
     244:	29 20 54 6f 20 53 65 6c 65 63 74 20 44 69 66 66     ) To Select Diff
     254:	69 63 75 6c 74 79 00                                iculty.

0000025b <__c.2541>:
     25b:	4e 45 57 20 47 41 4d 45 00                          NEW GAME.

00000264 <__c.2461>:
     264:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
     274:	20 62 79 20 4c 49 41 4d 20 4d 55 4c 48 45 52 4e      by LIAM MULHERN
     284:	20 2d 20 34 37 34 32 38 37 34 38 00                  - 47428748.

00000290 <__c.2459>:
     290:	53 6e 61 6b 65 73 20 61 6e 64 20 4c 61 64 64 65     Snakes and Ladde
     2a0:	72 73 00                                            rs.

000002a3 <__c.2054>:
     2a3:	1b 5b 3f 32 35 6c 00                                .[?25l.

000002aa <__c.2045>:
     2aa:	1b 5b 4b 00                                         .[K.

000002ae <__c.2040>:
     2ae:	1b 5b 32 4a 00                                      .[2J.

000002b3 <__c.2025>:
     2b3:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000002bc <__ctors_end>:
     2bc:	11 24       	eor	r1, r1
     2be:	1f be       	out	0x3f, r1	; 63
     2c0:	cf ef       	ldi	r28, 0xFF	; 255
     2c2:	d8 e0       	ldi	r29, 0x08	; 8
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	cd bf       	out	0x3d, r28	; 61

000002c8 <__do_copy_data>:
     2c8:	15 e0       	ldi	r17, 0x05	; 5
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b1 e0       	ldi	r27, 0x01	; 1
     2ce:	e0 ee       	ldi	r30, 0xE0	; 224
     2d0:	f4 e3       	ldi	r31, 0x34	; 52
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <__do_copy_data+0x10>
     2d4:	05 90       	lpm	r0, Z+
     2d6:	0d 92       	st	X+, r0
     2d8:	a2 3a       	cpi	r26, 0xA2	; 162
     2da:	b1 07       	cpc	r27, r17
     2dc:	d9 f7       	brne	.-10     	; 0x2d4 <__do_copy_data+0xc>

000002de <__do_clear_bss>:
     2de:	28 e0       	ldi	r18, 0x08	; 8
     2e0:	a2 ea       	ldi	r26, 0xA2	; 162
     2e2:	b5 e0       	ldi	r27, 0x05	; 5
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <.do_clear_bss_start>

000002e6 <.do_clear_bss_loop>:
     2e6:	1d 92       	st	X+, r1

000002e8 <.do_clear_bss_start>:
     2e8:	a6 30       	cpi	r26, 0x06	; 6
     2ea:	b2 07       	cpc	r27, r18
     2ec:	e1 f7       	brne	.-8      	; 0x2e6 <.do_clear_bss_loop>
     2ee:	0e 94 bf 12 	call	0x257e	; 0x257e <main>
     2f2:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <_exit>

000002f6 <__bad_interrupt>:
     2f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002fa <set_scroll_anim>:

// Move animation global variable (only accessed locally)
uint32_t current_move_time;

// Set the global variables for the current scroll animation
void set_scroll_anim(uint8_t* pixel_columns, uint8_t pixel_columns_length, PixelColour pixel_colours, uint16_t frame_time, uint8_t scroll_direction) {
     2fa:	0f 93       	push	r16
	current_scroll_anim = pixel_columns;
     2fc:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <__data_end+0x1>
     300:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <__data_end>
	current_scroll_length = pixel_columns_length;
     304:	60 93 36 06 	sts	0x0636, r22	; 0x800636 <current_scroll_length>
	current_scroll_colour = pixel_colours;
     308:	40 93 3f 06 	sts	0x063F, r20	; 0x80063f <current_scroll_colour>
	current_scroll_frame_time = frame_time;
     30c:	30 93 39 06 	sts	0x0639, r19	; 0x800639 <current_scroll_frame_time+0x1>
     310:	20 93 38 06 	sts	0x0638, r18	; 0x800638 <current_scroll_frame_time>
	current_scroll_time = get_current_time();
     314:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
     318:	60 93 40 06 	sts	0x0640, r22	; 0x800640 <current_scroll_time>
     31c:	70 93 41 06 	sts	0x0641, r23	; 0x800641 <current_scroll_time+0x1>
     320:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <current_scroll_time+0x2>
     324:	90 93 43 06 	sts	0x0643, r25	; 0x800643 <current_scroll_time+0x3>
	current_scroll_direction = scroll_direction;
     328:	00 93 37 06 	sts	0x0637, r16	; 0x800637 <current_scroll_direction>
	current_scroll_head_index = 0;
     32c:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <current_scroll_head_index>
	scroll_playing_flag = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <scroll_playing_flag>
}
     336:	0f 91       	pop	r16
     338:	08 95       	ret

0000033a <scroll_anim>:

void scroll_anim(void) {	
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	28 97       	sbiw	r28, 0x08	; 8
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
	uint8_t anim_column_data = 0;
	uint8_t display_start_column = 0;
	MatrixColumn display_column_data = {0, 0, 0, 0, 0, 0, 0, 0};
     34e:	fe 01       	movw	r30, r28
     350:	31 96       	adiw	r30, 0x01	; 1
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	df 01       	movw	r26, r30
     356:	1d 92       	st	X+, r1
     358:	8a 95       	dec	r24
     35a:	e9 f7       	brne	.-6      	; 0x356 <scroll_anim+0x1c>
	
	// Set display shift direction and starting column
	switch(current_scroll_direction) {
     35c:	80 91 37 06 	lds	r24, 0x0637	; 0x800637 <current_scroll_direction>
     360:	88 23       	and	r24, r24
     362:	19 f0       	breq	.+6      	; 0x36a <scroll_anim+0x30>
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	29 f0       	breq	.+10     	; 0x372 <scroll_anim+0x38>
     368:	08 c0       	rjmp	.+16     	; 0x37a <scroll_anim+0x40>
		case SCROLL_UP:
			display_start_column = 0;
			ledmatrix_shift_display_right();
     36a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <ledmatrix_shift_display_right>
	MatrixColumn display_column_data = {0, 0, 0, 0, 0, 0, 0, 0};
	
	// Set display shift direction and starting column
	switch(current_scroll_direction) {
		case SCROLL_UP:
			display_start_column = 0;
     36e:	80 e0       	ldi	r24, 0x00	; 0
			ledmatrix_shift_display_right();
			break;
     370:	05 c0       	rjmp	.+10     	; 0x37c <scroll_anim+0x42>
		case SCROLL_DOWN:
			display_start_column = MATRIX_NUM_COLUMNS - 1;
			ledmatrix_shift_display_left();
     372:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <ledmatrix_shift_display_left>
		case SCROLL_UP:
			display_start_column = 0;
			ledmatrix_shift_display_right();
			break;
		case SCROLL_DOWN:
			display_start_column = MATRIX_NUM_COLUMNS - 1;
     376:	8f e0       	ldi	r24, 0x0F	; 15
			ledmatrix_shift_display_left();
			break;
     378:	01 c0       	rjmp	.+2      	; 0x37c <scroll_anim+0x42>
	scroll_playing_flag = 1;
}

void scroll_anim(void) {	
	uint8_t anim_column_data = 0;
	uint8_t display_start_column = 0;
     37a:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	// If the leading edge of the scroll image is less than the total columns 
	// of the animation then the entire image is not yet displayed 
	if (current_scroll_length > current_scroll_head_index) {
     37c:	20 91 36 06 	lds	r18, 0x0636	; 0x800636 <current_scroll_length>
     380:	90 91 3e 06 	lds	r25, 0x063E	; 0x80063e <current_scroll_head_index>
     384:	92 17       	cp	r25, r18
     386:	e8 f4       	brcc	.+58     	; 0x3c2 <scroll_anim+0x88>
		// Get the current column of pixel data from the scroll animation
		anim_column_data = current_scroll_anim[current_scroll_head_index];
     388:	e0 91 a2 05 	lds	r30, 0x05A2	; 0x8005a2 <__data_end>
     38c:	f0 91 a3 05 	lds	r31, 0x05A3	; 0x8005a3 <__data_end+0x1>
     390:	e9 0f       	add	r30, r25
     392:	f1 1d       	adc	r31, r1
     394:	20 81       	ld	r18, Z
		
		// Iterate over the pixel array to set on/off
		for (int8_t column_index = 8; column_index > 0; column_index--) {
     396:	98 e0       	ldi	r25, 0x08	; 8
     398:	12 c0       	rjmp	.+36     	; 0x3be <scroll_anim+0x84>
			// If the relevant MSB is set, we set this to a coloured pixel, else blank
			if(anim_column_data & 0x80) {
     39a:	22 23       	and	r18, r18
     39c:	74 f4       	brge	.+28     	; 0x3ba <scroll_anim+0x80>
				display_column_data[column_index - 1] = current_scroll_colour;
     39e:	e9 2f       	mov	r30, r25
     3a0:	09 2e       	mov	r0, r25
     3a2:	00 0c       	add	r0, r0
     3a4:	ff 0b       	sbc	r31, r31
     3a6:	31 97       	sbiw	r30, 0x01	; 1
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	4c 0f       	add	r20, r28
     3ae:	5d 1f       	adc	r21, r29
     3b0:	e4 0f       	add	r30, r20
     3b2:	f5 1f       	adc	r31, r21
     3b4:	30 91 3f 06 	lds	r19, 0x063F	; 0x80063f <current_scroll_colour>
     3b8:	30 83       	st	Z, r19
			}
			anim_column_data <<= 1;
     3ba:	22 0f       	add	r18, r18
	if (current_scroll_length > current_scroll_head_index) {
		// Get the current column of pixel data from the scroll animation
		anim_column_data = current_scroll_anim[current_scroll_head_index];
		
		// Iterate over the pixel array to set on/off
		for (int8_t column_index = 8; column_index > 0; column_index--) {
     3bc:	91 50       	subi	r25, 0x01	; 1
     3be:	19 16       	cp	r1, r25
     3c0:	64 f3       	brlt	.-40     	; 0x39a <scroll_anim+0x60>
			}
			anim_column_data <<= 1;
		}
	}
	// Set the pixels of the starting column 
	ledmatrix_update_column(display_start_column, display_column_data);
     3c2:	be 01       	movw	r22, r28
     3c4:	6f 5f       	subi	r22, 0xFF	; 255
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <ledmatrix_update_column>
	
	// If any part of the scroll image is visible on the screen continue 
	// to iterate the leading edge index
	if (current_scroll_length + (2 * MATRIX_NUM_COLUMNS) > current_scroll_head_index) {
     3cc:	80 91 36 06 	lds	r24, 0x0636	; 0x800636 <current_scroll_length>
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	80 96       	adiw	r24, 0x20	; 32
     3d4:	20 91 3e 06 	lds	r18, 0x063E	; 0x80063e <current_scroll_head_index>
     3d8:	42 2f       	mov	r20, r18
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	48 17       	cp	r20, r24
     3de:	59 07       	cpc	r21, r25
     3e0:	24 f4       	brge	.+8      	; 0x3ea <scroll_anim+0xb0>
		current_scroll_head_index++;
     3e2:	2f 5f       	subi	r18, 0xFF	; 255
     3e4:	20 93 3e 06 	sts	0x063E, r18	; 0x80063e <current_scroll_head_index>
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <scroll_anim+0xb8>
	}
	else {
		current_scroll_head_index = 0;
     3ea:	10 92 3e 06 	sts	0x063E, r1	; 0x80063e <current_scroll_head_index>
		scroll_playing_flag = 0;
     3ee:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <scroll_playing_flag>
	}

}
     3f2:	28 96       	adiw	r28, 0x08	; 8
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	de bf       	out	0x3e, r29	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <set_move_anim>:

void set_move_anim(void) {
	current_move_time = get_current_time();
     404:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
     408:	60 93 3a 06 	sts	0x063A, r22	; 0x80063a <current_move_time>
     40c:	70 93 3b 06 	sts	0x063B, r23	; 0x80063b <current_move_time+0x1>
     410:	80 93 3c 06 	sts	0x063C, r24	; 0x80063c <current_move_time+0x2>
     414:	90 93 3d 06 	sts	0x063D, r25	; 0x80063d <current_move_time+0x3>
	move_anim();
     418:	0e 94 08 0a 	call	0x1410	; 0x1410 <move_anim>
     41c:	08 95       	ret

0000041e <play_animations>:
}

// Continuously play animations if any are being played
void play_animations(void) {
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
	uint32_t current_time = get_current_time();
     426:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
     42a:	6b 01       	movw	r12, r22
     42c:	7c 01       	movw	r14, r24
	if (!anim_paused_flag) {
     42e:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <anim_paused_flag>
     432:	81 11       	cpse	r24, r1
     434:	3e c0       	rjmp	.+124    	; 0x4b2 <play_animations+0x94>
		if (scroll_playing_flag) {
     436:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <scroll_playing_flag>
     43a:	88 23       	and	r24, r24
     43c:	f9 f0       	breq	.+62     	; 0x47c <play_animations+0x5e>
			if (current_time >= current_scroll_time + current_scroll_frame_time) {
     43e:	20 91 38 06 	lds	r18, 0x0638	; 0x800638 <current_scroll_frame_time>
     442:	30 91 39 06 	lds	r19, 0x0639	; 0x800639 <current_scroll_frame_time+0x1>
     446:	80 91 40 06 	lds	r24, 0x0640	; 0x800640 <current_scroll_time>
     44a:	90 91 41 06 	lds	r25, 0x0641	; 0x800641 <current_scroll_time+0x1>
     44e:	a0 91 42 06 	lds	r26, 0x0642	; 0x800642 <current_scroll_time+0x2>
     452:	b0 91 43 06 	lds	r27, 0x0643	; 0x800643 <current_scroll_time+0x3>
     456:	82 0f       	add	r24, r18
     458:	93 1f       	adc	r25, r19
     45a:	a1 1d       	adc	r26, r1
     45c:	b1 1d       	adc	r27, r1
     45e:	c8 16       	cp	r12, r24
     460:	d9 06       	cpc	r13, r25
     462:	ea 06       	cpc	r14, r26
     464:	fb 06       	cpc	r15, r27
     466:	50 f0       	brcs	.+20     	; 0x47c <play_animations+0x5e>
				scroll_anim();
     468:	0e 94 9d 01 	call	0x33a	; 0x33a <scroll_anim>
				current_scroll_time = current_time;
     46c:	c0 92 40 06 	sts	0x0640, r12	; 0x800640 <current_scroll_time>
     470:	d0 92 41 06 	sts	0x0641, r13	; 0x800641 <current_scroll_time+0x1>
     474:	e0 92 42 06 	sts	0x0642, r14	; 0x800642 <current_scroll_time+0x2>
     478:	f0 92 43 06 	sts	0x0643, r15	; 0x800643 <current_scroll_time+0x3>
			}
		}
		
		if (current_time >= current_move_time + MOVE_SPEED) {
     47c:	80 91 3a 06 	lds	r24, 0x063A	; 0x80063a <current_move_time>
     480:	90 91 3b 06 	lds	r25, 0x063B	; 0x80063b <current_move_time+0x1>
     484:	a0 91 3c 06 	lds	r26, 0x063C	; 0x80063c <current_move_time+0x2>
     488:	b0 91 3d 06 	lds	r27, 0x063D	; 0x80063d <current_move_time+0x3>
     48c:	8c 59       	subi	r24, 0x9C	; 156
     48e:	9f 4f       	sbci	r25, 0xFF	; 255
     490:	af 4f       	sbci	r26, 0xFF	; 255
     492:	bf 4f       	sbci	r27, 0xFF	; 255
     494:	c8 16       	cp	r12, r24
     496:	d9 06       	cpc	r13, r25
     498:	ea 06       	cpc	r14, r26
     49a:	fb 06       	cpc	r15, r27
     49c:	50 f0       	brcs	.+20     	; 0x4b2 <play_animations+0x94>
			move_anim();
     49e:	0e 94 08 0a 	call	0x1410	; 0x1410 <move_anim>
			current_move_time = current_time;
     4a2:	c0 92 3a 06 	sts	0x063A, r12	; 0x80063a <current_move_time>
     4a6:	d0 92 3b 06 	sts	0x063B, r13	; 0x80063b <current_move_time+0x1>
     4aa:	e0 92 3c 06 	sts	0x063C, r14	; 0x80063c <current_move_time+0x2>
     4ae:	f0 92 3d 06 	sts	0x063D, r15	; 0x80063d <current_move_time+0x3>
		}	
	}
}
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	08 95       	ret

000004bc <pause_animations>:

void pause_animations(uint8_t pause_flag) {
	anim_paused_flag = pause_flag;
     4bc:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <anim_paused_flag>
     4c0:	08 95       	ret

000004c2 <play_game_over_anim>:
}

void play_game_over_anim(void) {
     4c2:	0f 93       	push	r16
	set_scroll_anim(game_over_vert_text, 62, COLOUR_GREEN, 80, SCROLL_UP);
     4c4:	00 e0       	ldi	r16, 0x00	; 0
     4c6:	20 e5       	ldi	r18, 0x50	; 80
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 ef       	ldi	r20, 0xF0	; 240
     4cc:	6e e3       	ldi	r22, 0x3E	; 62
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <set_scroll_anim>
}
     4d6:	0f 91       	pop	r16
     4d8:	08 95       	ret

000004da <stop_animations>:

void stop_animations(void) {
	scroll_playing_flag = 0;
     4da:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <scroll_playing_flag>
     4de:	08 95       	ret

000004e0 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     4e0:	e8 e6       	ldi	r30, 0x68	; 104
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	80 81       	ld	r24, Z
     4e6:	82 60       	ori	r24, 0x02	; 2
     4e8:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     4ea:	8b b3       	in	r24, 0x1b	; 27
     4ec:	82 60       	ori	r24, 0x02	; 2
     4ee:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     4f0:	ec e6       	ldi	r30, 0x6C	; 108
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	8f 60       	ori	r24, 0x0F	; 15
     4f8:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     4fa:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <queue_length>
     4fe:	08 95       	ret

00000500 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     500:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <queue_length>
     504:	18 16       	cp	r1, r24
     506:	14 f5       	brge	.+68     	; 0x54c <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     508:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     50c:	6f b7       	in	r22, 0x3f	; 63
		cli();
     50e:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	09 c0       	rjmp	.+18     	; 0x526 <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     514:	f9 01       	movw	r30, r18
     516:	e9 55       	subi	r30, 0x59	; 89
     518:	fa 4f       	sbci	r31, 0xFA	; 250
     51a:	40 81       	ld	r20, Z
     51c:	f9 01       	movw	r30, r18
     51e:	ea 55       	subi	r30, 0x5A	; 90
     520:	fa 4f       	sbci	r31, 0xFA	; 250
     522:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     524:	9f 5f       	subi	r25, 0xFF	; 255
     526:	29 2f       	mov	r18, r25
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	40 91 a6 05 	lds	r20, 0x05A6	; 0x8005a6 <queue_length>
     52e:	04 2e       	mov	r0, r20
     530:	00 0c       	add	r0, r0
     532:	55 0b       	sbc	r21, r21
     534:	24 17       	cp	r18, r20
     536:	35 07       	cpc	r19, r21
     538:	6c f3       	brlt	.-38     	; 0x514 <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     53a:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <queue_length>
     53e:	91 50       	subi	r25, 0x01	; 1
     540:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <queue_length>
		
		if(interrupts_were_enabled) {
     544:	66 23       	and	r22, r22
     546:	1c f4       	brge	.+6      	; 0x54e <button_pushed+0x4e>
			// Turn them back on again
			sei();
     548:	78 94       	sei
     54a:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     54c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     54e:	08 95       	ret

00000550 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	8f 93       	push	r24
     562:	9f 93       	push	r25
     564:	ef 93       	push	r30
     566:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     568:	43 b1       	in	r20, 0x03	; 3
     56a:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	26 c0       	rjmp	.+76     	; 0x5bc <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     570:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <queue_length>
     574:	94 30       	cpi	r25, 0x04	; 4
     576:	0c f5       	brge	.+66     	; 0x5ba <__vector_5+0x6a>
     578:	24 2f       	mov	r18, r20
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	08 2e       	mov	r0, r24
     57e:	02 c0       	rjmp	.+4      	; 0x584 <__vector_5+0x34>
     580:	35 95       	asr	r19
     582:	27 95       	ror	r18
     584:	0a 94       	dec	r0
     586:	e2 f7       	brpl	.-8      	; 0x580 <__vector_5+0x30>
     588:	20 ff       	sbrs	r18, 0
     58a:	17 c0       	rjmp	.+46     	; 0x5ba <__vector_5+0x6a>
				(button_state & (1 << pin)) && 
				!(last_button_state & (1 << pin))) {
     58c:	20 91 ab 05 	lds	r18, 0x05AB	; 0x8005ab <last_button_state>
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	08 2e       	mov	r0, r24
     594:	02 c0       	rjmp	.+4      	; 0x59a <__vector_5+0x4a>
     596:	35 95       	asr	r19
     598:	27 95       	ror	r18
     59a:	0a 94       	dec	r0
     59c:	e2 f7       	brpl	.-8      	; 0x596 <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1 << pin)) && 
     59e:	20 fd       	sbrc	r18, 0
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__vector_5+0x6a>
				!(last_button_state & (1 << pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     5a2:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <queue_length>
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9e 0f       	add	r25, r30
     5aa:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <queue_length>
     5ae:	0e 2e       	mov	r0, r30
     5b0:	00 0c       	add	r0, r0
     5b2:	ff 0b       	sbc	r31, r31
     5b4:	e9 55       	subi	r30, 0x59	; 89
     5b6:	fa 4f       	sbci	r31, 0xFA	; 250
     5b8:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin = 0; pin < NUM_BUTTONS; pin++) {
     5ba:	8f 5f       	subi	r24, 0xFF	; 255
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	c0 f2       	brcs	.-80     	; 0x570 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     5c0:	40 93 ab 05 	sts	0x05AB, r20	; 0x8005ab <last_button_state>
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	4f 91       	pop	r20
     5ce:	3f 91       	pop	r19
     5d0:	2f 91       	pop	r18
     5d2:	0f 90       	pop	r0
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	0f 90       	pop	r0
     5d8:	1f 90       	pop	r1
     5da:	18 95       	reti

000005dc <init_buzzer>:
uint32_t tone_start_time;
uint16_t tone_duration;

void init_buzzer(void) {	
	// Make pin OC1B be an output
	DDRD |= (1 << DDRD4);
     5dc:	8a b1       	in	r24, 0x0a	; 10
     5de:	80 61       	ori	r24, 0x10	; 16
     5e0:	8a b9       	out	0x0a, r24	; 10
	
	// Timer/counter 1 Fast PWM, counting from 0 to the value in OCR1A
	// before reseting to 0. Count at 1MHz (CLK/8).
	// Output OC1B clears on compare match and set on timer/counter
	// overflow (non-inverting mode).
	TCCR1A = (1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0) | (1 << WGM11) | (1 << WGM10);
     5e2:	83 ef       	ldi	r24, 0xF3	; 243
     5e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);	
     5e8:	89 e1       	ldi	r24, 0x19	; 25
     5ea:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	tone_mute_flag = 0;
     5ee:	10 92 53 06 	sts	0x0653, r1	; 0x800653 <tone_mute_flag>
	timer_pause_flag = 0;
     5f2:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <timer_pause_flag>
	melody_playing_flag = 0;
     5f6:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <melody_playing_flag>
     5fa:	08 95       	ret

000005fc <freq_to_clock_period>:
}

uint16_t freq_to_clock_period(uint16_t freq) {
	return (1000000UL / freq);	// UL makes the constant an unsigned long (32 bits)
     5fc:	9c 01       	movw	r18, r24
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	60 e4       	ldi	r22, 0x40	; 64
     604:	72 e4       	ldi	r23, 0x42	; 66
     606:	8f e0       	ldi	r24, 0x0F	; 15
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__udivmodsi4>
	// and ensures we do 32 bit arithmetic, not 16
}
     60e:	c9 01       	movw	r24, r18
     610:	08 95       	ret

00000612 <duty_cycle_to_pulse_width>:

// Return the width of a pulse (in clock cycles) given a duty cycle (%) and
// the period of the clock (measured in clock cycles)
uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	6b 01       	movw	r12, r22
     61c:	7c 01       	movw	r14, r24
	return (dutycycle * clockperiod) / 100;
     61e:	ba 01       	movw	r22, r20
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 d5 15 	call	0x2baa	; 0x2baa <__floatunsisf>
     628:	a7 01       	movw	r20, r14
     62a:	96 01       	movw	r18, r12
     62c:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__mulsf3>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	48 ec       	ldi	r20, 0xC8	; 200
     636:	52 e4       	ldi	r21, 0x42	; 66
     638:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__divsf3>
     63c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <__fixunssfsi>
}
     640:	cb 01       	movw	r24, r22
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	08 95       	ret

0000064c <stop_timer>:

void stop_timer(void) {
	TCCR1B &= ~(1 << CS10);
     64c:	e1 e8       	ldi	r30, 0x81	; 129
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	8e 7f       	andi	r24, 0xFE	; 254
     654:	80 83       	st	Z, r24
	timer_pause_flag = 1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <timer_pause_flag>
     65c:	08 95       	ret

0000065e <start_timer>:
}

void start_timer(void) {
	TCCR1B |= (1 << CS10);
     65e:	e1 e8       	ldi	r30, 0x81	; 129
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	81 60       	ori	r24, 0x01	; 1
     666:	80 83       	st	Z, r24
	timer_pause_flag = 0;
     668:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <timer_pause_flag>
     66c:	08 95       	ret

0000066e <set_tone>:
	melody_playing_flag = 1;
	
	play_sound(*(melody_sounds + melody_sound_index));
}

void set_tone(uint16_t buzzer_frequency, float buzzer_dutycycle, int8_t buzzer_slide, uint16_t buzzer_duration) {
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
	frequency = buzzer_frequency;
     672:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <frequency+0x1>
     676:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <frequency>
	tone_dutycycle = buzzer_dutycycle;
     67a:	40 93 54 06 	sts	0x0654, r20	; 0x800654 <tone_dutycycle>
     67e:	50 93 55 06 	sts	0x0655, r21	; 0x800655 <tone_dutycycle+0x1>
     682:	60 93 56 06 	sts	0x0656, r22	; 0x800656 <tone_dutycycle+0x2>
     686:	70 93 57 06 	sts	0x0657, r23	; 0x800657 <tone_dutycycle+0x3>
	slide = buzzer_slide;
     68a:	20 93 4b 06 	sts	0x064B, r18	; 0x80064b <slide>
	
	uint32_t current_time = get_current_time();
     68e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
	
	tone_slide_time = current_time;
     692:	60 93 46 06 	sts	0x0646, r22	; 0x800646 <tone_slide_time>
     696:	70 93 47 06 	sts	0x0647, r23	; 0x800647 <tone_slide_time+0x1>
     69a:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <tone_slide_time+0x2>
     69e:	90 93 49 06 	sts	0x0649, r25	; 0x800649 <tone_slide_time+0x3>
	tone_start_time = current_time;
     6a2:	60 93 4f 06 	sts	0x064F, r22	; 0x80064f <tone_start_time>
     6a6:	70 93 50 06 	sts	0x0650, r23	; 0x800650 <tone_start_time+0x1>
     6aa:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <tone_start_time+0x2>
     6ae:	90 93 52 06 	sts	0x0652, r25	; 0x800652 <tone_start_time+0x3>
	
	tone_duration = buzzer_duration;
     6b2:	10 93 59 06 	sts	0x0659, r17	; 0x800659 <tone_duration+0x1>
     6b6:	00 93 58 06 	sts	0x0658, r16	; 0x800658 <tone_duration>
	if (!tone_mute_flag) start_timer();
     6ba:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <tone_mute_flag>
     6be:	81 11       	cpse	r24, r1
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <set_tone+0x58>
     6c2:	0e 94 2f 03 	call	0x65e	; 0x65e <start_timer>
}
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <play_sound>:
	}
			
	OCR1A = clockperiod - 1;
}

void play_sound(sound buzzer_sound) {
     6cc:	ef 92       	push	r14
     6ce:	ff 92       	push	r15
     6d0:	0f 93       	push	r16
     6d2:	1f 93       	push	r17
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	2b 97       	sbiw	r28, 0x0b	; 11
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
     6e8:	e9 82       	std	Y+1, r14	; 0x01
     6ea:	fa 82       	std	Y+2, r15	; 0x02
     6ec:	0b 83       	std	Y+3, r16	; 0x03
     6ee:	1c 83       	std	Y+4, r17	; 0x04
     6f0:	2d 83       	std	Y+5, r18	; 0x05
     6f2:	3e 83       	std	Y+6, r19	; 0x06
     6f4:	58 87       	std	Y+8, r21	; 0x08
     6f6:	69 87       	std	Y+9, r22	; 0x09
     6f8:	7a 87       	std	Y+10, r23	; 0x0a
     6fa:	8b 87       	std	Y+11, r24	; 0x0b
	set_tone(buzzer_sound.frequency, buzzer_sound.dutycycle, buzzer_sound.slide, buzzer_sound.duration);
     6fc:	08 85       	ldd	r16, Y+8	; 0x08
     6fe:	19 85       	ldd	r17, Y+9	; 0x09
     700:	2a 85       	ldd	r18, Y+10	; 0x0a
     702:	3b 85       	ldd	r19, Y+11	; 0x0b
     704:	84 2f       	mov	r24, r20
     706:	4b 81       	ldd	r20, Y+3	; 0x03
     708:	5c 81       	ldd	r21, Y+4	; 0x04
     70a:	6d 81       	ldd	r22, Y+5	; 0x05
     70c:	7e 81       	ldd	r23, Y+6	; 0x06
     70e:	28 2f       	mov	r18, r24
     710:	89 81       	ldd	r24, Y+1	; 0x01
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	0e 94 37 03 	call	0x66e	; 0x66e <set_tone>
}
     718:	2b 96       	adiw	r28, 0x0b	; 11
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	08 95       	ret

00000732 <play_melody>:

void play_melody(sound *buzzer_melody, uint8_t buzzer_melody_length) {
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	fc 01       	movw	r30, r24
	melody_sounds = buzzer_melody;
     73c:	90 93 5d 06 	sts	0x065D, r25	; 0x80065d <melody_sounds+0x1>
     740:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <melody_sounds>
	melody_sound_index = 0;
     744:	10 92 4c 06 	sts	0x064C, r1	; 0x80064c <melody_sound_index>
	melody_length = buzzer_melody_length;
     748:	60 93 4a 06 	sts	0x064A, r22	; 0x80064a <melody_length>
	melody_playing_flag = 1;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <melody_playing_flag>
	
	play_sound(*(melody_sounds + melody_sound_index));
     752:	e0 80       	ld	r14, Z
     754:	f1 80       	ldd	r15, Z+1	; 0x01
     756:	02 81       	ldd	r16, Z+2	; 0x02
     758:	13 81       	ldd	r17, Z+3	; 0x03
     75a:	24 81       	ldd	r18, Z+4	; 0x04
     75c:	35 81       	ldd	r19, Z+5	; 0x05
     75e:	46 81       	ldd	r20, Z+6	; 0x06
     760:	57 81       	ldd	r21, Z+7	; 0x07
     762:	60 85       	ldd	r22, Z+8	; 0x08
     764:	71 85       	ldd	r23, Z+9	; 0x09
     766:	82 85       	ldd	r24, Z+10	; 0x0a
     768:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
}
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	08 95       	ret

00000776 <get_tone_playing>:
	
	tone_duration = buzzer_duration;
	if (!tone_mute_flag) start_timer();
}

uint8_t get_tone_playing(uint32_t current_time) {
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
	return ((tone_duration + tone_start_time) > current_time);
     77a:	40 91 58 06 	lds	r20, 0x0658	; 0x800658 <tone_duration>
     77e:	50 91 59 06 	lds	r21, 0x0659	; 0x800659 <tone_duration+0x1>
     782:	00 91 4f 06 	lds	r16, 0x064F	; 0x80064f <tone_start_time>
     786:	10 91 50 06 	lds	r17, 0x0650	; 0x800650 <tone_start_time+0x1>
     78a:	20 91 51 06 	lds	r18, 0x0651	; 0x800651 <tone_start_time+0x2>
     78e:	30 91 52 06 	lds	r19, 0x0652	; 0x800652 <tone_start_time+0x3>
     792:	04 0f       	add	r16, r20
     794:	15 1f       	adc	r17, r21
     796:	21 1d       	adc	r18, r1
     798:	31 1d       	adc	r19, r1
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	60 17       	cp	r22, r16
     79e:	71 07       	cpc	r23, r17
     7a0:	82 07       	cpc	r24, r18
     7a2:	93 07       	cpc	r25, r19
     7a4:	08 f0       	brcs	.+2      	; 0x7a8 <get_tone_playing+0x32>
     7a6:	40 e0       	ldi	r20, 0x00	; 0
}
     7a8:	84 2f       	mov	r24, r20
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	08 95       	ret

000007b0 <play_buzzer>:
void start_timer(void) {
	TCCR1B |= (1 << CS10);
	timer_pause_flag = 0;
}

void play_buzzer(void) {
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	2b 97       	sbiw	r28, 0x0b	; 11
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
	uint32_t current_time = get_current_time();
     7d0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
     7d4:	6b 01       	movw	r12, r22
     7d6:	7c 01       	movw	r14, r24
	
	if (get_tone_playing(current_time) && !tone_mute_flag) {	
     7d8:	0e 94 bb 03 	call	0x776	; 0x776 <get_tone_playing>
     7dc:	88 23       	and	r24, r24
     7de:	09 f4       	brne	.+2      	; 0x7e2 <play_buzzer+0x32>
     7e0:	44 c0       	rjmp	.+136    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     7e2:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <tone_mute_flag>
     7e6:	81 11       	cpse	r24, r1
     7e8:	40 c0       	rjmp	.+128    	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
		// Slide tone effect
		if (current_time >= tone_slide_time + 5) {
     7ea:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <tone_slide_time>
     7ee:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <tone_slide_time+0x1>
     7f2:	a0 91 48 06 	lds	r26, 0x0648	; 0x800648 <tone_slide_time+0x2>
     7f6:	b0 91 49 06 	lds	r27, 0x0649	; 0x800649 <tone_slide_time+0x3>
     7fa:	05 96       	adiw	r24, 0x05	; 5
     7fc:	a1 1d       	adc	r26, r1
     7fe:	b1 1d       	adc	r27, r1
     800:	c8 16       	cp	r12, r24
     802:	d9 06       	cpc	r13, r25
     804:	ea 06       	cpc	r14, r26
     806:	fb 06       	cpc	r15, r27
     808:	b0 f0       	brcs	.+44     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
			frequency += slide;
     80a:	20 91 4b 06 	lds	r18, 0x064B	; 0x80064b <slide>
     80e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <frequency>
     812:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <frequency+0x1>
     816:	82 0f       	add	r24, r18
     818:	91 1d       	adc	r25, r1
     81a:	27 fd       	sbrc	r18, 7
     81c:	9a 95       	dec	r25
     81e:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <frequency+0x1>
     822:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <frequency>
			
			if (frequency < 0) {
				frequency = 0;
			}
			
			tone_slide_time = current_time;
     826:	c0 92 46 06 	sts	0x0646, r12	; 0x800646 <tone_slide_time>
     82a:	d0 92 47 06 	sts	0x0647, r13	; 0x800647 <tone_slide_time+0x1>
     82e:	e0 92 48 06 	sts	0x0648, r14	; 0x800648 <tone_slide_time+0x2>
     832:	f0 92 49 06 	sts	0x0649, r15	; 0x800649 <tone_slide_time+0x3>
		}

		clockperiod = freq_to_clock_period(frequency);
     836:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <frequency>
     83a:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <frequency+0x1>
     83e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <freq_to_clock_period>
     842:	ac 01       	movw	r20, r24
     844:	90 93 4e 06 	sts	0x064E, r25	; 0x80064e <clockperiod+0x1>
     848:	80 93 4d 06 	sts	0x064D, r24	; 0x80064d <clockperiod>
		pulsewidth = duty_cycle_to_pulse_width(tone_dutycycle, clockperiod);
     84c:	60 91 54 06 	lds	r22, 0x0654	; 0x800654 <tone_dutycycle>
     850:	70 91 55 06 	lds	r23, 0x0655	; 0x800655 <tone_dutycycle+0x1>
     854:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <tone_dutycycle+0x2>
     858:	90 91 57 06 	lds	r25, 0x0657	; 0x800657 <tone_dutycycle+0x3>
     85c:	0e 94 09 03 	call	0x612	; 0x612 <duty_cycle_to_pulse_width>
     860:	90 93 5f 06 	sts	0x065F, r25	; 0x80065f <pulsewidth+0x1>
     864:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <pulsewidth>
     868:	38 c0       	rjmp	.+112    	; 0x8da <__DATA_REGION_LENGTH__+0xda>
	}
	else if (melody_playing_flag && !tone_mute_flag) {
     86a:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <melody_playing_flag>
     86e:	88 23       	and	r24, r24
     870:	71 f1       	breq	.+92     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
     872:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <tone_mute_flag>
     876:	81 11       	cpse	r24, r1
     878:	2a c0       	rjmp	.+84     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
		if (melody_sound_index < melody_length)	{
     87a:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <melody_sound_index>
     87e:	90 91 4a 06 	lds	r25, 0x064A	; 0x80064a <melody_length>
     882:	89 17       	cp	r24, r25
     884:	08 f5       	brcc	.+66     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
			melody_sound_index++;
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <melody_sound_index>
			sound next_sound = *(melody_sounds + melody_sound_index);
     88c:	e0 91 5c 06 	lds	r30, 0x065C	; 0x80065c <melody_sounds>
     890:	f0 91 5d 06 	lds	r31, 0x065D	; 0x80065d <melody_sounds+0x1>
     894:	9b e0       	ldi	r25, 0x0B	; 11
     896:	89 9f       	mul	r24, r25
     898:	e0 0d       	add	r30, r0
     89a:	f1 1d       	adc	r31, r1
     89c:	11 24       	eor	r1, r1
     89e:	8b e0       	ldi	r24, 0x0B	; 11
     8a0:	de 01       	movw	r26, r28
     8a2:	11 96       	adiw	r26, 0x01	; 1
     8a4:	01 90       	ld	r0, Z+
     8a6:	0d 92       	st	X+, r0
     8a8:	8a 95       	dec	r24
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <__DATA_REGION_LENGTH__+0xa4>
			play_sound(next_sound);
     8ac:	e9 80       	ldd	r14, Y+1	; 0x01
     8ae:	fa 80       	ldd	r15, Y+2	; 0x02
     8b0:	0b 81       	ldd	r16, Y+3	; 0x03
     8b2:	1c 81       	ldd	r17, Y+4	; 0x04
     8b4:	2d 81       	ldd	r18, Y+5	; 0x05
     8b6:	3e 81       	ldd	r19, Y+6	; 0x06
     8b8:	4f 81       	ldd	r20, Y+7	; 0x07
     8ba:	58 85       	ldd	r21, Y+8	; 0x08
     8bc:	69 85       	ldd	r22, Y+9	; 0x09
     8be:	7a 85       	ldd	r23, Y+10	; 0x0a
     8c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8c2:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
     8c6:	09 c0       	rjmp	.+18     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
		}
		else melody_playing_flag = 0;
     8c8:	10 92 5a 06 	sts	0x065A, r1	; 0x80065a <melody_playing_flag>
     8cc:	06 c0       	rjmp	.+12     	; 0x8da <__DATA_REGION_LENGTH__+0xda>
	}
	else if(!timer_pause_flag) {
     8ce:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <timer_pause_flag>
     8d2:	81 11       	cpse	r24, r1
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
		stop_timer();
     8d6:	0e 94 26 03 	call	0x64c	; 0x64c <stop_timer>
	}
	
	// Update the PWM registers
	if(pulsewidth > 0) {
     8da:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <pulsewidth>
     8de:	90 91 5f 06 	lds	r25, 0x065F	; 0x80065f <pulsewidth+0x1>
     8e2:	00 97       	sbiw	r24, 0x00	; 0
     8e4:	31 f0       	breq	.+12     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
		// The compare value is one less than the number of clock cycles in the pulse width
		OCR1B = pulsewidth - 1;
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     8ec:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
	}
	else {
		OCR1B = 0;
     8f2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     8f6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	}
			
	OCR1A = clockperiod - 1;
     8fa:	80 91 4d 06 	lds	r24, 0x064D	; 0x80064d <clockperiod>
     8fe:	90 91 4e 06 	lds	r25, 0x064E	; 0x80064e <clockperiod+0x1>
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     908:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
     90c:	2b 96       	adiw	r28, 0x0b	; 11
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	08 95       	ret

0000092a <mute_tone_toggle>:

uint8_t get_tone_playing(uint32_t current_time) {
	return ((tone_duration + tone_start_time) > current_time);
}

void mute_tone_toggle(void) {
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
	tone_mute_flag = 1 - tone_mute_flag;
     932:	90 91 53 06 	lds	r25, 0x0653	; 0x800653 <tone_mute_flag>
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	89 1b       	sub	r24, r25
     93a:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <tone_mute_flag>
	play_sound(button_sound);
     93e:	e0 90 cc 04 	lds	r14, 0x04CC	; 0x8004cc <button_sound>
     942:	f0 90 cd 04 	lds	r15, 0x04CD	; 0x8004cd <button_sound+0x1>
     946:	00 91 ce 04 	lds	r16, 0x04CE	; 0x8004ce <button_sound+0x2>
     94a:	10 91 cf 04 	lds	r17, 0x04CF	; 0x8004cf <button_sound+0x3>
     94e:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <button_sound+0x4>
     952:	30 91 d1 04 	lds	r19, 0x04D1	; 0x8004d1 <button_sound+0x5>
     956:	40 91 d2 04 	lds	r20, 0x04D2	; 0x8004d2 <button_sound+0x6>
     95a:	50 91 d3 04 	lds	r21, 0x04D3	; 0x8004d3 <button_sound+0x7>
     95e:	60 91 d4 04 	lds	r22, 0x04D4	; 0x8004d4 <button_sound+0x8>
     962:	70 91 d5 04 	lds	r23, 0x04D5	; 0x8004d5 <button_sound+0x9>
     966:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <button_sound+0xa>
     96a:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
}
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	08 95       	ret

00000978 <get_mute_tone>:

uint8_t get_mute_tone(void) {
	return tone_mute_flag;
}
     978:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <tone_mute_flag>
     97c:	08 95       	ret

0000097e <set_mute_tone>:

void set_mute_tone(uint8_t mute) {
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
	tone_mute_flag = mute;
     986:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <tone_mute_flag>
	play_sound(button_sound);
     98a:	e0 90 cc 04 	lds	r14, 0x04CC	; 0x8004cc <button_sound>
     98e:	f0 90 cd 04 	lds	r15, 0x04CD	; 0x8004cd <button_sound+0x1>
     992:	00 91 ce 04 	lds	r16, 0x04CE	; 0x8004ce <button_sound+0x2>
     996:	10 91 cf 04 	lds	r17, 0x04CF	; 0x8004cf <button_sound+0x3>
     99a:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <button_sound+0x4>
     99e:	30 91 d1 04 	lds	r19, 0x04D1	; 0x8004d1 <button_sound+0x5>
     9a2:	40 91 d2 04 	lds	r20, 0x04D2	; 0x8004d2 <button_sound+0x6>
     9a6:	50 91 d3 04 	lds	r21, 0x04D3	; 0x8004d3 <button_sound+0x7>
     9aa:	60 91 d4 04 	lds	r22, 0x04D4	; 0x8004d4 <button_sound+0x8>
     9ae:	70 91 d5 04 	lds	r23, 0x04D5	; 0x8004d5 <button_sound+0x9>
     9b2:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <button_sound+0xa>
     9b6:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
}
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	08 95       	ret

000009c4 <get_game_mute_flag>:

uint8_t get_game_mute_flag(void) {
	return game_mute_flag;
}
     9c4:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <game_mute_flag>
     9c8:	08 95       	ret

000009ca <set_game_mute_flag>:

void set_game_mute_flag(uint8_t mute_flag) {
	game_mute_flag = mute_flag;
     9ca:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <game_mute_flag>
     9ce:	08 95       	ret

000009d0 <init_dice>:
uint8_t player_dice_roll;
uint8_t player_dice_roll_finish;

// Initialise dice hardware
void init_dice(void) {
	player_dice_roll = 0;
     9d0:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <player_dice_roll>
	// Set port D, pin D3 to be an output for dice roll status.
	DDRD |= (1 << DDRD3);
     9d4:	8a b1       	in	r24, 0x0a	; 10
     9d6:	88 60       	ori	r24, 0x08	; 8
     9d8:	8a b9       	out	0x0a, r24	; 10
     9da:	08 95       	ret

000009dc <dice_roll_toggle>:
}

// Toggle dice roll logic on button press.
void dice_roll_toggle(void) {
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
	if (player_dice_roll) {
     9e4:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <player_dice_roll>
     9e8:	88 23       	and	r24, r24
     9ea:	69 f1       	breq	.+90     	; 0xa46 <dice_roll_toggle+0x6a>
		// Dice is already rolling, stop dice.
		move_terminal_cursor(10,12);
     9ec:	6c e0       	ldi	r22, 0x0C	; 12
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	8a e0       	ldi	r24, 0x0A	; 10
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
		printf_P(PSTR("Dice: Stopped"));
     9f8:	8a e8       	ldi	r24, 0x8A	; 138
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	9f 93       	push	r25
     9fe:	8f 93       	push	r24
     a00:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
		
		// Turn off dice indicator LED on Port D3.
		PORTD &= ~(1 << PORTD3);
     a04:	8b b1       	in	r24, 0x0b	; 11
     a06:	87 7f       	andi	r24, 0xF7	; 247
     a08:	8b b9       	out	0x0b, r24	; 11
		
		player_dice_roll_finish = 1;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <player_dice_roll_finish>
		play_sound(button_sound);
     a10:	e0 90 d7 04 	lds	r14, 0x04D7	; 0x8004d7 <button_sound>
     a14:	f0 90 d8 04 	lds	r15, 0x04D8	; 0x8004d8 <button_sound+0x1>
     a18:	00 91 d9 04 	lds	r16, 0x04D9	; 0x8004d9 <button_sound+0x2>
     a1c:	10 91 da 04 	lds	r17, 0x04DA	; 0x8004da <button_sound+0x3>
     a20:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <button_sound+0x4>
     a24:	30 91 dc 04 	lds	r19, 0x04DC	; 0x8004dc <button_sound+0x5>
     a28:	40 91 dd 04 	lds	r20, 0x04DD	; 0x8004dd <button_sound+0x6>
     a2c:	50 91 de 04 	lds	r21, 0x04DE	; 0x8004de <button_sound+0x7>
     a30:	60 91 df 04 	lds	r22, 0x04DF	; 0x8004df <button_sound+0x8>
     a34:	70 91 e0 04 	lds	r23, 0x04E0	; 0x8004e0 <button_sound+0x9>
     a38:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <button_sound+0xa>
     a3c:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	2d c0       	rjmp	.+90     	; 0xaa0 <dice_roll_toggle+0xc4>
	}
	else {
		// Dice is stopped, start rolling.
		// Seed RNG with current time.
		p_rand_seed(get_current_time());
     a46:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
     a4a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <p_rand_seed>
		
		move_terminal_cursor(10,12);
     a4e:	6c e0       	ldi	r22, 0x0C	; 12
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
		printf_P(PSTR("Dice: Rolling"));
     a5a:	8c e7       	ldi	r24, 0x7C	; 124
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	9f 93       	push	r25
     a60:	8f 93       	push	r24
     a62:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
		
		// Turn on dice indicator LED on Port D3.
		PORTD |= (1 << PORTD3);
     a66:	8b b1       	in	r24, 0x0b	; 11
     a68:	88 60       	ori	r24, 0x08	; 8
     a6a:	8b b9       	out	0x0b, r24	; 11
		play_sound(button_sound);
     a6c:	e0 90 d7 04 	lds	r14, 0x04D7	; 0x8004d7 <button_sound>
     a70:	f0 90 d8 04 	lds	r15, 0x04D8	; 0x8004d8 <button_sound+0x1>
     a74:	00 91 d9 04 	lds	r16, 0x04D9	; 0x8004d9 <button_sound+0x2>
     a78:	10 91 da 04 	lds	r17, 0x04DA	; 0x8004da <button_sound+0x3>
     a7c:	20 91 db 04 	lds	r18, 0x04DB	; 0x8004db <button_sound+0x4>
     a80:	30 91 dc 04 	lds	r19, 0x04DC	; 0x8004dc <button_sound+0x5>
     a84:	40 91 dd 04 	lds	r20, 0x04DD	; 0x8004dd <button_sound+0x6>
     a88:	50 91 de 04 	lds	r21, 0x04DE	; 0x8004de <button_sound+0x7>
     a8c:	60 91 df 04 	lds	r22, 0x04DF	; 0x8004df <button_sound+0x8>
     a90:	70 91 e0 04 	lds	r23, 0x04E0	; 0x8004e0 <button_sound+0x9>
     a94:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <button_sound+0xa>
     a98:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
	}
	
	player_dice_roll = 1 - player_dice_roll;
     aa0:	90 91 61 06 	lds	r25, 0x0661	; 0x800661 <player_dice_roll>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	89 1b       	sub	r24, r25
     aa8:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <player_dice_roll>
}
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	08 95       	ret

00000ab6 <get_dice_rolling>:

// Returns if the dice is currently rolling.
uint8_t get_dice_rolling(void) {
	return player_dice_roll;
}
     ab6:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <player_dice_roll>
     aba:	08 95       	ret

00000abc <get_dice_roll_finish>:

uint8_t get_dice_roll_finish(void) {
	uint8_t dice_return = player_dice_roll_finish;
     abc:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <player_dice_roll_finish>
	player_dice_roll_finish = 0;
     ac0:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <player_dice_roll_finish>
	return dice_return;
}
     ac4:	08 95       	ret

00000ac6 <dice_roll>:

// Returns the random number between 1 and 6 for a dice roll.
uint8_t dice_roll(void) {
	player_dice_roll_num ++;
     ac6:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <player_dice_roll_num>
     aca:	8f 5f       	subi	r24, 0xFF	; 255
     acc:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <player_dice_roll_num>
	if (player_dice_roll_num > 6) player_dice_roll_num = 1;
     ad0:	87 30       	cpi	r24, 0x07	; 7
     ad2:	18 f0       	brcs	.+6      	; 0xada <dice_roll+0x14>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <player_dice_roll_num>
	return player_dice_roll_num;
}
     ada:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <player_dice_roll_num>
     ade:	08 95       	ret

00000ae0 <dice_roll_rand>:

uint8_t dice_roll_rand(void) {
	return p_rand_next(6) + 1;
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <p_rand_next>
}
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	08 95       	ret

00000aea <initialise_display>:

// constant value used to display 'SNKLD' on launch
static const uint8_t snkld_display[MATRIX_NUM_COLUMNS] = 
		{117, 85, 93, 124, 64, 124, 125, 17, 109, 0, 124, 4, 4, 125, 69, 57};

void initialise_display(void) {
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	28 97       	sbiw	r28, 0x08	; 8
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
	// start by clearing the LED matrix
	ledmatrix_clear();
     b02:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <ledmatrix_clear>

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	08 c0       	rjmp	.+16     	; 0xb1c <initialise_display+0x32>
		col_colours[row] = MATRIX_COLOUR_EMPTY;
     b0c:	e1 e0       	ldi	r30, 0x01	; 1
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	ec 0f       	add	r30, r28
     b12:	fd 1f       	adc	r31, r29
     b14:	e8 0f       	add	r30, r24
     b16:	f9 1f       	adc	r31, r25
     b18:	10 82       	st	Z, r1
	// start by clearing the LED matrix
	ledmatrix_clear();

	// create an array with the background colour at every position
	PixelColour col_colours[MATRIX_NUM_ROWS];
	for (int row = 0; row < MATRIX_NUM_ROWS; row++) {
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	88 30       	cpi	r24, 0x08	; 8
     b1e:	91 05       	cpc	r25, r1
     b20:	ac f3       	brlt	.-22     	; 0xb0c <initialise_display+0x22>
     b22:	08 e0       	ldi	r16, 0x08	; 8
     b24:	10 e0       	ldi	r17, 0x00	; 0
     b26:	08 c0       	rjmp	.+16     	; 0xb38 <initialise_display+0x4e>
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = MATRIX_X_OFFSET + WIDTH; x < MATRIX_NUM_COLUMNS; x++) {
		ledmatrix_update_column(x, col_colours);
     b28:	be 01       	movw	r22, r28
     b2a:	6f 5f       	subi	r22, 0xFF	; 255
     b2c:	7f 4f       	sbci	r23, 0xFF	; 255
     b2e:	80 2f       	mov	r24, r16
     b30:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <ledmatrix_update_column>
	for (int x = 0; x < MATRIX_X_OFFSET; x++) {
		ledmatrix_update_column(x, col_colours);
	}

	// and add the bounds on the right
	for (int x = MATRIX_X_OFFSET + WIDTH; x < MATRIX_NUM_COLUMNS; x++) {
     b34:	0f 5f       	subi	r16, 0xFF	; 255
     b36:	1f 4f       	sbci	r17, 0xFF	; 255
     b38:	00 31       	cpi	r16, 0x10	; 16
     b3a:	11 05       	cpc	r17, r1
     b3c:	ac f3       	brlt	.-22     	; 0xb28 <initialise_display+0x3e>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	01 c0       	rjmp	.+2      	; 0xb46 <initialise_display+0x5c>
		ledmatrix_update_column(x, col_colours);
	}
	
	// create an array with the background colour at every position
	PixelColour row_colours[MATRIX_NUM_COLUMNS];
	for (int col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	80 31       	cpi	r24, 0x10	; 16
     b48:	91 05       	cpc	r25, r1
     b4a:	e4 f3       	brlt	.-8      	; 0xb44 <initialise_display+0x5a>

	// and add the bounds on the right
	for (int y = MATRIX_Y_OFFSET + HEIGHT; y < MATRIX_NUM_ROWS; y++) {
		ledmatrix_update_row(y, row_colours);
	}
}
     b4c:	28 96       	adiw	r28, 0x08	; 8
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	08 95       	ret

00000b62 <start_display>:

void start_display(void) {
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	28 97       	sbiw	r28, 0x08	; 8
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     b78:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     b7c:	10 e0       	ldi	r17, 0x00	; 0
     b7e:	29 c0       	rjmp	.+82     	; 0xbd2 <start_display+0x70>
		col_data = snkld_display[col];
     b80:	e1 2f       	mov	r30, r17
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ee 51       	subi	r30, 0x1E	; 30
     b86:	fb 4f       	sbci	r31, 0xFB	; 251
     b88:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     b8a:	90 ff       	sbrs	r25, 0
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <start_display+0x30>
			colour = COLOUR_RED;
     b8e:	2f e0       	ldi	r18, 0x0F	; 15
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <start_display+0x32>
		} else {
			colour = COLOUR_GREEN;
     b92:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     b94:	87 e0       	ldi	r24, 0x07	; 7
     b96:	13 c0       	rjmp	.+38     	; 0xbbe <start_display+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     b98:	99 23       	and	r25, r25
     b9a:	44 f4       	brge	.+16     	; 0xbac <start_display+0x4a>
				column_colour_data[i] = colour;
     b9c:	e1 e0       	ldi	r30, 0x01	; 1
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	ec 0f       	add	r30, r28
     ba2:	fd 1f       	adc	r31, r29
     ba4:	e8 0f       	add	r30, r24
     ba6:	f1 1d       	adc	r31, r1
     ba8:	20 83       	st	Z, r18
     baa:	07 c0       	rjmp	.+14     	; 0xbba <start_display+0x58>
			} else {
				column_colour_data[i] = 0;
     bac:	e1 e0       	ldi	r30, 0x01	; 1
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ec 0f       	add	r30, r28
     bb2:	fd 1f       	adc	r31, r29
     bb4:	e8 0f       	add	r30, r24
     bb6:	f1 1d       	adc	r31, r1
     bb8:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     bba:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     bbc:	81 50       	subi	r24, 0x01	; 1
     bbe:	81 11       	cpse	r24, r1
     bc0:	eb cf       	rjmp	.-42     	; 0xb98 <start_display+0x36>
			} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     bc2:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	81 2f       	mov	r24, r17
     bcc:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     bd0:	1f 5f       	subi	r17, 0xFF	; 255
     bd2:	10 31       	cpi	r17, 0x10	; 16
     bd4:	a8 f2       	brcs	.-86     	; 0xb80 <start_display+0x1e>
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
}
     bd6:	28 96       	adiw	r28, 0x08	; 8
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	08 95       	ret

00000bea <update_square_colour>:

// Update the square colour to the display. The object passed can be the object
// type or an object instance (which additionally has an ID number if 
// applicable -see get_object_type in game.c/h)
void update_square_colour(uint8_t x, uint8_t y, uint8_t object) {
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	d8 2f       	mov	r29, r24
     bf0:	c6 2f       	mov	r28, r22
     bf2:	84 2f       	mov	r24, r20
	// determine which colour corresponds to this object
	PixelColour colour;
	object = get_object_type(object);
     bf4:	0e 94 80 06 	call	0xd00	; 0xd00 <get_object_type>
	
	switch (object) {
     bf8:	80 39       	cpi	r24, 0x90	; 144
     bfa:	01 f1       	breq	.+64     	; 0xc3c <update_square_colour+0x52>
     bfc:	68 f4       	brcc	.+26     	; 0xc18 <update_square_colour+0x2e>
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	c9 f0       	breq	.+50     	; 0xc34 <update_square_colour+0x4a>
     c02:	28 f4       	brcc	.+10     	; 0xc0e <update_square_colour+0x24>
     c04:	80 31       	cpi	r24, 0x10	; 16
     c06:	01 f1       	breq	.+64     	; 0xc48 <update_square_colour+0x5e>
     c08:	80 32       	cpi	r24, 0x20	; 32
     c0a:	f1 f0       	breq	.+60     	; 0xc48 <update_square_colour+0x5e>
     c0c:	11 c0       	rjmp	.+34     	; 0xc30 <update_square_colour+0x46>
     c0e:	80 35       	cpi	r24, 0x50	; 80
     c10:	99 f0       	breq	.+38     	; 0xc38 <update_square_colour+0x4e>
     c12:	80 38       	cpi	r24, 0x80	; 128
     c14:	99 f0       	breq	.+38     	; 0xc3c <update_square_colour+0x52>
     c16:	0c c0       	rjmp	.+24     	; 0xc30 <update_square_colour+0x46>
     c18:	80 3d       	cpi	r24, 0xD0	; 208
     c1a:	91 f0       	breq	.+36     	; 0xc40 <update_square_colour+0x56>
     c1c:	28 f4       	brcc	.+10     	; 0xc28 <update_square_colour+0x3e>
     c1e:	80 3a       	cpi	r24, 0xA0	; 160
     c20:	69 f0       	breq	.+26     	; 0xc3c <update_square_colour+0x52>
     c22:	80 3c       	cpi	r24, 0xC0	; 192
     c24:	69 f0       	breq	.+26     	; 0xc40 <update_square_colour+0x56>
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <update_square_colour+0x46>
     c28:	80 3e       	cpi	r24, 0xE0	; 224
     c2a:	51 f0       	breq	.+20     	; 0xc40 <update_square_colour+0x56>
     c2c:	80 3f       	cpi	r24, 0xF0	; 240
     c2e:	51 f0       	breq	.+20     	; 0xc44 <update_square_colour+0x5a>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0b c0       	rjmp	.+22     	; 0xc4a <update_square_colour+0x60>
		case START_POINT:	/* FALLTHROUGH */
		case FINISH_LINE:
			colour = MATRIX_COLOUR_START_END;
			break;
		case PLAYER_1:
			colour = MATRIX_COLOUR_P1;
     c34:	4c e3       	ldi	r20, 0x3C	; 60
			break;
     c36:	09 c0       	rjmp	.+18     	; 0xc4a <update_square_colour+0x60>
		case PLAYER_2:
			colour = MATRIX_COLOUR_P2;
     c38:	4f ed       	ldi	r20, 0xDF	; 223
			break;
     c3a:	07 c0       	rjmp	.+14     	; 0xc4a <update_square_colour+0x60>
			
		// All snakes should be the same colour
		case SNAKE_START:	/* FALLTHROUGH */
		case SNAKE_END:		/* FALLTHROUGH */
		case SNAKE_MIDDLE:
			colour = MATRIX_COLOUR_SNAKE;
     c3c:	4f e0       	ldi	r20, 0x0F	; 15
			break;
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <update_square_colour+0x60>
			
		// All ladders should be the same colour
		case LADDER_START:	/* FALLTHROUGH */
		case LADDER_END:	/* FALLTHROUGH */
		case LADDER_MIDDLE:
			colour = MATRIX_COLOUR_LADDER;
     c40:	40 ef       	ldi	r20, 0xF0	; 240
			break;
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <update_square_colour+0x60>
		case SNAKE_LADDER_MIDDLE:
			colour = MATRIX_COLOUR_SNAKE_LADDER;
     c44:	4b eb       	ldi	r20, 0xBB	; 187
			break;
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <update_square_colour+0x60>
		case EMPTY_SQUARE:
			colour = MATRIX_COLOUR_EMPTY;
			break;
		case START_POINT:	/* FALLTHROUGH */
		case FINISH_LINE:
			colour = MATRIX_COLOUR_START_END;
     c48:	45 e3       	ldi	r20, 0x35	; 53
			colour = MATRIX_COLOUR_EMPTY;
			break;
	}

	// Update the pixel at the given location with this colour
	ledmatrix_update_pixel(y, WIDTH - 1 - x, colour);
     c4a:	67 e0       	ldi	r22, 0x07	; 7
     c4c:	6d 1b       	sub	r22, r29
     c4e:	8c 2f       	mov	r24, r28
     c50:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <ledmatrix_update_pixel>
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <init_player>:
void move_buffer_reset(void) {
	for (uint8_t i = 0; i < MOVE_BUFFER_SIZE; i++) {
		player_1_move_buffer[i][0] = 0;
		player_1_move_buffer[i][1] = 0;
	}
}
     c5a:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <player_1_x>
     c5e:	10 92 9b 06 	sts	0x069B, r1	; 0x80069b <player_1_y>
     c62:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <player_2_x>
     c66:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <player_2_y>
     c6a:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <player_1_time+0x1>
     c6e:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <player_1_time>
     c72:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <player_2_time+0x1>
     c76:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <player_2_time>
     c7a:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <player_visible>
     c7e:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <player_turns>
     c82:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <player_1_move_buffer_index>
     c86:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <player_2_move_buffer_index>
     c8a:	08 95       	ret

00000c8c <init_game>:
     c8c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <init_player>
     c90:	40 e4       	ldi	r20, 0x40	; 64
     c92:	60 91 9b 06 	lds	r22, 0x069B	; 0x80069b <player_1_y>
     c96:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <player_1_x>
     c9a:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
     c9e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <single_player_flag>
     ca2:	81 11       	cpse	r24, r1
     ca4:	07 c0       	rjmp	.+14     	; 0xcb4 <init_game+0x28>
     ca6:	40 e5       	ldi	r20, 0x50	; 80
     ca8:	60 91 cd 06 	lds	r22, 0x06CD	; 0x8006cd <player_2_y>
     cac:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <player_2_x>
     cb0:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
     cb4:	08 95       	ret

00000cb6 <init_game_board>:
     cb6:	cf 93       	push	r28
     cb8:	c8 2f       	mov	r28, r24
     cba:	0e 94 75 05 	call	0xaea	; 0xaea <initialise_display>
     cbe:	8c 2f       	mov	r24, r28
     cc0:	0e 94 90 0b 	call	0x1720	; 0x1720 <get_game_starting_layout>
     cc4:	0e 94 98 0b 	call	0x1730	; 0x1730 <get_game_board>
     cc8:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <board+0x1>
     ccc:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <board>
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <get_object_at>:
     cd4:	88 30       	cpi	r24, 0x08	; 8
     cd6:	80 f4       	brcc	.+32     	; 0xcf8 <get_object_at+0x24>
     cd8:	60 31       	cpi	r22, 0x10	; 16
     cda:	80 f4       	brcc	.+32     	; 0xcfc <get_object_at+0x28>
     cdc:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <board>
     ce0:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <board+0x1>
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	90 e1       	ldi	r25, 0x10	; 16
     ce8:	89 9f       	mul	r24, r25
     cea:	60 0d       	add	r22, r0
     cec:	71 1d       	adc	r23, r1
     cee:	11 24       	eor	r1, r1
     cf0:	e6 0f       	add	r30, r22
     cf2:	f7 1f       	adc	r31, r23
     cf4:	80 81       	ld	r24, Z
     cf6:	08 95       	ret
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	08 95       	ret
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	08 95       	ret

00000d00 <get_object_type>:
     d00:	80 7f       	andi	r24, 0xF0	; 240
     d02:	08 95       	ret

00000d04 <get_object_identifier>:
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	08 95       	ret

00000d08 <move_player_constrain>:
     d08:	fc 01       	movw	r30, r24
     d0a:	90 81       	ld	r25, Z
     d0c:	db 01       	movw	r26, r22
     d0e:	2c 91       	ld	r18, X
     d10:	20 31       	cpi	r18, 0x10	; 16
     d12:	24 f0       	brlt	.+8      	; 0xd1c <move_player_constrain+0x14>
     d14:	80 e1       	ldi	r24, 0x10	; 16
     d16:	82 1b       	sub	r24, r18
     d18:	8c 93       	st	X, r24
     d1a:	05 c0       	rjmp	.+10     	; 0xd26 <move_player_constrain+0x1e>
     d1c:	22 23       	and	r18, r18
     d1e:	1c f4       	brge	.+6      	; 0xd26 <move_player_constrain+0x1e>
     d20:	20 5f       	subi	r18, 0xF0	; 240
     d22:	db 01       	movw	r26, r22
     d24:	2c 93       	st	X, r18
     d26:	98 30       	cpi	r25, 0x08	; 8
     d28:	24 f0       	brlt	.+8      	; 0xd32 <move_player_constrain+0x2a>
     d2a:	88 e0       	ldi	r24, 0x08	; 8
     d2c:	89 1b       	sub	r24, r25
     d2e:	80 83       	st	Z, r24
     d30:	08 95       	ret
     d32:	99 23       	and	r25, r25
     d34:	14 f4       	brge	.+4      	; 0xd3a <move_player_constrain+0x32>
     d36:	98 5f       	subi	r25, 0xF8	; 248
     d38:	90 83       	st	Z, r25
     d3a:	08 95       	ret

00000d3c <get_move_buffer>:

// Return (x,y) coordinate from topmost element of move buffer
void get_move_buffer(int8_t *player_x, int8_t *player_y, uint8_t player_num) {
	switch (player_num) {
     d3c:	40 34       	cpi	r20, 0x40	; 64
     d3e:	19 f0       	breq	.+6      	; 0xd46 <get_move_buffer+0xa>
     d40:	40 35       	cpi	r20, 0x50	; 80
     d42:	51 f0       	breq	.+20     	; 0xd58 <get_move_buffer+0x1c>
     d44:	08 95       	ret
		case PLAYER_1:
		// Add player 1 position to bottom of buffer
		*player_x = player_1_move_buffer[0][0];
     d46:	ed e9       	ldi	r30, 0x9D	; 157
     d48:	f6 e0       	ldi	r31, 0x06	; 6
     d4a:	20 81       	ld	r18, Z
     d4c:	dc 01       	movw	r26, r24
     d4e:	2c 93       	st	X, r18
		*player_y = player_1_move_buffer[0][1];
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	fb 01       	movw	r30, r22
     d54:	80 83       	st	Z, r24
		break;
     d56:	08 95       	ret
		case PLAYER_2:
		// Add player 2 position to bottom of buffer
		*player_x = player_2_move_buffer[0][0];
     d58:	eb e6       	ldi	r30, 0x6B	; 107
     d5a:	f6 e0       	ldi	r31, 0x06	; 6
     d5c:	20 81       	ld	r18, Z
     d5e:	dc 01       	movw	r26, r24
     d60:	2c 93       	st	X, r18
		*player_y = player_2_move_buffer[0][1];
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	fb 01       	movw	r30, r22
     d66:	80 83       	st	Z, r24
     d68:	08 95       	ret

00000d6a <move_buffer_remove>:
}


// Remove topmost element of move buffer
void move_buffer_remove(uint8_t player_num) {
	switch (player_num) {
     d6a:	80 34       	cpi	r24, 0x40	; 64
     d6c:	a9 f0       	breq	.+42     	; 0xd98 <move_buffer_remove+0x2e>
     d6e:	80 35       	cpi	r24, 0x50	; 80
     d70:	a9 f1       	breq	.+106    	; 0xddc <move_buffer_remove+0x72>
     d72:	08 95       	ret
		case PLAYER_1:
		// Remove player 1 position from top of buffer
		for (uint8_t i = 0; i < player_1_move_buffer_index; i++) {
				player_1_move_buffer[i][0] = player_1_move_buffer[i+1][0];
     d74:	dc 01       	movw	r26, r24
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	aa 0f       	add	r26, r26
     d7a:	bb 1f       	adc	r27, r27
     d7c:	a3 56       	subi	r26, 0x63	; 99
     d7e:	b9 4f       	sbci	r27, 0xF9	; 249
     d80:	3c 91       	ld	r19, X
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	fc 01       	movw	r30, r24
     d88:	e3 56       	subi	r30, 0x63	; 99
     d8a:	f9 4f       	sbci	r31, 0xF9	; 249
     d8c:	30 83       	st	Z, r19
				player_1_move_buffer[i][1] = player_1_move_buffer[i+1][1];
     d8e:	11 96       	adiw	r26, 0x01	; 1
     d90:	8c 91       	ld	r24, X
     d92:	81 83       	std	Z+1, r24	; 0x01
// Remove topmost element of move buffer
void move_buffer_remove(uint8_t player_num) {
	switch (player_num) {
		case PLAYER_1:
		// Remove player 1 position from top of buffer
		for (uint8_t i = 0; i < player_1_move_buffer_index; i++) {
     d94:	2f 5f       	subi	r18, 0xFF	; 255
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <move_buffer_remove+0x30>
}


// Remove topmost element of move buffer
void move_buffer_remove(uint8_t player_num) {
	switch (player_num) {
     d98:	20 e0       	ldi	r18, 0x00	; 0
		case PLAYER_1:
		// Remove player 1 position from top of buffer
		for (uint8_t i = 0; i < player_1_move_buffer_index; i++) {
     d9a:	82 2f       	mov	r24, r18
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	30 91 66 06 	lds	r19, 0x0666	; 0x800666 <player_1_move_buffer_index>
     da2:	43 2f       	mov	r20, r19
     da4:	03 2e       	mov	r0, r19
     da6:	00 0c       	add	r0, r0
     da8:	55 0b       	sbc	r21, r21
     daa:	84 17       	cp	r24, r20
     dac:	95 07       	cpc	r25, r21
     dae:	14 f3       	brlt	.-60     	; 0xd74 <move_buffer_remove+0xa>
				player_1_move_buffer[i][0] = player_1_move_buffer[i+1][0];
				player_1_move_buffer[i][1] = player_1_move_buffer[i+1][1];
		}
		player_1_move_buffer_index --;
     db0:	31 50       	subi	r19, 0x01	; 1
     db2:	30 93 66 06 	sts	0x0666, r19	; 0x800666 <player_1_move_buffer_index>
		break;
     db6:	08 95       	ret
		case PLAYER_2:
		// Remove player 2 position from top of buffer
		for (uint8_t i = 0; i < player_2_move_buffer_index; i++) {
			player_2_move_buffer[i][0] = player_2_move_buffer[i+1][0];
     db8:	dc 01       	movw	r26, r24
     dba:	11 96       	adiw	r26, 0x01	; 1
     dbc:	aa 0f       	add	r26, r26
     dbe:	bb 1f       	adc	r27, r27
     dc0:	a5 59       	subi	r26, 0x95	; 149
     dc2:	b9 4f       	sbci	r27, 0xF9	; 249
     dc4:	3c 91       	ld	r19, X
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	fc 01       	movw	r30, r24
     dcc:	e5 59       	subi	r30, 0x95	; 149
     dce:	f9 4f       	sbci	r31, 0xF9	; 249
     dd0:	30 83       	st	Z, r19
			player_2_move_buffer[i][1] = player_2_move_buffer[i+1][1];
     dd2:	11 96       	adiw	r26, 0x01	; 1
     dd4:	8c 91       	ld	r24, X
     dd6:	81 83       	std	Z+1, r24	; 0x01
		}
		player_1_move_buffer_index --;
		break;
		case PLAYER_2:
		// Remove player 2 position from top of buffer
		for (uint8_t i = 0; i < player_2_move_buffer_index; i++) {
     dd8:	2f 5f       	subi	r18, 0xFF	; 255
     dda:	01 c0       	rjmp	.+2      	; 0xdde <move_buffer_remove+0x74>
}


// Remove topmost element of move buffer
void move_buffer_remove(uint8_t player_num) {
	switch (player_num) {
     ddc:	20 e0       	ldi	r18, 0x00	; 0
		}
		player_1_move_buffer_index --;
		break;
		case PLAYER_2:
		// Remove player 2 position from top of buffer
		for (uint8_t i = 0; i < player_2_move_buffer_index; i++) {
     dde:	82 2f       	mov	r24, r18
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	30 91 6a 06 	lds	r19, 0x066A	; 0x80066a <player_2_move_buffer_index>
     de6:	43 2f       	mov	r20, r19
     de8:	03 2e       	mov	r0, r19
     dea:	00 0c       	add	r0, r0
     dec:	55 0b       	sbc	r21, r21
     dee:	84 17       	cp	r24, r20
     df0:	95 07       	cpc	r25, r21
     df2:	14 f3       	brlt	.-60     	; 0xdb8 <move_buffer_remove+0x4e>
			player_2_move_buffer[i][0] = player_2_move_buffer[i+1][0];
			player_2_move_buffer[i][1] = player_2_move_buffer[i+1][1];
		}
		player_2_move_buffer_index --;
     df4:	31 50       	subi	r19, 0x01	; 1
     df6:	30 93 6a 06 	sts	0x066A, r19	; 0x80066a <player_2_move_buffer_index>
     dfa:	08 95       	ret

00000dfc <get_move_anim_playing>:
	}
}

// Return 1 if move anim is playing
uint8_t get_move_anim_playing(uint8_t player_num) {
	switch (player_num) {
     dfc:	80 34       	cpi	r24, 0x40	; 64
     dfe:	19 f0       	breq	.+6      	; 0xe06 <get_move_anim_playing+0xa>
     e00:	80 35       	cpi	r24, 0x50	; 80
     e02:	41 f0       	breq	.+16     	; 0xe14 <get_move_anim_playing+0x18>
     e04:	0e c0       	rjmp	.+28     	; 0xe22 <get_move_anim_playing+0x26>
		case PLAYER_1:
			return (player_1_move_buffer_index > 1);
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <player_1_move_buffer_index>
     e0c:	92 30       	cpi	r25, 0x02	; 2
     e0e:	54 f4       	brge	.+20     	; 0xe24 <get_move_anim_playing+0x28>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	08 95       	ret
		case PLAYER_2:
			return (player_2_move_buffer_index > 1);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <player_2_move_buffer_index>
     e1a:	92 30       	cpi	r25, 0x02	; 2
     e1c:	1c f4       	brge	.+6      	; 0xe24 <get_move_anim_playing+0x28>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret
		default:
			return 0;
     e22:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     e24:	08 95       	ret

00000e26 <get_player_turns>:
}

// Return the current number of turns.
uint8_t get_player_turns(void) {
	return player_turns;
}
     e26:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <player_turns>
     e2a:	08 95       	ret

00000e2c <player_turns_inc>:

// Increment the current number of turns by num_turns.
void player_turns_inc(uint8_t num_turns) {
	player_turns += num_turns;
     e2c:	90 91 69 06 	lds	r25, 0x0669	; 0x800669 <player_turns>
     e30:	89 0f       	add	r24, r25
     e32:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <player_turns>
     e36:	08 95       	ret

00000e38 <collision_object_coords>:
	}
	return 0;
}

// Returns the object type hit and pointers to the coordinates (end_x, end_y) corresponding to the end of an object collision.
uint8_t collision_object_coords(uint8_t object, int8_t* end_x, int8_t* end_y) {
     e38:	7f 92       	push	r7
     e3a:	8f 92       	push	r8
     e3c:	9f 92       	push	r9
     e3e:	af 92       	push	r10
     e40:	bf 92       	push	r11
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	c8 2f       	mov	r28, r24
     e54:	7b 01       	movw	r14, r22
     e56:	6a 01       	movw	r12, r20
	uint8_t object_identifier = get_object_identifier(object);
     e58:	0e 94 82 06 	call	0xd04	; 0xd04 <get_object_identifier>
     e5c:	98 2e       	mov	r9, r24
	uint8_t object_type = get_object_type(object);
     e5e:	8c 2f       	mov	r24, r28
     e60:	0e 94 80 06 	call	0xd00	; 0xd00 <get_object_type>
     e64:	a8 2e       	mov	r10, r24
	
	if (object_type == SNAKE_START || object_type == LADDER_START) {
     e66:	80 e8       	ldi	r24, 0x80	; 128
     e68:	a8 16       	cp	r10, r24
     e6a:	61 f1       	breq	.+88     	; 0xec4 <collision_object_coords+0x8c>
     e6c:	e0 ec       	ldi	r30, 0xC0	; 192
     e6e:	ae 12       	cpse	r10, r30
     e70:	33 c0       	rjmp	.+102    	; 0xed8 <collision_object_coords+0xa0>
     e72:	2c c0       	rjmp	.+88     	; 0xecc <collision_object_coords+0x94>
		uint8_t loop_break_flag = 0;
		
		// Iterate over every board object and determine if it is the end of a given object.
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
				uint8_t board_object = get_object_at(x, y);
     e74:	6c 2f       	mov	r22, r28
     e76:	80 2f       	mov	r24, r16
     e78:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <get_object_at>
     e7c:	78 2e       	mov	r7, r24
				uint8_t board_object_identifier = get_object_identifier(board_object);
     e7e:	0e 94 82 06 	call	0xd04	; 0xd04 <get_object_identifier>
     e82:	b8 2e       	mov	r11, r24
				uint8_t board_object_type = get_object_type(board_object);
     e84:	87 2d       	mov	r24, r7
     e86:	0e 94 80 06 	call	0xd00	; 0xd00 <get_object_type>
				
				// Determine if object at (x,y) is the corresponding end element (i.e start_object_type + 0x10) for a given identifier.
				if((object_type + 0x10) == board_object_type && object_identifier == board_object_identifier) {
     e8a:	2a 2d       	mov	r18, r10
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	20 5f       	subi	r18, 0xF0	; 240
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	28 17       	cp	r18, r24
     e96:	39 07       	cpc	r19, r25
     e98:	49 f4       	brne	.+18     	; 0xeac <collision_object_coords+0x74>
     e9a:	9b 10       	cpse	r9, r11
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <collision_object_coords+0x74>
					*end_x = x;
     e9e:	f7 01       	movw	r30, r14
     ea0:	00 83       	st	Z, r16
					*end_y = y;
     ea2:	f6 01       	movw	r30, r12
     ea4:	c0 83       	st	Z, r28
					loop_break_flag = 1;
     ea6:	88 24       	eor	r8, r8
     ea8:	83 94       	inc	r8
					break;
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <collision_object_coords+0x82>

		uint8_t loop_break_flag = 0;
		
		// Iterate over every board object and determine if it is the end of a given object.
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
     eac:	21 96       	adiw	r28, 0x01	; 1
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <collision_object_coords+0x7c>
     eb0:	c0 e0       	ldi	r28, 0x00	; 0
     eb2:	d0 e0       	ldi	r29, 0x00	; 0
     eb4:	c0 31       	cpi	r28, 0x10	; 16
     eb6:	d1 05       	cpc	r29, r1
     eb8:	ec f2       	brlt	.-70     	; 0xe74 <collision_object_coords+0x3c>
					*end_y = y;
					loop_break_flag = 1;
					break;
				}
			}
			if (loop_break_flag) break;
     eba:	81 10       	cpse	r8, r1
     ebc:	0d c0       	rjmp	.+26     	; 0xed8 <collision_object_coords+0xa0>
	if (object_type == SNAKE_START || object_type == LADDER_START) {

		uint8_t loop_break_flag = 0;
		
		// Iterate over every board object and determine if it is the end of a given object.
		for (int x = 0; x < WIDTH; x++) {
     ebe:	0f 5f       	subi	r16, 0xFF	; 255
     ec0:	1f 4f       	sbci	r17, 0xFF	; 255
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <collision_object_coords+0x9a>
     ec4:	00 e0       	ldi	r16, 0x00	; 0
     ec6:	10 e0       	ldi	r17, 0x00	; 0
     ec8:	81 2c       	mov	r8, r1
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <collision_object_coords+0x9a>
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	10 e0       	ldi	r17, 0x00	; 0
     ed0:	81 2c       	mov	r8, r1
     ed2:	08 30       	cpi	r16, 0x08	; 8
     ed4:	11 05       	cpc	r17, r1
     ed6:	64 f3       	brlt	.-40     	; 0xeb0 <collision_object_coords+0x78>
			if (loop_break_flag) break;
		}
	}
	
	return object_type;
}
     ed8:	8a 2d       	mov	r24, r10
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	7f 90       	pop	r7
     ef4:	08 95       	ret

00000ef6 <get_player_n_position>:

// Get the coordinates for a given player
void get_player_n_position(uint8_t player_num, int8_t* player_x, int8_t* player_y) {
	switch (player_num) {
     ef6:	80 34       	cpi	r24, 0x40	; 64
     ef8:	19 f0       	breq	.+6      	; 0xf00 <get_player_n_position+0xa>
     efa:	80 35       	cpi	r24, 0x50	; 80
     efc:	51 f0       	breq	.+20     	; 0xf12 <get_player_n_position+0x1c>
     efe:	08 95       	ret
		case PLAYER_1:
			*player_x = player_1_x;
     f00:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <player_1_x>
     f04:	fb 01       	movw	r30, r22
     f06:	80 83       	st	Z, r24
			*player_y = player_1_y;
     f08:	80 91 9b 06 	lds	r24, 0x069B	; 0x80069b <player_1_y>
     f0c:	fa 01       	movw	r30, r20
     f0e:	80 83       	st	Z, r24
			break;
     f10:	08 95       	ret
		case PLAYER_2:
			*player_x = player_2_x;
     f12:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <player_2_x>
     f16:	fb 01       	movw	r30, r22
     f18:	80 83       	st	Z, r24
			*player_y = player_2_y;
     f1a:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <player_2_y>
     f1e:	fa 01       	movw	r30, r20
     f20:	80 83       	st	Z, r24
     f22:	08 95       	ret

00000f24 <set_player_visibility>:
	}
	player_visible = 1 - player_visible; //alternate between 0 and 1
}

// Set the visibility of the player icon.
void set_player_visibility(uint8_t visible, uint8_t player_num) {
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <set_player_visibility+0xa>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	08 2f       	mov	r16, r24
     f34:	16 2f       	mov	r17, r22
	if (get_move_anim_playing(player_num)) return;
     f36:	86 2f       	mov	r24, r22
     f38:	0e 94 fe 06 	call	0xdfc	; 0xdfc <get_move_anim_playing>
     f3c:	81 11       	cpse	r24, r1
     f3e:	1e c0       	rjmp	.+60     	; 0xf7c <set_player_visibility+0x58>
	
	int8_t player_x, player_y;
	
	get_player_n_position(player_num, &player_x, &player_y);
     f40:	ae 01       	movw	r20, r28
     f42:	4e 5f       	subi	r20, 0xFE	; 254
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	be 01       	movw	r22, r28
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	81 2f       	mov	r24, r17
     f4e:	0e 94 7b 07 	call	0xef6	; 0xef6 <get_player_n_position>
	
	player_visible = visible;
     f52:	00 93 9c 06 	sts	0x069C, r16	; 0x80069c <player_visible>
	
	if (player_visible) {
     f56:	00 23       	and	r16, r16
     f58:	31 f0       	breq	.+12     	; 0xf66 <set_player_visibility+0x42>
		update_square_colour(player_x, player_y, player_num);
     f5a:	41 2f       	mov	r20, r17
     f5c:	6a 81       	ldd	r22, Y+2	; 0x02
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
     f64:	0b c0       	rjmp	.+22     	; 0xf7c <set_player_visibility+0x58>
	} 
	else {
		uint8_t object_at_cursor = get_object_at(player_x, player_y);
     f66:	0a 81       	ldd	r16, Y+2	; 0x02
     f68:	19 81       	ldd	r17, Y+1	; 0x01
     f6a:	60 2f       	mov	r22, r16
     f6c:	81 2f       	mov	r24, r17
     f6e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <get_object_at>
		update_square_colour(player_x, player_y, object_at_cursor);
     f72:	48 2f       	mov	r20, r24
     f74:	60 2f       	mov	r22, r16
     f76:	81 2f       	mov	r24, r17
     f78:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
	}
}
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	08 95       	ret

00000f8a <set_player_n_position>:
	}
}

// Set the coordinates for a given player
void set_player_n_position(uint8_t player_num, int8_t player_x, int8_t player_y) {
	switch (player_num) {
     f8a:	80 34       	cpi	r24, 0x40	; 64
     f8c:	19 f0       	breq	.+6      	; 0xf94 <set_player_n_position+0xa>
     f8e:	80 35       	cpi	r24, 0x50	; 80
     f90:	31 f0       	breq	.+12     	; 0xf9e <set_player_n_position+0x14>
     f92:	08 95       	ret
		case PLAYER_1:
			player_1_x = player_x;
     f94:	60 93 68 06 	sts	0x0668, r22	; 0x800668 <player_1_x>
			player_1_y = player_y;
     f98:	40 93 9b 06 	sts	0x069B, r20	; 0x80069b <player_1_y>
			break;
     f9c:	08 95       	ret
		case PLAYER_2:
			player_2_x = player_x;
     f9e:	60 93 65 06 	sts	0x0665, r22	; 0x800665 <player_2_x>
			player_2_y = player_y;
     fa2:	40 93 cd 06 	sts	0x06CD, r20	; 0x8006cd <player_2_y>
     fa6:	08 95       	ret

00000fa8 <handle_player_num_change>:
	}
}

// Return the next player number
uint8_t handle_player_num_change(uint8_t player_num) {
	switch (player_num) {
     fa8:	80 34       	cpi	r24, 0x40	; 64
     faa:	19 f0       	breq	.+6      	; 0xfb2 <handle_player_num_change+0xa>
     fac:	80 35       	cpi	r24, 0x50	; 80
     fae:	19 f0       	breq	.+6      	; 0xfb6 <handle_player_num_change+0xe>
     fb0:	08 95       	ret
		case PLAYER_1:
			return PLAYER_2;
     fb2:	80 e5       	ldi	r24, 0x50	; 80
     fb4:	08 95       	ret
		case PLAYER_2:
			return PLAYER_1;
     fb6:	80 e4       	ldi	r24, 0x40	; 64
		default:
			return player_num;	
	}
}
     fb8:	08 95       	ret

00000fba <get_object_at_cursor>:
	}
}

// Get object or player at (x,y) coordinate
uint8_t get_object_at_cursor(int8_t player_x, int8_t player_y, uint8_t player_num) {
	if (((player_x == player_2_x && player_y == player_2_y && player_num != PLAYER_2) ||
     fba:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <player_2_x>
     fbe:	98 13       	cpse	r25, r24
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <get_object_at_cursor+0x14>
     fc2:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <player_2_y>
     fc6:	96 13       	cpse	r25, r22
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <get_object_at_cursor+0x14>
     fca:	40 35       	cpi	r20, 0x50	; 80
     fcc:	51 f4       	brne	.+20     	; 0xfe2 <get_object_at_cursor+0x28>
		(player_x == player_1_x && player_y == player_1_y && player_num != PLAYER_1)) &&
     fce:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <player_1_x>
	}
}

// Get object or player at (x,y) coordinate
uint8_t get_object_at_cursor(int8_t player_x, int8_t player_y, uint8_t player_num) {
	if (((player_x == player_2_x && player_y == player_2_y && player_num != PLAYER_2) ||
     fd2:	89 13       	cpse	r24, r25
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <get_object_at_cursor+0x38>
		(player_x == player_1_x && player_y == player_1_y && player_num != PLAYER_1)) &&
     fd6:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <player_1_y>
     fda:	69 13       	cpse	r22, r25
     fdc:	0a c0       	rjmp	.+20     	; 0xff2 <get_object_at_cursor+0x38>
     fde:	40 34       	cpi	r20, 0x40	; 64
     fe0:	41 f0       	breq	.+16     	; 0xff2 <get_object_at_cursor+0x38>
		!single_player_flag) {
     fe2:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <single_player_flag>
}

// Get object or player at (x,y) coordinate
uint8_t get_object_at_cursor(int8_t player_x, int8_t player_y, uint8_t player_num) {
	if (((player_x == player_2_x && player_y == player_2_y && player_num != PLAYER_2) ||
		(player_x == player_1_x && player_y == player_1_y && player_num != PLAYER_1)) &&
     fe6:	91 11       	cpse	r25, r1
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <get_object_at_cursor+0x38>
		!single_player_flag) {
		return handle_player_num_change(player_num);
     fea:	84 2f       	mov	r24, r20
     fec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <handle_player_num_change>
     ff0:	08 95       	ret
	}
	else {
		return get_object_at(player_x, player_y);
     ff2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <get_object_at>
	}
}
     ff6:	08 95       	ret

00000ff8 <move_buffer_add>:
		break;
	}
}

// Add new (x,y) coordinate to bottom of move buffer
void move_buffer_add(int8_t player_x, int8_t player_y, uint8_t player_num) {
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	00 d0       	rcall	.+0      	; 0x1008 <move_buffer_add+0x10>
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	d8 2e       	mov	r13, r24
    100e:	e6 2e       	mov	r14, r22
    1010:	14 2f       	mov	r17, r20
	int8_t temp_x, temp_y;
	
	if (player_2_move_buffer_index >= MOVE_BUFFER_SIZE - 1 ||
    1012:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <player_2_move_buffer_index>
    1016:	87 31       	cpi	r24, 0x17	; 23
    1018:	24 f4       	brge	.+8      	; 0x1022 <move_buffer_add+0x2a>
		player_1_move_buffer_index >= MOVE_BUFFER_SIZE - 1) {
    101a:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <player_1_move_buffer_index>

// Add new (x,y) coordinate to bottom of move buffer
void move_buffer_add(int8_t player_x, int8_t player_y, uint8_t player_num) {
	int8_t temp_x, temp_y;
	
	if (player_2_move_buffer_index >= MOVE_BUFFER_SIZE - 1 ||
    101e:	87 31       	cpi	r24, 0x17	; 23
    1020:	bc f0       	brlt	.+46     	; 0x1050 <move_buffer_add+0x58>
		player_1_move_buffer_index >= MOVE_BUFFER_SIZE - 1) {
		get_move_buffer(&temp_x, &temp_y, player_num);
    1022:	41 2f       	mov	r20, r17
    1024:	be 01       	movw	r22, r28
    1026:	6e 5f       	subi	r22, 0xFE	; 254
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <get_move_buffer>
		uint8_t object_at_cursor = get_object_at_cursor(temp_x, temp_y, player_num);
    1032:	fa 80       	ldd	r15, Y+2	; 0x02
    1034:	09 81       	ldd	r16, Y+1	; 0x01
    1036:	41 2f       	mov	r20, r17
    1038:	6f 2d       	mov	r22, r15
    103a:	80 2f       	mov	r24, r16
    103c:	0e 94 dd 07 	call	0xfba	; 0xfba <get_object_at_cursor>
		update_square_colour(temp_x, temp_y, object_at_cursor);
    1040:	48 2f       	mov	r20, r24
    1042:	6f 2d       	mov	r22, r15
    1044:	80 2f       	mov	r24, r16
    1046:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
		move_buffer_remove(player_num);
    104a:	81 2f       	mov	r24, r17
    104c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <move_buffer_remove>
	}
	
	switch (player_num) {
    1050:	10 34       	cpi	r17, 0x40	; 64
    1052:	19 f0       	breq	.+6      	; 0x105a <move_buffer_add+0x62>
    1054:	10 35       	cpi	r17, 0x50	; 80
    1056:	71 f0       	breq	.+28     	; 0x1074 <move_buffer_add+0x7c>
    1058:	19 c0       	rjmp	.+50     	; 0x108c <move_buffer_add+0x94>
		case PLAYER_1:
			// Add player 1 position to bottom of buffer
			player_1_move_buffer[player_1_move_buffer_index][0] = player_x;
    105a:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <player_1_move_buffer_index>
    105e:	e8 2f       	mov	r30, r24
    1060:	ee 0f       	add	r30, r30
    1062:	ff 0b       	sbc	r31, r31
    1064:	e3 56       	subi	r30, 0x63	; 99
    1066:	f9 4f       	sbci	r31, 0xF9	; 249
    1068:	d0 82       	st	Z, r13
			player_1_move_buffer[player_1_move_buffer_index][1] = player_y;
    106a:	e1 82       	std	Z+1, r14	; 0x01
			player_1_move_buffer_index++;
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <player_1_move_buffer_index>
			break;
    1072:	0c c0       	rjmp	.+24     	; 0x108c <move_buffer_add+0x94>
		case PLAYER_2:
			// Add player 2 position to bottom of buffer
			player_2_move_buffer[player_2_move_buffer_index][0] = player_x;
    1074:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <player_2_move_buffer_index>
    1078:	e8 2f       	mov	r30, r24
    107a:	ee 0f       	add	r30, r30
    107c:	ff 0b       	sbc	r31, r31
    107e:	e5 59       	subi	r30, 0x95	; 149
    1080:	f9 4f       	sbci	r31, 0xF9	; 249
    1082:	d0 82       	st	Z, r13
			player_2_move_buffer[player_2_move_buffer_index][1] = player_y;
    1084:	e1 82       	std	Z+1, r14	; 0x01
			player_2_move_buffer_index++;
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <player_2_move_buffer_index>
			break;
	}
}
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	08 95       	ret

000010a0 <move_player>:
	handle_player_collision(player_x, player_y, player_num);
}

// Move the player one space in the direction (dx, dy). The player should wrap
// around the display if moved 'off' the display. Returns 1 if player collided with snake or ladder
uint8_t move_player(int8_t dx, int8_t dy, uint8_t player_num, uint8_t sound_flag) {
    10a0:	af 92       	push	r10
    10a2:	bf 92       	push	r11
    10a4:	cf 92       	push	r12
    10a6:	df 92       	push	r13
    10a8:	ef 92       	push	r14
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <move_player+0x16>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <move_player+0x18>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	f8 2e       	mov	r15, r24
    10be:	b6 2e       	mov	r11, r22
    10c0:	a4 2e       	mov	r10, r20
    10c2:	e2 2e       	mov	r14, r18
	int8_t player_x, player_y;
	int8_t temp_dx = 0;
	int8_t temp_dy = 0;
	
	get_player_n_position(player_num, &player_x, &player_y);
    10c4:	ae 01       	movw	r20, r28
    10c6:	4e 5f       	subi	r20, 0xFE	; 254
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	be 01       	movw	r22, r28
    10cc:	6f 5f       	subi	r22, 0xFF	; 255
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	8a 2d       	mov	r24, r10
    10d2:	0e 94 7b 07 	call	0xef6	; 0xef6 <get_player_n_position>
	
	uint8_t object_at_cursor = get_object_at_cursor(player_x, player_y, player_num);
    10d6:	0a 81       	ldd	r16, Y+2	; 0x02
    10d8:	19 81       	ldd	r17, Y+1	; 0x01
    10da:	4a 2d       	mov	r20, r10
    10dc:	60 2f       	mov	r22, r16
    10de:	81 2f       	mov	r24, r17
    10e0:	0e 94 dd 07 	call	0xfba	; 0xfba <get_object_at_cursor>
	update_square_colour(player_x, player_y, object_at_cursor);
    10e4:	48 2f       	mov	r20, r24
    10e6:	60 2f       	mov	r22, r16
    10e8:	81 2f       	mov	r24, r17
    10ea:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
	
	// Player has move delta more than 1 position
	if (abs(dx) > 1 || abs(dy) > 1) {
    10ee:	cf 2c       	mov	r12, r15
    10f0:	0f 2c       	mov	r0, r15
    10f2:	00 0c       	add	r0, r0
    10f4:	dd 08       	sbc	r13, r13
    10f6:	dd 20       	and	r13, r13
    10f8:	1c f4       	brge	.+6      	; 0x1100 <move_player+0x60>
    10fa:	d1 94       	neg	r13
    10fc:	c1 94       	neg	r12
    10fe:	d1 08       	sbc	r13, r1
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	c8 16       	cp	r12, r24
    1104:	d1 04       	cpc	r13, r1
    1106:	64 f4       	brge	.+24     	; 0x1120 <move_player+0x80>
    1108:	8b 2d       	mov	r24, r11
    110a:	0b 2c       	mov	r0, r11
    110c:	00 0c       	add	r0, r0
    110e:	99 0b       	sbc	r25, r25
    1110:	99 23       	and	r25, r25
    1112:	1c f4       	brge	.+6      	; 0x111a <move_player+0x7a>
    1114:	91 95       	neg	r25
    1116:	81 95       	neg	r24
    1118:	91 09       	sbc	r25, r1
    111a:	02 97       	sbiw	r24, 0x02	; 2
    111c:	0c f4       	brge	.+2      	; 0x1120 <move_player+0x80>
    111e:	49 c0       	rjmp	.+146    	; 0x11b2 <move_player+0x112>
		move_buffer_add(player_x, player_y, player_num);
    1120:	4a 2d       	mov	r20, r10
    1122:	6a 81       	ldd	r22, Y+2	; 0x02
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	0e 94 fc 07 	call	0xff8	; 0xff8 <move_buffer_add>
// Move the player one space in the direction (dx, dy). The player should wrap
// around the display if moved 'off' the display. Returns 1 if player collided with snake or ladder
uint8_t move_player(int8_t dx, int8_t dy, uint8_t player_num, uint8_t sound_flag) {
	int8_t player_x, player_y;
	int8_t temp_dx = 0;
	int8_t temp_dy = 0;
    112a:	00 e0       	ldi	r16, 0x00	; 0

// Move the player one space in the direction (dx, dy). The player should wrap
// around the display if moved 'off' the display. Returns 1 if player collided with snake or ladder
uint8_t move_player(int8_t dx, int8_t dy, uint8_t player_num, uint8_t sound_flag) {
	int8_t player_x, player_y;
	int8_t temp_dx = 0;
    112c:	10 e0       	ldi	r17, 0x00	; 0
	
	// Player has move delta more than 1 position
	if (abs(dx) > 1 || abs(dy) > 1) {
		move_buffer_add(player_x, player_y, player_num);
		while(1) {
			if(abs(temp_dx) >= abs(dx) && abs(temp_dy) >= abs(dy)) break;
    112e:	81 2f       	mov	r24, r17
    1130:	01 2e       	mov	r0, r17
    1132:	00 0c       	add	r0, r0
    1134:	99 0b       	sbc	r25, r25
    1136:	99 23       	and	r25, r25
    1138:	1c f4       	brge	.+6      	; 0x1140 <move_player+0xa0>
    113a:	91 95       	neg	r25
    113c:	81 95       	neg	r24
    113e:	91 09       	sbc	r25, r1
    1140:	8c 15       	cp	r24, r12
    1142:	9d 05       	cpc	r25, r13
    1144:	ac f0       	brlt	.+42     	; 0x1170 <move_player+0xd0>
    1146:	80 2f       	mov	r24, r16
    1148:	00 2e       	mov	r0, r16
    114a:	00 0c       	add	r0, r0
    114c:	99 0b       	sbc	r25, r25
    114e:	99 23       	and	r25, r25
    1150:	1c f4       	brge	.+6      	; 0x1158 <move_player+0xb8>
    1152:	91 95       	neg	r25
    1154:	81 95       	neg	r24
    1156:	91 09       	sbc	r25, r1
    1158:	2b 2d       	mov	r18, r11
    115a:	0b 2c       	mov	r0, r11
    115c:	00 0c       	add	r0, r0
    115e:	33 0b       	sbc	r19, r19
    1160:	33 23       	and	r19, r19
    1162:	1c f4       	brge	.+6      	; 0x116a <move_player+0xca>
    1164:	31 95       	neg	r19
    1166:	21 95       	neg	r18
    1168:	31 09       	sbc	r19, r1
    116a:	82 17       	cp	r24, r18
    116c:	93 07       	cpc	r25, r19
    116e:	0c f5       	brge	.+66     	; 0x11b2 <move_player+0x112>
			
			if(dx > temp_dx) temp_dx++;
    1170:	1f 15       	cp	r17, r15
    1172:	14 f4       	brge	.+4      	; 0x1178 <move_player+0xd8>
    1174:	1f 5f       	subi	r17, 0xFF	; 255
    1176:	03 c0       	rjmp	.+6      	; 0x117e <move_player+0xde>
			else if (dx < temp_dx) temp_dx--;
    1178:	f1 16       	cp	r15, r17
    117a:	0c f4       	brge	.+2      	; 0x117e <move_player+0xde>
    117c:	11 50       	subi	r17, 0x01	; 1
			
			if(dy > temp_dy) temp_dy++;
    117e:	0b 15       	cp	r16, r11
    1180:	14 f4       	brge	.+4      	; 0x1186 <move_player+0xe6>
    1182:	0f 5f       	subi	r16, 0xFF	; 255
    1184:	03 c0       	rjmp	.+6      	; 0x118c <move_player+0xec>
			else if (dy < temp_dy) temp_dy--;
    1186:	b0 16       	cp	r11, r16
    1188:	0c f4       	brge	.+2      	; 0x118c <move_player+0xec>
    118a:	01 50       	subi	r16, 0x01	; 1
			
			int8_t temp_x, temp_y;
			temp_x = player_x + temp_dx;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	81 0f       	add	r24, r17
    1190:	8c 83       	std	Y+4, r24	; 0x04
			temp_y = player_y + temp_dy;
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 0f       	add	r24, r16
    1196:	8b 83       	std	Y+3, r24	; 0x03
			
			move_player_constrain(&temp_x, &temp_y);
    1198:	be 01       	movw	r22, r28
    119a:	6d 5f       	subi	r22, 0xFD	; 253
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	ce 01       	movw	r24, r28
    11a0:	04 96       	adiw	r24, 0x04	; 4
    11a2:	0e 94 84 06 	call	0xd08	; 0xd08 <move_player_constrain>
			
			move_buffer_add(temp_x, temp_y, player_num);
    11a6:	4a 2d       	mov	r20, r10
    11a8:	6b 81       	ldd	r22, Y+3	; 0x03
    11aa:	8c 81       	ldd	r24, Y+4	; 0x04
    11ac:	0e 94 fc 07 	call	0xff8	; 0xff8 <move_buffer_add>
		}
    11b0:	be cf       	rjmp	.-132    	; 0x112e <move_player+0x8e>
	}

	player_x += dx;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	f8 0e       	add	r15, r24
    11b6:	f9 82       	std	Y+1, r15	; 0x01
	player_y += dy;
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	8b 0d       	add	r24, r11
    11bc:	8a 83       	std	Y+2, r24	; 0x02
	
	move_player_constrain(&player_x, &player_y);
    11be:	be 01       	movw	r22, r28
    11c0:	6e 5f       	subi	r22, 0xFE	; 254
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	ce 01       	movw	r24, r28
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	0e 94 84 06 	call	0xd08	; 0xd08 <move_player_constrain>
	
	if(sound_flag) play_sound(move_sound);
    11cc:	ee 20       	and	r14, r14
    11ce:	c1 f0       	breq	.+48     	; 0x1200 <move_player+0x160>
    11d0:	e0 90 fd 04 	lds	r14, 0x04FD	; 0x8004fd <move_sound>
    11d4:	f0 90 fe 04 	lds	r15, 0x04FE	; 0x8004fe <move_sound+0x1>
    11d8:	00 91 ff 04 	lds	r16, 0x04FF	; 0x8004ff <move_sound+0x2>
    11dc:	10 91 00 05 	lds	r17, 0x0500	; 0x800500 <move_sound+0x3>
    11e0:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <move_sound+0x4>
    11e4:	30 91 02 05 	lds	r19, 0x0502	; 0x800502 <move_sound+0x5>
    11e8:	40 91 03 05 	lds	r20, 0x0503	; 0x800503 <move_sound+0x6>
    11ec:	50 91 04 05 	lds	r21, 0x0504	; 0x800504 <move_sound+0x7>
    11f0:	60 91 05 05 	lds	r22, 0x0505	; 0x800505 <move_sound+0x8>
    11f4:	70 91 06 05 	lds	r23, 0x0506	; 0x800506 <move_sound+0x9>
    11f8:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <move_sound+0xa>
    11fc:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
	
	set_player_n_position(player_num, player_x, player_y);
    1200:	4a 81       	ldd	r20, Y+2	; 0x02
    1202:	69 81       	ldd	r22, Y+1	; 0x01
    1204:	8a 2d       	mov	r24, r10
    1206:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_player_n_position>
	
	// Instantly move player if move delta is 1
	if (abs(dx) == 1 || abs(dy) == 1) {
    120a:	ca 94       	dec	r12
    120c:	cd 28       	or	r12, r13
    120e:	51 f0       	breq	.+20     	; 0x1224 <move_player+0x184>
    1210:	8b 2d       	mov	r24, r11
    1212:	bb 0c       	add	r11, r11
    1214:	99 0b       	sbc	r25, r25
    1216:	99 23       	and	r25, r25
    1218:	1c f4       	brge	.+6      	; 0x1220 <move_player+0x180>
    121a:	91 95       	neg	r25
    121c:	81 95       	neg	r24
    121e:	91 09       	sbc	r25, r1
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	29 f4       	brne	.+10     	; 0x122e <move_player+0x18e>
		update_square_colour(player_x, player_y, player_num);
    1224:	4a 2d       	mov	r20, r10
    1226:	6a 81       	ldd	r22, Y+2	; 0x02
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
	}

	set_move_anim();
    122e:	0e 94 02 02 	call	0x404	; 0x404 <set_move_anim>
	
	return handle_player_collision(player_x, player_y, player_num);
    1232:	4a 2d       	mov	r20, r10
    1234:	6a 81       	ldd	r22, Y+2	; 0x02
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	0e 94 2d 09 	call	0x125a	; 0x125a <handle_player_collision>
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	08 95       	ret

0000125a <handle_player_collision>:
void player_turns_inc(uint8_t num_turns) {
	player_turns += num_turns;
}

// Handles object collisions when player is moved. Returns 1 is object collides with snake or ladder
uint8_t handle_player_collision(int8_t player_x, int8_t player_y, uint8_t player_num) {
    125a:	bf 92       	push	r11
    125c:	cf 92       	push	r12
    125e:	df 92       	push	r13
    1260:	ef 92       	push	r14
    1262:	ff 92       	push	r15
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	00 d0       	rcall	.+0      	; 0x126e <handle_player_collision+0x14>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	c8 2e       	mov	r12, r24
    1274:	d6 2e       	mov	r13, r22
    1276:	b4 2e       	mov	r11, r20
	uint8_t object_at_cursor =	get_object_at(player_x, player_y);
    1278:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <get_object_at>
	int8_t x, y, dx, dy;
	
	x = player_x;
    127c:	c9 82       	std	Y+1, r12	; 0x01
	y = player_y;
    127e:	da 82       	std	Y+2, r13	; 0x02
	
	// Pass pointer to x and y to function so they can be set externally
	uint8_t object_type = collision_object_coords(object_at_cursor, &x, &y);
    1280:	ae 01       	movw	r20, r28
    1282:	4e 5f       	subi	r20, 0xFE	; 254
    1284:	5f 4f       	sbci	r21, 0xFF	; 255
    1286:	be 01       	movw	r22, r28
    1288:	6f 5f       	subi	r22, 0xFF	; 255
    128a:	7f 4f       	sbci	r23, 0xFF	; 255
    128c:	0e 94 1c 07 	call	0xe38	; 0xe38 <collision_object_coords>
	
	// Play respective sounds if collision is with snake or ladder start
	switch (object_type) {
    1290:	80 38       	cpi	r24, 0x80	; 128
    1292:	19 f0       	breq	.+6      	; 0x129a <handle_player_collision+0x40>
    1294:	80 3c       	cpi	r24, 0xC0	; 192
    1296:	d1 f0       	breq	.+52     	; 0x12cc <handle_player_collision+0x72>
    1298:	1e c0       	rjmp	.+60     	; 0x12d6 <handle_player_collision+0x7c>
		case SNAKE_START:
			play_sound(snake_sound);
    129a:	e0 90 f2 04 	lds	r14, 0x04F2	; 0x8004f2 <snake_sound>
    129e:	f0 90 f3 04 	lds	r15, 0x04F3	; 0x8004f3 <snake_sound+0x1>
    12a2:	00 91 f4 04 	lds	r16, 0x04F4	; 0x8004f4 <snake_sound+0x2>
    12a6:	10 91 f5 04 	lds	r17, 0x04F5	; 0x8004f5 <snake_sound+0x3>
    12aa:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <snake_sound+0x4>
    12ae:	30 91 f7 04 	lds	r19, 0x04F7	; 0x8004f7 <snake_sound+0x5>
    12b2:	40 91 f8 04 	lds	r20, 0x04F8	; 0x8004f8 <snake_sound+0x6>
    12b6:	50 91 f9 04 	lds	r21, 0x04F9	; 0x8004f9 <snake_sound+0x7>
    12ba:	60 91 fa 04 	lds	r22, 0x04FA	; 0x8004fa <snake_sound+0x8>
    12be:	70 91 fb 04 	lds	r23, 0x04FB	; 0x8004fb <snake_sound+0x9>
    12c2:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <snake_sound+0xa>
    12c6:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
			break;
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <handle_player_collision+0x7c>
		case LADDER_START:
			play_melody(ladder_sound, 3);
    12cc:	63 e0       	ldi	r22, 0x03	; 3
    12ce:	80 e4       	ldi	r24, 0x40	; 64
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 99 03 	call	0x732	; 0x732 <play_melody>
			break;
	}
	
	dx = x - player_x;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	8c 19       	sub	r24, r12
	dy = y - player_y;
    12da:	6a 81       	ldd	r22, Y+2	; 0x02
    12dc:	6d 19       	sub	r22, r13
	
	if (dx != 0 || dy != 0) {
    12de:	81 11       	cpse	r24, r1
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <handle_player_collision+0x8a>
    12e2:	31 f0       	breq	.+12     	; 0x12f0 <handle_player_collision+0x96>
		move_player(dx, dy, player_num, 0);
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	4b 2d       	mov	r20, r11
    12e8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_player>
		return 1;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <handle_player_collision+0x98>
	}
	return 0;
    12f0:	80 e0       	ldi	r24, 0x00	; 0
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	bf 90       	pop	r11
    1308:	08 95       	ret

0000130a <move_player_n>:
uint8_t get_object_identifier(uint8_t object) {
	return object & 0x0F;
}

// Move the player by the given number of spaces forward.
void move_player_n(uint8_t num_spaces, uint8_t player_num) {
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	00 d0       	rcall	.+0      	; 0x131a <move_player_n+0x10>
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	f8 2e       	mov	r15, r24
    1320:	d6 2e       	mov	r13, r22
	// Create temporary x, y coord that is set depending on player number.
	int8_t player_x, player_y;
	get_player_n_position(player_num, &player_x, &player_y);
    1322:	ae 01       	movw	r20, r28
    1324:	4e 5f       	subi	r20, 0xFE	; 254
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	be 01       	movw	r22, r28
    132a:	6f 5f       	subi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	8d 2d       	mov	r24, r13
    1330:	0e 94 7b 07 	call	0xef6	; 0xef6 <get_player_n_position>
	
	move_buffer_add(player_x, player_y, player_num);
    1334:	4d 2d       	mov	r20, r13
    1336:	6a 81       	ldd	r22, Y+2	; 0x02
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	0e 94 fc 07 	call	0xff8	; 0xff8 <move_buffer_add>
	
	//uint8_t object_at_cursor = get_object_at_cursor(player_x, player_y, player_num);
	//update_square_colour(player_x, player_y, object_at_cursor);
	
	for(int moves = 0; moves < num_spaces; moves++) {
    133e:	00 e0       	ldi	r16, 0x00	; 0
    1340:	10 e0       	ldi	r17, 0x00	; 0
    1342:	2d c0       	rjmp	.+90     	; 0x139e <move_player_n+0x94>
		// Player is on odd row move left.
		if (player_y % 2) {
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	80 ff       	sbrs	r24, 0
    1348:	0e c0       	rjmp	.+28     	; 0x1366 <move_player_n+0x5c>
			if (player_x - 1 >= 0) player_x--;
    134a:	99 81       	ldd	r25, Y+1	; 0x01
    134c:	29 2f       	mov	r18, r25
    134e:	09 2e       	mov	r0, r25
    1350:	00 0c       	add	r0, r0
    1352:	33 0b       	sbc	r19, r19
    1354:	21 50       	subi	r18, 0x01	; 1
    1356:	31 09       	sbc	r19, r1
    1358:	1a f0       	brmi	.+6      	; 0x1360 <move_player_n+0x56>
    135a:	91 50       	subi	r25, 0x01	; 1
    135c:	99 83       	std	Y+1, r25	; 0x01
    135e:	12 c0       	rjmp	.+36     	; 0x1384 <move_player_n+0x7a>
			else player_y++;
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	8a 83       	std	Y+2, r24	; 0x02
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <move_player_n+0x7a>
		}
		// Player is on even row move right.
		else {
			if (player_x + 1 < WIDTH) player_x++;
    1366:	99 81       	ldd	r25, Y+1	; 0x01
    1368:	29 2f       	mov	r18, r25
    136a:	09 2e       	mov	r0, r25
    136c:	00 0c       	add	r0, r0
    136e:	33 0b       	sbc	r19, r19
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	28 30       	cpi	r18, 0x08	; 8
    1376:	31 05       	cpc	r19, r1
    1378:	1c f4       	brge	.+6      	; 0x1380 <move_player_n+0x76>
    137a:	9f 5f       	subi	r25, 0xFF	; 255
    137c:	99 83       	std	Y+1, r25	; 0x01
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <move_player_n+0x7a>
			else player_y++;
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	8a 83       	std	Y+2, r24	; 0x02
		}
		
		if (player_y >= HEIGHT) {
    1384:	6a 81       	ldd	r22, Y+2	; 0x02
    1386:	60 31       	cpi	r22, 0x10	; 16
    1388:	24 f0       	brlt	.+8      	; 0x1392 <move_player_n+0x88>
			player_y = HEIGHT - 1; //Move player to top row
    138a:	8f e0       	ldi	r24, 0x0F	; 15
    138c:	8a 83       	std	Y+2, r24	; 0x02
			player_x = (WIDTH - 1) * !((HEIGHT - 1) % 2); //Move player to top corner depending on odd/even row.
    138e:	19 82       	std	Y+1, r1	; 0x01
			break;
    1390:	0b c0       	rjmp	.+22     	; 0x13a8 <move_player_n+0x9e>
		}
		
		move_buffer_add(player_x, player_y, player_num);
    1392:	4d 2d       	mov	r20, r13
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	0e 94 fc 07 	call	0xff8	; 0xff8 <move_buffer_add>
	move_buffer_add(player_x, player_y, player_num);
	
	//uint8_t object_at_cursor = get_object_at_cursor(player_x, player_y, player_num);
	//update_square_colour(player_x, player_y, object_at_cursor);
	
	for(int moves = 0; moves < num_spaces; moves++) {
    139a:	0f 5f       	subi	r16, 0xFF	; 255
    139c:	1f 4f       	sbci	r17, 0xFF	; 255
    139e:	8f 2d       	mov	r24, r15
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	08 17       	cp	r16, r24
    13a4:	19 07       	cpc	r17, r25
    13a6:	74 f2       	brlt	.-100    	; 0x1344 <move_player_n+0x3a>
		
		move_buffer_add(player_x, player_y, player_num);
	}
	
	// Player is outside bounds, move to correct top corner.
	if (player_y < HEIGHT) player_turns_inc(1);
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	80 31       	cpi	r24, 0x10	; 16
    13ac:	1c f4       	brge	.+6      	; 0x13b4 <move_player_n+0xaa>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	0e 94 16 07 	call	0xe2c	; 0xe2c <player_turns_inc>
	
	play_sound(move_sound);
    13b4:	e0 90 fd 04 	lds	r14, 0x04FD	; 0x8004fd <move_sound>
    13b8:	f0 90 fe 04 	lds	r15, 0x04FE	; 0x8004fe <move_sound+0x1>
    13bc:	00 91 ff 04 	lds	r16, 0x04FF	; 0x8004ff <move_sound+0x2>
    13c0:	10 91 00 05 	lds	r17, 0x0500	; 0x800500 <move_sound+0x3>
    13c4:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <move_sound+0x4>
    13c8:	30 91 02 05 	lds	r19, 0x0502	; 0x800502 <move_sound+0x5>
    13cc:	40 91 03 05 	lds	r20, 0x0503	; 0x800503 <move_sound+0x6>
    13d0:	50 91 04 05 	lds	r21, 0x0504	; 0x800504 <move_sound+0x7>
    13d4:	60 91 05 05 	lds	r22, 0x0505	; 0x800505 <move_sound+0x8>
    13d8:	70 91 06 05 	lds	r23, 0x0506	; 0x800506 <move_sound+0x9>
    13dc:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <move_sound+0xa>
    13e0:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
	set_player_n_position(player_num, player_x, player_y);
    13e4:	4a 81       	ldd	r20, Y+2	; 0x02
    13e6:	69 81       	ldd	r22, Y+1	; 0x01
    13e8:	8d 2d       	mov	r24, r13
    13ea:	0e 94 c5 07 	call	0xf8a	; 0xf8a <set_player_n_position>
	
	set_move_anim();
    13ee:	0e 94 02 02 	call	0x404	; 0x404 <set_move_anim>
	
	handle_player_collision(player_x, player_y, player_num);
    13f2:	4d 2d       	mov	r20, r13
    13f4:	6a 81       	ldd	r22, Y+2	; 0x02
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	0e 94 2d 09 	call	0x125a	; 0x125a <handle_player_collision>
}
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	08 95       	ret

00001410 <move_anim>:
		break;
	}
}

// Animate the movement of players
void move_anim(void) {
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 d0       	rcall	.+0      	; 0x141a <move_anim+0xa>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
	int8_t pixel_x, pixel_y;
	
	if(player_1_move_buffer_index > 0) {
    141e:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <player_1_move_buffer_index>
    1422:	18 16       	cp	r1, r24
    1424:	dc f4       	brge	.+54     	; 0x145c <move_anim+0x4c>
		get_move_buffer(&pixel_x, &pixel_y, PLAYER_1);
    1426:	40 e4       	ldi	r20, 0x40	; 64
    1428:	be 01       	movw	r22, r28
    142a:	6e 5f       	subi	r22, 0xFE	; 254
    142c:	7f 4f       	sbci	r23, 0xFF	; 255
    142e:	ce 01       	movw	r24, r28
    1430:	01 96       	adiw	r24, 0x01	; 1
    1432:	0e 94 9e 06 	call	0xd3c	; 0xd3c <get_move_buffer>

		// Set previous position to default board object
		uint8_t object_at_cursor = get_object_at_cursor(pixel_x, pixel_y, PLAYER_1);
    1436:	0a 81       	ldd	r16, Y+2	; 0x02
    1438:	19 81       	ldd	r17, Y+1	; 0x01
    143a:	40 e4       	ldi	r20, 0x40	; 64
    143c:	60 2f       	mov	r22, r16
    143e:	81 2f       	mov	r24, r17
    1440:	0e 94 dd 07 	call	0xfba	; 0xfba <get_object_at_cursor>
		update_square_colour(pixel_x, pixel_y, object_at_cursor);
    1444:	48 2f       	mov	r20, r24
    1446:	60 2f       	mov	r22, r16
    1448:	81 2f       	mov	r24, r17
    144a:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
			
		move_buffer_remove(PLAYER_1);
    144e:	80 e4       	ldi	r24, 0x40	; 64
    1450:	0e 94 b5 06 	call	0xd6a	; 0xd6a <move_buffer_remove>
		set_player_visibility(1, PLAYER_1);
    1454:	60 e4       	ldi	r22, 0x40	; 64
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	0e 94 92 07 	call	0xf24	; 0xf24 <set_player_visibility>
	}
	
	if(player_2_move_buffer_index > 0) {
    145c:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <player_2_move_buffer_index>
    1460:	18 16       	cp	r1, r24
    1462:	dc f4       	brge	.+54     	; 0x149a <move_anim+0x8a>
		get_move_buffer(&pixel_x, &pixel_y, PLAYER_2);
    1464:	40 e5       	ldi	r20, 0x50	; 80
    1466:	be 01       	movw	r22, r28
    1468:	6e 5f       	subi	r22, 0xFE	; 254
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	ce 01       	movw	r24, r28
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	0e 94 9e 06 	call	0xd3c	; 0xd3c <get_move_buffer>
		
		// Set previous position to default board object
		uint8_t object_at_cursor = get_object_at_cursor(pixel_x, pixel_y, PLAYER_2);
    1474:	0a 81       	ldd	r16, Y+2	; 0x02
    1476:	19 81       	ldd	r17, Y+1	; 0x01
    1478:	40 e5       	ldi	r20, 0x50	; 80
    147a:	60 2f       	mov	r22, r16
    147c:	81 2f       	mov	r24, r17
    147e:	0e 94 dd 07 	call	0xfba	; 0xfba <get_object_at_cursor>
		update_square_colour(pixel_x, pixel_y, object_at_cursor);
    1482:	48 2f       	mov	r20, r24
    1484:	60 2f       	mov	r22, r16
    1486:	81 2f       	mov	r24, r17
    1488:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
		
		move_buffer_remove(PLAYER_2);
    148c:	80 e5       	ldi	r24, 0x50	; 80
    148e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <move_buffer_remove>
		set_player_visibility(1, PLAYER_2);	
    1492:	60 e5       	ldi	r22, 0x50	; 80
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	0e 94 92 07 	call	0xf24	; 0xf24 <set_player_visibility>
	}
	
	if(player_1_move_buffer_index > 1) {
    149a:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <player_1_move_buffer_index>
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	6c f0       	brlt	.+26     	; 0x14bc <move_anim+0xac>
		// Set current position to player 
		get_move_buffer(&pixel_x, &pixel_y, PLAYER_1);
    14a2:	40 e4       	ldi	r20, 0x40	; 64
    14a4:	be 01       	movw	r22, r28
    14a6:	6e 5f       	subi	r22, 0xFE	; 254
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	0e 94 9e 06 	call	0xd3c	; 0xd3c <get_move_buffer>
		update_square_colour(pixel_x, pixel_y, PLAYER_1);
    14b2:	40 e4       	ldi	r20, 0x40	; 64
    14b4:	6a 81       	ldd	r22, Y+2	; 0x02
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
	} 
	
	if(player_2_move_buffer_index > 1) {	
    14bc:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <player_2_move_buffer_index>
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	6c f0       	brlt	.+26     	; 0x14de <move_anim+0xce>
		// Set current position to player
		get_move_buffer(&pixel_x, &pixel_y, PLAYER_2);	
    14c4:	40 e5       	ldi	r20, 0x50	; 80
    14c6:	be 01       	movw	r22, r28
    14c8:	6e 5f       	subi	r22, 0xFE	; 254
    14ca:	7f 4f       	sbci	r23, 0xFF	; 255
    14cc:	ce 01       	movw	r24, r28
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <get_move_buffer>
		update_square_colour(pixel_x, pixel_y, PLAYER_2);
    14d4:	40 e5       	ldi	r20, 0x50	; 80
    14d6:	6a 81       	ldd	r22, Y+2	; 0x02
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
	}
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <flash_player_cursor>:
}

// Flash the selected player icon on and off. This should be called at a regular
// interval (see where this is called in project.c) to create a consistent
// 500 ms flash.
void flash_player_cursor(uint8_t player_num) {
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <flash_player_cursor+0xc>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	18 2f       	mov	r17, r24
	if (get_move_anim_playing(player_num)) return;
    14fe:	0e 94 fe 06 	call	0xdfc	; 0xdfc <get_move_anim_playing>
    1502:	81 11       	cpse	r24, r1
    1504:	25 c0       	rjmp	.+74     	; 0x1550 <flash_player_cursor+0x64>
		
	int8_t player_x, player_y;

	get_player_n_position(player_num, &player_x, &player_y);
    1506:	ae 01       	movw	r20, r28
    1508:	4e 5f       	subi	r20, 0xFE	; 254
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	be 01       	movw	r22, r28
    150e:	6f 5f       	subi	r22, 0xFF	; 255
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	81 2f       	mov	r24, r17
    1514:	0e 94 7b 07 	call	0xef6	; 0xef6 <get_player_n_position>
	
	if (player_visible) {
    1518:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <player_visible>
    151c:	88 23       	and	r24, r24
    151e:	69 f0       	breq	.+26     	; 0x153a <flash_player_cursor+0x4e>
		// we need to flash the player off, it should be replaced by
		// the colour of the object which is at that location
		uint8_t object_at_cursor = get_object_at_cursor(player_x, player_y, player_num);
    1520:	fa 80       	ldd	r15, Y+2	; 0x02
    1522:	09 81       	ldd	r16, Y+1	; 0x01
    1524:	41 2f       	mov	r20, r17
    1526:	6f 2d       	mov	r22, r15
    1528:	80 2f       	mov	r24, r16
    152a:	0e 94 dd 07 	call	0xfba	; 0xfba <get_object_at_cursor>
		
		update_square_colour(player_x, player_y, object_at_cursor);
    152e:	48 2f       	mov	r20, r24
    1530:	6f 2d       	mov	r22, r15
    1532:	80 2f       	mov	r24, r16
    1534:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
    1538:	05 c0       	rjmp	.+10     	; 0x1544 <flash_player_cursor+0x58>
		
	} else {
		// we need to flash the player on
		update_square_colour(player_x, player_y, player_num);
    153a:	41 2f       	mov	r20, r17
    153c:	6a 81       	ldd	r22, Y+2	; 0x02
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
	}
	player_visible = 1 - player_visible; //alternate between 0 and 1
    1544:	90 91 9c 06 	lds	r25, 0x069C	; 0x80069c <player_visible>
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	89 1b       	sub	r24, r25
    154c:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <player_visible>
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	08 95       	ret

00001560 <handle_game_board_num_change>:
			return player_num;	
	}
}

// Change gameboards
uint8_t handle_game_board_num_change() {
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
	switch (game_board_number) {
    1568:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <game_board_number>
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	19 f0       	breq	.+6      	; 0x1576 <handle_game_board_num_change+0x16>
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	29 f0       	breq	.+10     	; 0x157e <handle_game_board_num_change+0x1e>
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <handle_game_board_num_change+0x24>
		case  GAMEBOARD_1:
			game_board_number = GAMEBOARD_2;
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <game_board_number>
			break;
    157c:	03 c0       	rjmp	.+6      	; 0x1584 <handle_game_board_num_change+0x24>
		case GAMEBOARD_2:
			game_board_number = GAMEBOARD_1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <game_board_number>
			break;
	}
	
	play_sound(button_sound);
    1584:	e0 90 08 05 	lds	r14, 0x0508	; 0x800508 <button_sound>
    1588:	f0 90 09 05 	lds	r15, 0x0509	; 0x800509 <button_sound+0x1>
    158c:	00 91 0a 05 	lds	r16, 0x050A	; 0x80050a <button_sound+0x2>
    1590:	10 91 0b 05 	lds	r17, 0x050B	; 0x80050b <button_sound+0x3>
    1594:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <button_sound+0x4>
    1598:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <button_sound+0x5>
    159c:	40 91 0e 05 	lds	r20, 0x050E	; 0x80050e <button_sound+0x6>
    15a0:	50 91 0f 05 	lds	r21, 0x050F	; 0x80050f <button_sound+0x7>
    15a4:	60 91 10 05 	lds	r22, 0x0510	; 0x800510 <button_sound+0x8>
    15a8:	70 91 11 05 	lds	r23, 0x0511	; 0x800511 <button_sound+0x9>
    15ac:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <button_sound+0xa>
    15b0:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
	return game_board_number;
}
    15b4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <game_board_number>
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	08 95       	ret

000015c2 <set_game_difficulty>:

void set_game_difficulty(uint8_t game_difficulty_num) {
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
	player_1_time = 0;
    15ca:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <player_1_time+0x1>
    15ce:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <player_1_time>
	player_2_time = 0;
    15d2:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <player_2_time+0x1>
    15d6:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <player_2_time>
	game_time_limit = game_difficulty_num;
    15da:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <game_time_limit>
	play_sound(button_sound);
    15de:	e0 90 08 05 	lds	r14, 0x0508	; 0x800508 <button_sound>
    15e2:	f0 90 09 05 	lds	r15, 0x0509	; 0x800509 <button_sound+0x1>
    15e6:	00 91 0a 05 	lds	r16, 0x050A	; 0x80050a <button_sound+0x2>
    15ea:	10 91 0b 05 	lds	r17, 0x050B	; 0x80050b <button_sound+0x3>
    15ee:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <button_sound+0x4>
    15f2:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <button_sound+0x5>
    15f6:	40 91 0e 05 	lds	r20, 0x050E	; 0x80050e <button_sound+0x6>
    15fa:	50 91 0f 05 	lds	r21, 0x050F	; 0x80050f <button_sound+0x7>
    15fe:	60 91 10 05 	lds	r22, 0x0510	; 0x800510 <button_sound+0x8>
    1602:	70 91 11 05 	lds	r23, 0x0511	; 0x800511 <button_sound+0x9>
    1606:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <button_sound+0xa>
    160a:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
}
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	08 95       	ret

00001618 <get_game_difficulty>:

uint8_t get_game_difficulty(void) {
	return game_time_limit;
}
    1618:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <game_time_limit>
    161c:	08 95       	ret

0000161e <set_single_player>:

void set_single_player(uint8_t player_flag) {
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
	single_player_flag = player_flag;
    1626:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <single_player_flag>
	play_sound(button_sound);
    162a:	e0 90 08 05 	lds	r14, 0x0508	; 0x800508 <button_sound>
    162e:	f0 90 09 05 	lds	r15, 0x0509	; 0x800509 <button_sound+0x1>
    1632:	00 91 0a 05 	lds	r16, 0x050A	; 0x80050a <button_sound+0x2>
    1636:	10 91 0b 05 	lds	r17, 0x050B	; 0x80050b <button_sound+0x3>
    163a:	20 91 0c 05 	lds	r18, 0x050C	; 0x80050c <button_sound+0x4>
    163e:	30 91 0d 05 	lds	r19, 0x050D	; 0x80050d <button_sound+0x5>
    1642:	40 91 0e 05 	lds	r20, 0x050E	; 0x80050e <button_sound+0x6>
    1646:	50 91 0f 05 	lds	r21, 0x050F	; 0x80050f <button_sound+0x7>
    164a:	60 91 10 05 	lds	r22, 0x0510	; 0x800510 <button_sound+0x8>
    164e:	70 91 11 05 	lds	r23, 0x0511	; 0x800511 <button_sound+0x9>
    1652:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <button_sound+0xa>
    1656:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
}
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	08 95       	ret

00001664 <get_single_player>:


uint8_t get_single_player(void) {
	return single_player_flag;
}
    1664:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <single_player_flag>
    1668:	08 95       	ret

0000166a <update_player_time>:

uint16_t update_player_time(uint8_t player_num) {
	switch (player_num) {
    166a:	80 34       	cpi	r24, 0x40	; 64
    166c:	19 f0       	breq	.+6      	; 0x1674 <update_player_time+0xa>
    166e:	80 35       	cpi	r24, 0x50	; 80
    1670:	59 f0       	breq	.+22     	; 0x1688 <update_player_time+0x1e>
    1672:	14 c0       	rjmp	.+40     	; 0x169c <update_player_time+0x32>
		case PLAYER_1:
			player_1_time ++;
    1674:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <player_1_time>
    1678:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <player_1_time+0x1>
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <player_1_time+0x1>
    1682:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <player_1_time>
			return player_1_time;
    1686:	08 95       	ret
		case PLAYER_2:
			player_2_time ++;
    1688:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <player_2_time>
    168c:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <player_2_time+0x1>
    1690:	01 96       	adiw	r24, 0x01	; 1
    1692:	90 93 cf 06 	sts	0x06CF, r25	; 0x8006cf <player_2_time+0x1>
    1696:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <player_2_time>
			return player_2_time;
    169a:	08 95       	ret
		default:
			return 0;
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    16a0:	08 95       	ret

000016a2 <is_game_over>:


// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over(void) {
    16a2:	cf 93       	push	r28
	// Detect if the game is over i.e. if a player has won.
	uint8_t object_at_cursor_p1 = get_object_type(get_object_at(player_1_x, player_1_y));
    16a4:	60 91 9b 06 	lds	r22, 0x069B	; 0x80069b <player_1_y>
    16a8:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <player_1_x>
    16ac:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <get_object_at>
    16b0:	0e 94 80 06 	call	0xd00	; 0xd00 <get_object_type>
    16b4:	c8 2f       	mov	r28, r24
	uint8_t object_at_cursor_p2 = get_object_type(get_object_at(player_2_x, player_2_y));
    16b6:	60 91 cd 06 	lds	r22, 0x06CD	; 0x8006cd <player_2_y>
    16ba:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <player_2_x>
    16be:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <get_object_at>
    16c2:	0e 94 80 06 	call	0xd00	; 0xd00 <get_object_type>
    16c6:	98 2f       	mov	r25, r24
	
	if (object_at_cursor_p1 == FINISH_LINE || (player_2_time >= game_time_limit * 100 && game_time_limit != EASY)) {
    16c8:	c0 32       	cpi	r28, 0x20	; 32
    16ca:	79 f0       	breq	.+30     	; 0x16ea <is_game_over+0x48>
    16cc:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <game_time_limit>
    16d0:	44 e6       	ldi	r20, 0x64	; 100
    16d2:	84 9f       	mul	r24, r20
    16d4:	90 01       	movw	r18, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	40 91 ce 06 	lds	r20, 0x06CE	; 0x8006ce <player_2_time>
    16dc:	50 91 cf 06 	lds	r21, 0x06CF	; 0x8006cf <player_2_time+0x1>
    16e0:	42 17       	cp	r20, r18
    16e2:	53 07       	cpc	r21, r19
    16e4:	38 f0       	brcs	.+14     	; 0x16f4 <is_game_over+0x52>
    16e6:	88 23       	and	r24, r24
    16e8:	29 f0       	breq	.+10     	; 0x16f4 <is_game_over+0x52>
		game_winner = PLAYER_1;
    16ea:	80 e4       	ldi	r24, 0x40	; 64
    16ec:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <game_winner>
		return 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	11 c0       	rjmp	.+34     	; 0x1716 <is_game_over+0x74>
	}
	else if (object_at_cursor_p2 == FINISH_LINE || (player_1_time >= game_time_limit * 100 && game_time_limit != EASY)) {
    16f4:	90 32       	cpi	r25, 0x20	; 32
    16f6:	49 f0       	breq	.+18     	; 0x170a <is_game_over+0x68>
    16f8:	40 91 63 06 	lds	r20, 0x0663	; 0x800663 <player_1_time>
    16fc:	50 91 64 06 	lds	r21, 0x0664	; 0x800664 <player_1_time+0x1>
    1700:	42 17       	cp	r20, r18
    1702:	53 07       	cpc	r21, r19
    1704:	38 f0       	brcs	.+14     	; 0x1714 <is_game_over+0x72>
    1706:	88 23       	and	r24, r24
    1708:	31 f0       	breq	.+12     	; 0x1716 <is_game_over+0x74>
		game_winner = PLAYER_2;
    170a:	80 e5       	ldi	r24, 0x50	; 80
    170c:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <game_winner>
		return 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <is_game_over+0x74>
	}
	
	return 0;
    1714:	80 e0       	ldi	r24, 0x00	; 0
}
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <get_game_winner>:

// Returns the winner's player number 
uint8_t get_game_winner(void) {
	return game_winner;
    171a:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <game_winner>
    171e:	08 95       	ret

00001720 <get_game_starting_layout>:
};

static game_board game_board_formatted[WIDTH];

game_board_layout* get_game_starting_layout(uint8_t game_board_num)  {
	switch (game_board_num) {
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	19 f0       	breq	.+6      	; 0x172a <get_game_starting_layout+0xa>
		case GAMEBOARD_1:
			return game_board_1_layout;
    1724:	81 ee       	ldi	r24, 0xE1	; 225
    1726:	91 e0       	ldi	r25, 0x01	; 1
    1728:	08 95       	ret
			break;
		case GAMEBOARD_2:
			return game_board_2_layout;
    172a:	81 e6       	ldi	r24, 0x61	; 97
    172c:	91 e0       	ldi	r25, 0x01	; 1
			break;
		default:
			return game_board_1_layout;
			break;
	}
}
    172e:	08 95       	ret

00001730 <get_game_board>:

game_board* get_game_board(game_board_layout* starting_layout) {
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	7c 01       	movw	r14, r24
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
    173e:	00 e0       	ldi	r16, 0x00	; 0
    1740:	10 e0       	ldi	r17, 0x00	; 0
    1742:	2c c0       	rjmp	.+88     	; 0x179c <get_game_board+0x6c>
		for (int y = 0; y < HEIGHT; y++) {
			// Initialise this square based on the starting layout
			// the indices here are to ensure the starting layout
			// could be easily visualised when declared
			game_board_formatted[x][y] = starting_layout[HEIGHT - 1 - y][x];
    1744:	ef e0       	ldi	r30, 0x0F	; 15
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	ec 1b       	sub	r30, r28
    174a:	fd 0b       	sbc	r31, r29
    174c:	ee 0f       	add	r30, r30
    174e:	ff 1f       	adc	r31, r31
    1750:	ee 0f       	add	r30, r30
    1752:	ff 1f       	adc	r31, r31
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	ee 0d       	add	r30, r14
    175a:	ff 1d       	adc	r31, r15
    175c:	e0 0f       	add	r30, r16
    175e:	f1 1f       	adc	r31, r17
    1760:	80 81       	ld	r24, Z
    1762:	d8 01       	movw	r26, r16
    1764:	a2 95       	swap	r26
    1766:	b2 95       	swap	r27
    1768:	b0 7f       	andi	r27, 0xF0	; 240
    176a:	ba 27       	eor	r27, r26
    176c:	a0 7f       	andi	r26, 0xF0	; 240
    176e:	ba 27       	eor	r27, r26
    1770:	a0 55       	subi	r26, 0x50	; 80
    1772:	ba 4f       	sbci	r27, 0xFA	; 250
    1774:	ac 0f       	add	r26, r28
    1776:	bd 1f       	adc	r27, r29
    1778:	8c 93       	st	X, r24
			uint8_t board_object_type = get_object_type(starting_layout[HEIGHT - 1 - y][x]);
    177a:	80 81       	ld	r24, Z
    177c:	0e 94 80 06 	call	0xd00	; 0xd00 <get_object_type>
			update_square_colour(x, y, board_object_type);
    1780:	48 2f       	mov	r20, r24
    1782:	6c 2f       	mov	r22, r28
    1784:	80 2f       	mov	r24, r16
    1786:	0e 94 f5 05 	call	0xbea	; 0xbea <update_square_colour>
}

game_board* get_game_board(game_board_layout* starting_layout) {
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
    178a:	21 96       	adiw	r28, 0x01	; 1
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <get_game_board+0x62>
    178e:	c0 e0       	ldi	r28, 0x00	; 0
    1790:	d0 e0       	ldi	r29, 0x00	; 0
    1792:	c0 31       	cpi	r28, 0x10	; 16
    1794:	d1 05       	cpc	r29, r1
    1796:	b4 f2       	brlt	.-84     	; 0x1744 <get_game_board+0x14>
	}
}

game_board* get_game_board(game_board_layout* starting_layout) {
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
    1798:	0f 5f       	subi	r16, 0xFF	; 255
    179a:	1f 4f       	sbci	r17, 0xFF	; 255
    179c:	08 30       	cpi	r16, 0x08	; 8
    179e:	11 05       	cpc	r17, r1
    17a0:	b4 f3       	brlt	.-20     	; 0x178e <get_game_board+0x5e>
			update_square_colour(x, y, board_object_type);
		}
	}
	
	return game_board_formatted;
    17a2:	80 eb       	ldi	r24, 0xB0	; 176
    17a4:	95 e0       	ldi	r25, 0x05	; 5
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	08 95       	ret

000017b4 <init_joystick>:
	axis_toggle = 1 - axis_toggle;
}

void get_joystick_axis(uint16_t *x, uint16_t *y) {
	*x = x_joy;
	*y = y_joy;
    17b4:	80 e4       	ldi	r24, 0x40	; 64
    17b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    17ba:	86 e8       	ldi	r24, 0x86	; 134
    17bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    17c0:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <axis_toggle>
    17c4:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <axis_hold_flag>
    17c8:	08 95       	ret

000017ca <joystick_adc>:
    17ca:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <axis_toggle>
    17ce:	88 23       	and	r24, r24
    17d0:	31 f0       	breq	.+12     	; 0x17de <joystick_adc+0x14>
    17d2:	ec e7       	ldi	r30, 0x7C	; 124
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8e 7f       	andi	r24, 0xFE	; 254
    17da:	80 83       	st	Z, r24
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <joystick_adc+0x1e>
    17de:	ec e7       	ldi	r30, 0x7C	; 124
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	81 60       	ori	r24, 0x01	; 1
    17e6:	80 83       	st	Z, r24
    17e8:	ea e7       	ldi	r30, 0x7A	; 122
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	80 64       	ori	r24, 0x40	; 64
    17f0:	80 83       	st	Z, r24
    17f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    17f6:	86 fd       	sbrc	r24, 6
    17f8:	fc cf       	rjmp	.-8      	; 0x17f2 <joystick_adc+0x28>
    17fa:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    17fe:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1802:	30 93 d9 06 	sts	0x06D9, r19	; 0x8006d9 <adc_read+0x1>
    1806:	20 93 d8 06 	sts	0x06D8, r18	; 0x8006d8 <adc_read>
    180a:	90 91 d0 06 	lds	r25, 0x06D0	; 0x8006d0 <axis_toggle>
    180e:	99 23       	and	r25, r25
    1810:	29 f0       	breq	.+10     	; 0x181c <joystick_adc+0x52>
    1812:	30 93 e2 06 	sts	0x06E2, r19	; 0x8006e2 <x_joy+0x1>
    1816:	20 93 e1 06 	sts	0x06E1, r18	; 0x8006e1 <x_joy>
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <joystick_adc+0x5a>
    181c:	30 93 d3 06 	sts	0x06D3, r19	; 0x8006d3 <y_joy+0x1>
    1820:	20 93 d2 06 	sts	0x06D2, r18	; 0x8006d2 <y_joy>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	89 1b       	sub	r24, r25
    1828:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <axis_toggle>
    182c:	08 95       	ret

0000182e <set_axis_hold>:
}

void set_axis_hold(uint8_t hold_flag) {
	axis_hold_flag = hold_flag;
    182e:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <axis_hold_flag>
	axis_hold_sample = 0;
    1832:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <axis_hold_sample>
	axis_hold_wait = SENSITIVITY_INIT;
    1836:	88 e5       	ldi	r24, 0x58	; 88
    1838:	92 e0       	ldi	r25, 0x02	; 2
    183a:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <axis_hold_wait+0x1>
    183e:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <axis_hold_wait>
    1842:	08 95       	ret

00001844 <handle_joystick_move>:
}

uint8_t handle_joystick_move(int8_t *dx, int8_t *dy) {
    1844:	cf 92       	push	r12
    1846:	df 92       	push	r13
    1848:	ef 92       	push	r14
    184a:	ff 92       	push	r15
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
    1854:	ec 01       	movw	r28, r24
    1856:	8b 01       	movw	r16, r22
	uint8_t joystick_return = 0;
	
	if (x_joy > CENTRE_X + DEADZONE_X) {
    1858:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <x_joy>
    185c:	90 91 e2 06 	lds	r25, 0x06E2	; 0x8006e2 <x_joy+0x1>
    1860:	89 3c       	cpi	r24, 0xC9	; 201
    1862:	22 e0       	ldi	r18, 0x02	; 2
    1864:	92 07       	cpc	r25, r18
    1866:	20 f0       	brcs	.+8      	; 0x1870 <handle_joystick_move+0x2c>
		dx_joy = -1;
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <dx_joy>
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <handle_joystick_move+0x3e>
	}
	else if (x_joy < CENTRE_X - DEADZONE_X) {
    1870:	88 33       	cpi	r24, 0x38	; 56
    1872:	91 40       	sbci	r25, 0x01	; 1
    1874:	20 f4       	brcc	.+8      	; 0x187e <handle_joystick_move+0x3a>
		dx_joy = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <dx_joy>
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <handle_joystick_move+0x3e>
	}
	else dx_joy = 0;
    187e:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <dx_joy>
	
	if (y_joy > CENTRE_Y + DEADZONE_Y) {
    1882:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <y_joy>
    1886:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <y_joy+0x1>
    188a:	89 3c       	cpi	r24, 0xC9	; 201
    188c:	f2 e0       	ldi	r31, 0x02	; 2
    188e:	9f 07       	cpc	r25, r31
    1890:	20 f0       	brcs	.+8      	; 0x189a <handle_joystick_move+0x56>
		dy_joy = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <dy_joy>
    1898:	09 c0       	rjmp	.+18     	; 0x18ac <handle_joystick_move+0x68>
	}
	else if (y_joy < CENTRE_Y - DEADZONE_Y) {
    189a:	88 33       	cpi	r24, 0x38	; 56
    189c:	91 40       	sbci	r25, 0x01	; 1
    189e:	20 f4       	brcc	.+8      	; 0x18a8 <handle_joystick_move+0x64>
		dy_joy = -1;
    18a0:	8f ef       	ldi	r24, 0xFF	; 255
    18a2:	80 93 da 06 	sts	0x06DA, r24	; 0x8006da <dy_joy>
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <handle_joystick_move+0x68>
	}
	else dy_joy = 0;
    18a8:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <dy_joy>
	
	uint32_t current_time = get_current_time();
    18ac:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
	
	if (dx_joy == *dx && dy_joy == *dy && (dx_joy != 0 || dy_joy != 0)) {
    18b0:	28 81       	ld	r18, Y
    18b2:	40 91 e3 06 	lds	r20, 0x06E3	; 0x8006e3 <dx_joy>
    18b6:	24 13       	cpse	r18, r20
    18b8:	71 c0       	rjmp	.+226    	; 0x199c <handle_joystick_move+0x158>
    18ba:	f8 01       	movw	r30, r16
    18bc:	20 81       	ld	r18, Z
    18be:	30 91 da 06 	lds	r19, 0x06DA	; 0x8006da <dy_joy>
    18c2:	23 13       	cpse	r18, r19
    18c4:	6b c0       	rjmp	.+214    	; 0x199c <handle_joystick_move+0x158>
    18c6:	41 11       	cpse	r20, r1
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <handle_joystick_move+0x8c>
    18ca:	33 23       	and	r19, r19
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <handle_joystick_move+0x8c>
    18ce:	66 c0       	rjmp	.+204    	; 0x199c <handle_joystick_move+0x158>
		// Sample joystick and increment when previous and current position is the same
		// This debounces the input when difference changes quickly
		if (current_time >= axis_debounce_time + 2) {
    18d0:	c0 90 d4 06 	lds	r12, 0x06D4	; 0x8006d4 <axis_debounce_time>
    18d4:	d0 90 d5 06 	lds	r13, 0x06D5	; 0x8006d5 <axis_debounce_time+0x1>
    18d8:	e0 90 d6 06 	lds	r14, 0x06D6	; 0x8006d6 <axis_debounce_time+0x2>
    18dc:	f0 90 d7 06 	lds	r15, 0x06D7	; 0x8006d7 <axis_debounce_time+0x3>
    18e0:	f2 e0       	ldi	r31, 0x02	; 2
    18e2:	cf 0e       	add	r12, r31
    18e4:	d1 1c       	adc	r13, r1
    18e6:	e1 1c       	adc	r14, r1
    18e8:	f1 1c       	adc	r15, r1
    18ea:	6c 15       	cp	r22, r12
    18ec:	7d 05       	cpc	r23, r13
    18ee:	8e 05       	cpc	r24, r14
    18f0:	9f 05       	cpc	r25, r15
    18f2:	98 f0       	brcs	.+38     	; 0x191a <handle_joystick_move+0xd6>
			if (!axis_hold_flag && axis_hold_sample < 255) {
    18f4:	20 91 e4 06 	lds	r18, 0x06E4	; 0x8006e4 <axis_hold_flag>
    18f8:	21 11       	cpse	r18, r1
    18fa:	07 c0       	rjmp	.+14     	; 0x190a <handle_joystick_move+0xc6>
    18fc:	20 91 d1 06 	lds	r18, 0x06D1	; 0x8006d1 <axis_hold_sample>
    1900:	2f 3f       	cpi	r18, 0xFF	; 255
    1902:	19 f0       	breq	.+6      	; 0x190a <handle_joystick_move+0xc6>
				axis_hold_sample ++;
    1904:	2f 5f       	subi	r18, 0xFF	; 255
    1906:	20 93 d1 06 	sts	0x06D1, r18	; 0x8006d1 <axis_hold_sample>
			}
			axis_debounce_time = current_time;
    190a:	60 93 d4 06 	sts	0x06D4, r22	; 0x8006d4 <axis_debounce_time>
    190e:	70 93 d5 06 	sts	0x06D5, r23	; 0x8006d5 <axis_debounce_time+0x1>
    1912:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <axis_debounce_time+0x2>
    1916:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <axis_debounce_time+0x3>
		}
		
		// If the sample has been the same for the past 40 sample then move in direction
		if (!axis_hold_flag && axis_hold_sample > 40) {
    191a:	20 91 e4 06 	lds	r18, 0x06E4	; 0x8006e4 <axis_hold_flag>
    191e:	21 11       	cpse	r18, r1
    1920:	11 c0       	rjmp	.+34     	; 0x1944 <handle_joystick_move+0x100>
    1922:	20 91 d1 06 	lds	r18, 0x06D1	; 0x8006d1 <axis_hold_sample>
    1926:	29 32       	cpi	r18, 0x29	; 41
    1928:	78 f0       	brcs	.+30     	; 0x1948 <handle_joystick_move+0x104>
			axis_hold_flag = 1;
    192a:	21 e0       	ldi	r18, 0x01	; 1
    192c:	20 93 e4 06 	sts	0x06E4, r18	; 0x8006e4 <axis_hold_flag>
			joystick_return = 1;
			axis_hold_time = current_time;
    1930:	60 93 dd 06 	sts	0x06DD, r22	; 0x8006dd <axis_hold_time>
    1934:	70 93 de 06 	sts	0x06DE, r23	; 0x8006de <axis_hold_time+0x1>
    1938:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <axis_hold_time+0x2>
    193c:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <axis_hold_time+0x3>
		}
		
		// If the sample has been the same for the past 40 sample then move in direction
		if (!axis_hold_flag && axis_hold_sample > 40) {
			axis_hold_flag = 1;
			joystick_return = 1;
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	03 c0       	rjmp	.+6      	; 0x194a <handle_joystick_move+0x106>
	axis_hold_sample = 0;
	axis_hold_wait = SENSITIVITY_INIT;
}

uint8_t handle_joystick_move(int8_t *dx, int8_t *dy) {
	uint8_t joystick_return = 0;
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	01 c0       	rjmp	.+2      	; 0x194a <handle_joystick_move+0x106>
    1948:	40 e0       	ldi	r20, 0x00	; 0
			joystick_return = 1;
			axis_hold_time = current_time;
		}
		
		// Continue to move quickly after waiting for hold
		if (axis_hold_flag && current_time >= axis_hold_time + axis_hold_wait) {
    194a:	20 91 e4 06 	lds	r18, 0x06E4	; 0x8006e4 <axis_hold_flag>
    194e:	22 23       	and	r18, r18
    1950:	81 f1       	breq	.+96     	; 0x19b2 <handle_joystick_move+0x16e>
    1952:	20 91 db 06 	lds	r18, 0x06DB	; 0x8006db <axis_hold_wait>
    1956:	30 91 dc 06 	lds	r19, 0x06DC	; 0x8006dc <axis_hold_wait+0x1>
    195a:	c0 90 dd 06 	lds	r12, 0x06DD	; 0x8006dd <axis_hold_time>
    195e:	d0 90 de 06 	lds	r13, 0x06DE	; 0x8006de <axis_hold_time+0x1>
    1962:	e0 90 df 06 	lds	r14, 0x06DF	; 0x8006df <axis_hold_time+0x2>
    1966:	f0 90 e0 06 	lds	r15, 0x06E0	; 0x8006e0 <axis_hold_time+0x3>
    196a:	c2 0e       	add	r12, r18
    196c:	d3 1e       	adc	r13, r19
    196e:	e1 1c       	adc	r14, r1
    1970:	f1 1c       	adc	r15, r1
    1972:	6c 15       	cp	r22, r12
    1974:	7d 05       	cpc	r23, r13
    1976:	8e 05       	cpc	r24, r14
    1978:	9f 05       	cpc	r25, r15
    197a:	d8 f0       	brcs	.+54     	; 0x19b2 <handle_joystick_move+0x16e>
			joystick_return = 1;
			axis_hold_time = current_time;
    197c:	60 93 dd 06 	sts	0x06DD, r22	; 0x8006dd <axis_hold_time>
    1980:	70 93 de 06 	sts	0x06DE, r23	; 0x8006de <axis_hold_time+0x1>
    1984:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <axis_hold_time+0x2>
    1988:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <axis_hold_time+0x3>
			axis_hold_wait = SENSITIVITY_MOVE;
    198c:	86 e4       	ldi	r24, 0x46	; 70
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <axis_hold_wait+0x1>
    1994:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <axis_hold_wait>
			axis_hold_time = current_time;
		}
		
		// Continue to move quickly after waiting for hold
		if (axis_hold_flag && current_time >= axis_hold_time + axis_hold_wait) {
			joystick_return = 1;
    1998:	41 e0       	ldi	r20, 0x01	; 1
    199a:	0b c0       	rjmp	.+22     	; 0x19b2 <handle_joystick_move+0x16e>
			axis_hold_time = current_time;
			axis_hold_wait = SENSITIVITY_MOVE;
		}
	}
	else {
		axis_hold_flag = 0;
    199c:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <axis_hold_flag>
		axis_hold_sample = 0;
    19a0:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <axis_hold_sample>
		axis_hold_wait = SENSITIVITY_INIT;
    19a4:	88 e5       	ldi	r24, 0x58	; 88
    19a6:	92 e0       	ldi	r25, 0x02	; 2
    19a8:	90 93 dc 06 	sts	0x06DC, r25	; 0x8006dc <axis_hold_wait+0x1>
    19ac:	80 93 db 06 	sts	0x06DB, r24	; 0x8006db <axis_hold_wait>
	axis_hold_sample = 0;
	axis_hold_wait = SENSITIVITY_INIT;
}

uint8_t handle_joystick_move(int8_t *dx, int8_t *dy) {
	uint8_t joystick_return = 0;
    19b0:	40 e0       	ldi	r20, 0x00	; 0
		axis_hold_flag = 0;
		axis_hold_sample = 0;
		axis_hold_wait = SENSITIVITY_INIT;
	}	

	*dx = dx_joy;
    19b2:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <dx_joy>
    19b6:	98 83       	st	Y, r25
	*dy = dy_joy;
    19b8:	90 91 da 06 	lds	r25, 0x06DA	; 0x8006da <dy_joy>
    19bc:	f8 01       	movw	r30, r16
    19be:	90 83       	st	Z, r25
	
	return joystick_return;
    19c0:	84 2f       	mov	r24, r20
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	08 95       	ret

000019d4 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    19d4:	80 e8       	ldi	r24, 0x80	; 128
    19d6:	0e 94 73 14 	call	0x28e6	; 0x28e6 <spi_setup_master>
    19da:	08 95       	ret

000019dc <ledmatrix_update_pixel>:
    19dc:	1f 93       	push	r17
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	80 31       	cpi	r24, 0x10	; 16
    19e4:	b0 f4       	brcc	.+44     	; 0x1a12 <ledmatrix_update_pixel+0x36>
    19e6:	68 30       	cpi	r22, 0x08	; 8
    19e8:	a0 f4       	brcc	.+40     	; 0x1a12 <ledmatrix_update_pixel+0x36>
    19ea:	14 2f       	mov	r17, r20
    19ec:	c6 2f       	mov	r28, r22
    19ee:	d8 2f       	mov	r29, r24
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    19f6:	6c 2f       	mov	r22, r28
    19f8:	67 70       	andi	r22, 0x07	; 7
    19fa:	80 e1       	ldi	r24, 0x10	; 16
    19fc:	68 9f       	mul	r22, r24
    19fe:	90 01       	movw	r18, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	8d 2f       	mov	r24, r29
    1a04:	8f 70       	andi	r24, 0x0F	; 15
    1a06:	82 2b       	or	r24, r18
    1a08:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a0c:	81 2f       	mov	r24, r17
    1a0e:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	08 95       	ret

00001a1a <ledmatrix_update_column>:
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	80 31       	cpi	r24, 0x10	; 16
    1a22:	a0 f4       	brcc	.+40     	; 0x1a4c <ledmatrix_update_column+0x32>
    1a24:	8b 01       	movw	r16, r22
    1a26:	c8 2f       	mov	r28, r24
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a2e:	8c 2f       	mov	r24, r28
    1a30:	8f 70       	andi	r24, 0x0F	; 15
    1a32:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a36:	c0 e0       	ldi	r28, 0x00	; 0
    1a38:	07 c0       	rjmp	.+14     	; 0x1a48 <ledmatrix_update_column+0x2e>
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	ec 0f       	add	r30, r28
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	80 81       	ld	r24, Z
    1a42:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a46:	cf 5f       	subi	r28, 0xFF	; 255
    1a48:	c8 30       	cpi	r28, 0x08	; 8
    1a4a:	b8 f3       	brcs	.-18     	; 0x1a3a <ledmatrix_update_column+0x20>
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <ledmatrix_shift_display_left>:
    1a54:	84 e0       	ldi	r24, 0x04	; 4
    1a56:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a60:	08 95       	ret

00001a62 <ledmatrix_shift_display_right>:
    1a62:	84 e0       	ldi	r24, 0x04	; 4
    1a64:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a6e:	08 95       	ret

00001a70 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    1a70:	8f e0       	ldi	r24, 0x0F	; 15
    1a72:	0e 94 9f 14 	call	0x293e	; 0x293e <spi_send_byte>
    1a76:	08 95       	ret

00001a78 <p_rand_seed>:
static uint8_t state;

// Set the p_rand seed for random number generation.
void p_rand_seed(uint32_t num) {
	// Bit mask state from 8 bits of seed (i.e clock)
	state = num & 0xFF;
    1a78:	60 93 30 06 	sts	0x0630, r22	; 0x800630 <state>
    1a7c:	08 95       	ret

00001a7e <p_rand_next>:

/* Pseudorandom number generator using 8 bit XORshift.
 * max variable completes mod operation to 'limit' the max output.
 * Note: This only mimics a standard distribution for small values of max.
*/
uint8_t p_rand_next(uint8_t max) {
    1a7e:	68 2f       	mov	r22, r24
	uint8_t x = state;
    1a80:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <state>

	x ^= (x << 7);
    1a84:	90 e8       	ldi	r25, 0x80	; 128
    1a86:	89 9f       	mul	r24, r25
    1a88:	a0 01       	movw	r20, r0
    1a8a:	11 24       	eor	r1, r1
    1a8c:	84 27       	eor	r24, r20
	x ^= (x >> 5);
    1a8e:	98 2f       	mov	r25, r24
    1a90:	92 95       	swap	r25
    1a92:	96 95       	lsr	r25
    1a94:	97 70       	andi	r25, 0x07	; 7
    1a96:	89 27       	eor	r24, r25
	x ^= (x << 3);
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	22 0f       	add	r18, r18
    1aa6:	33 1f       	adc	r19, r19
    1aa8:	82 27       	eor	r24, r18
	state = x;
    1aaa:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <state>

	return x % max;
    1aae:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <__udivmodqi4>
    1ab2:	89 2f       	mov	r24, r25
    1ab4:	08 95       	ret

00001ab6 <initialise_hardware>:
}

void initialise_hardware(void) {
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	7b e4       	ldi	r23, 0x4B	; 75
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 30 13 	call	0x2660	; 0x2660 <init_serial_stdio>
	
	ledmatrix_setup();
    1ac4:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <ledmatrix_setup>
	
	init_button_interrupts();
    1ac8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <init_button_interrupts>
	init_sevenseg();
    1acc:	0e 94 69 14 	call	0x28d2	; 0x28d2 <init_sevenseg>
	init_dice();
    1ad0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <init_dice>
	init_buzzer();
    1ad4:	0e 94 ee 02 	call	0x5dc	; 0x5dc <init_buzzer>
	init_joystick();
    1ad8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <init_joystick>
	init_timer0();
    1adc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <init_timer0>
	
	// Turn on global interrupts
	sei();
    1ae0:	78 94       	sei
    1ae2:	08 95       	ret

00001ae4 <handle_restart_wait>:
	
	stop_animations();
}

// Waits for the user to press any button or s in the terminal.
uint8_t handle_restart_wait(char serial_input) {
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	c8 2f       	mov	r28, r24
	int8_t btn = button_pushed();
    1af0:	0e 94 80 02 	call	0x500	; 0x500 <button_pushed>
	
	// If the serial input is 's' or any button is pushed exit the loop
	if (serial_input == 's' || serial_input == 'S' || btn != NO_BUTTON_PUSHED) {
    1af4:	c3 37       	cpi	r28, 0x73	; 115
    1af6:	21 f0       	breq	.+8      	; 0x1b00 <handle_restart_wait+0x1c>
    1af8:	c3 35       	cpi	r28, 0x53	; 83
    1afa:	11 f0       	breq	.+4      	; 0x1b00 <handle_restart_wait+0x1c>
    1afc:	8f 3f       	cpi	r24, 0xFF	; 255
    1afe:	d1 f0       	breq	.+52     	; 0x1b34 <handle_restart_wait+0x50>
		play_sound(button_sound);
    1b00:	e0 90 86 05 	lds	r14, 0x0586	; 0x800586 <button_sound>
    1b04:	f0 90 87 05 	lds	r15, 0x0587	; 0x800587 <button_sound+0x1>
    1b08:	00 91 88 05 	lds	r16, 0x0588	; 0x800588 <button_sound+0x2>
    1b0c:	10 91 89 05 	lds	r17, 0x0589	; 0x800589 <button_sound+0x3>
    1b10:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <button_sound+0x4>
    1b14:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <button_sound+0x5>
    1b18:	40 91 8c 05 	lds	r20, 0x058C	; 0x80058c <button_sound+0x6>
    1b1c:	50 91 8d 05 	lds	r21, 0x058D	; 0x80058d <button_sound+0x7>
    1b20:	60 91 8e 05 	lds	r22, 0x058E	; 0x80058e <button_sound+0x8>
    1b24:	70 91 8f 05 	lds	r23, 0x058F	; 0x80058f <button_sound+0x9>
    1b28:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <button_sound+0xa>
    1b2c:	0e 94 66 03 	call	0x6cc	; 0x6cc <play_sound>
		return 0;
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <handle_restart_wait+0x52>
	}
		
	return 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
}
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	ff 90       	pop	r15
    1b3e:	ef 90       	pop	r14
    1b40:	08 95       	ret

00001b42 <handle_serial_input>:
// Return 1 if serial button movement is detected, else 0.
uint8_t handle_serial_input(char serial_input, uint8_t player_num) {
	uint8_t move_return = 1;
	
	// If the serial input is 'w', move player up
	if (serial_input == 'w' || serial_input == 'W') {
    1b42:	87 37       	cpi	r24, 0x77	; 119
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <handle_serial_input+0x8>
    1b46:	87 35       	cpi	r24, 0x57	; 87
    1b48:	41 f4       	brne	.+16     	; 0x1b5a <handle_serial_input+0x18>
		move_player(0, 1, player_num, 1);
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	46 2f       	mov	r20, r22
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_player>
	return 1;
}

// Return 1 if serial button movement is detected, else 0.
uint8_t handle_serial_input(char serial_input, uint8_t player_num) {
	uint8_t move_return = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
	
	// If the serial input is 'w', move player up
	if (serial_input == 'w' || serial_input == 'W') {
		move_player(0, 1, player_num, 1);
    1b58:	08 95       	ret
	}
	// If the serial input is 'a', move player left
	else if (serial_input == 'a' || serial_input == 'A') {
    1b5a:	81 36       	cpi	r24, 0x61	; 97
    1b5c:	11 f0       	breq	.+4      	; 0x1b62 <handle_serial_input+0x20>
    1b5e:	81 34       	cpi	r24, 0x41	; 65
    1b60:	41 f4       	brne	.+16     	; 0x1b72 <handle_serial_input+0x30>
		move_player(-1, 0, player_num, 1);
    1b62:	21 e0       	ldi	r18, 0x01	; 1
    1b64:	46 2f       	mov	r20, r22
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_player>
	return 1;
}

// Return 1 if serial button movement is detected, else 0.
uint8_t handle_serial_input(char serial_input, uint8_t player_num) {
	uint8_t move_return = 1;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
	if (serial_input == 'w' || serial_input == 'W') {
		move_player(0, 1, player_num, 1);
	}
	// If the serial input is 'a', move player left
	else if (serial_input == 'a' || serial_input == 'A') {
		move_player(-1, 0, player_num, 1);
    1b70:	08 95       	ret
	}
	// If the serial input is 's', move player down
	else if (serial_input == 's' || serial_input == 'S') {
    1b72:	83 37       	cpi	r24, 0x73	; 115
    1b74:	11 f0       	breq	.+4      	; 0x1b7a <handle_serial_input+0x38>
    1b76:	83 35       	cpi	r24, 0x53	; 83
    1b78:	41 f4       	brne	.+16     	; 0x1b8a <handle_serial_input+0x48>
		move_player(0, -1, player_num, 1);
    1b7a:	21 e0       	ldi	r18, 0x01	; 1
    1b7c:	46 2f       	mov	r20, r22
    1b7e:	6f ef       	ldi	r22, 0xFF	; 255
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_player>
	return 1;
}

// Return 1 if serial button movement is detected, else 0.
uint8_t handle_serial_input(char serial_input, uint8_t player_num) {
	uint8_t move_return = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
	else if (serial_input == 'a' || serial_input == 'A') {
		move_player(-1, 0, player_num, 1);
	}
	// If the serial input is 's', move player down
	else if (serial_input == 's' || serial_input == 'S') {
		move_player(0, -1, player_num, 1);
    1b88:	08 95       	ret
	}
	// If the serial input is 'd', move player right
	else if (serial_input == 'd' || serial_input == 'D') {
    1b8a:	84 36       	cpi	r24, 0x64	; 100
    1b8c:	11 f0       	breq	.+4      	; 0x1b92 <handle_serial_input+0x50>
    1b8e:	84 34       	cpi	r24, 0x44	; 68
    1b90:	41 f4       	brne	.+16     	; 0x1ba2 <handle_serial_input+0x60>
		move_player(1, 0, player_num, 1);
    1b92:	21 e0       	ldi	r18, 0x01	; 1
    1b94:	46 2f       	mov	r20, r22
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_player>
	return 1;
}

// Return 1 if serial button movement is detected, else 0.
uint8_t handle_serial_input(char serial_input, uint8_t player_num) {
	uint8_t move_return = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
	else if (serial_input == 's' || serial_input == 'S') {
		move_player(0, -1, player_num, 1);
	}
	// If the serial input is 'd', move player right
	else if (serial_input == 'd' || serial_input == 'D') {
		move_player(1, 0, player_num, 1);
    1ba0:	08 95       	ret
	}
	else if (serial_input == 'r' || serial_input == 'R') {
    1ba2:	82 37       	cpi	r24, 0x72	; 114
    1ba4:	11 f0       	breq	.+4      	; 0x1baa <handle_serial_input+0x68>
    1ba6:	82 35       	cpi	r24, 0x52	; 82
    1ba8:	21 f4       	brne	.+8      	; 0x1bb2 <handle_serial_input+0x70>
		dice_roll_toggle();
    1baa:	0e 94 ee 04 	call	0x9dc	; 0x9dc <dice_roll_toggle>
		move_return = 0;
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	08 95       	ret
	}
	else move_return = 0;
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
	
	return move_return;
}
    1bb4:	08 95       	ret

00001bb6 <handle_joysick_input>:

uint8_t handle_joysick_input(int8_t *dx, int8_t *dy, uint8_t player_num) {
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	ec 01       	movw	r28, r24
    1bc2:	8b 01       	movw	r16, r22
    1bc4:	f4 2e       	mov	r15, r20
	joystick_adc();
    1bc6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <joystick_adc>

	if (handle_joystick_move(dx, dy)) {
    1bca:	b8 01       	movw	r22, r16
    1bcc:	ce 01       	movw	r24, r28
    1bce:	0e 94 22 0c 	call	0x1844	; 0x1844 <handle_joystick_move>
    1bd2:	88 23       	and	r24, r24
    1bd4:	49 f0       	breq	.+18     	; 0x1be8 <handle_joysick_input+0x32>
		if (move_player(*dx, *dy, player_num, 1)) {
    1bd6:	21 e0       	ldi	r18, 0x01	; 1
    1bd8:	4f 2d       	mov	r20, r15
    1bda:	f8 01       	movw	r30, r16
    1bdc:	60 81       	ld	r22, Z
    1bde:	88 81       	ld	r24, Y
    1be0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_player>
    1be4:	81 11       	cpse	r24, r1
			return 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;
}
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	1f 91       	pop	r17
    1bee:	0f 91       	pop	r16
    1bf0:	ff 90       	pop	r15
    1bf2:	08 95       	ret

00001bf4 <handle_button_input>:

// Return 1 if button movement is detected, else 0.
uint8_t handle_button_input(uint8_t btn, uint8_t player_num) {
	uint8_t move_return = 1;
	
	if (btn == BUTTON0_PUSHED) {
    1bf4:	81 11       	cpse	r24, r1
    1bf6:	05 c0       	rjmp	.+10     	; 0x1c02 <handle_button_input+0xe>
		// If button 0 is pushed, move player 1, 1 space forward.
		move_player_n(1, player_num);
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	0e 94 85 09 	call	0x130a	; 0x130a <move_player_n>
	return 0;
}

// Return 1 if button movement is detected, else 0.
uint8_t handle_button_input(uint8_t btn, uint8_t player_num) {
	uint8_t move_return = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	08 95       	ret
	
	if (btn == BUTTON0_PUSHED) {
		// If button 0 is pushed, move player 1, 1 space forward.
		move_player_n(1, player_num);
	}
	else if (btn == BUTTON1_PUSHED) {
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	29 f4       	brne	.+10     	; 0x1c10 <handle_button_input+0x1c>
		// If button 1 is pushed, move player 1, 2 spaces forward.
		move_player_n(2, player_num);
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	0e 94 85 09 	call	0x130a	; 0x130a <move_player_n>
	return 0;
}

// Return 1 if button movement is detected, else 0.
uint8_t handle_button_input(uint8_t btn, uint8_t player_num) {
	uint8_t move_return = 1;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	08 95       	ret
	}
	else if (btn == BUTTON1_PUSHED) {
		// If button 1 is pushed, move player 1, 2 spaces forward.
		move_player_n(2, player_num);
	}
	else if (btn == BUTTON2_PUSHED) {
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	21 f4       	brne	.+8      	; 0x1c1c <handle_button_input+0x28>
		dice_roll_toggle();
    1c14:	0e 94 ee 04 	call	0x9dc	; 0x9dc <dice_roll_toggle>
		move_return = 0;
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	08 95       	ret
	}
	else move_return = 0;
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
	
	return move_return;
}
    1c1e:	08 95       	ret

00001c20 <handle_difficulty_input>:

uint8_t handle_difficulty_input(char serial_input) {
	uint8_t difficulty_return = 1;
	
	if (serial_input == 'e' || serial_input == 'E') {
    1c20:	85 36       	cpi	r24, 0x65	; 101
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <handle_difficulty_input+0x8>
    1c24:	85 34       	cpi	r24, 0x45	; 69
    1c26:	29 f4       	brne	.+10     	; 0x1c32 <handle_difficulty_input+0x12>
		set_game_difficulty(EASY);
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <set_game_difficulty>
	
	return move_return;
}

uint8_t handle_difficulty_input(char serial_input) {
	uint8_t difficulty_return = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
	
	if (serial_input == 'e' || serial_input == 'E') {
		set_game_difficulty(EASY);
    1c30:	08 95       	ret
	}
	else if (serial_input == 'm' || serial_input == 'M') {
    1c32:	8d 36       	cpi	r24, 0x6D	; 109
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <handle_difficulty_input+0x1a>
    1c36:	8d 34       	cpi	r24, 0x4D	; 77
    1c38:	29 f4       	brne	.+10     	; 0x1c44 <handle_difficulty_input+0x24>
		set_game_difficulty(MEDIUM);
    1c3a:	8a e5       	ldi	r24, 0x5A	; 90
    1c3c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <set_game_difficulty>
	
	return move_return;
}

uint8_t handle_difficulty_input(char serial_input) {
	uint8_t difficulty_return = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
	
	if (serial_input == 'e' || serial_input == 'E') {
		set_game_difficulty(EASY);
	}
	else if (serial_input == 'm' || serial_input == 'M') {
		set_game_difficulty(MEDIUM);
    1c42:	08 95       	ret
	}
	else if (serial_input == 'h' || serial_input == 'H') {
    1c44:	88 36       	cpi	r24, 0x68	; 104
    1c46:	11 f0       	breq	.+4      	; 0x1c4c <handle_difficulty_input+0x2c>
    1c48:	88 34       	cpi	r24, 0x48	; 72
    1c4a:	29 f4       	brne	.+10     	; 0x1c56 <handle_difficulty_input+0x36>
		set_game_difficulty(HARD);
    1c4c:	8d e2       	ldi	r24, 0x2D	; 45
    1c4e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <set_game_difficulty>
	
	return move_return;
}

uint8_t handle_difficulty_input(char serial_input) {
	uint8_t difficulty_return = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
	}
	else if (serial_input == 'm' || serial_input == 'M') {
		set_game_difficulty(MEDIUM);
	}
	else if (serial_input == 'h' || serial_input == 'H') {
		set_game_difficulty(HARD);
    1c54:	08 95       	ret
	}
	else difficulty_return = 0;
    1c56:	80 e0       	ldi	r24, 0x00	; 0
	
	return difficulty_return;
}
    1c58:	08 95       	ret

00001c5a <handle_board_change_input>:

uint8_t handle_board_change_input(char serial_input) {
    1c5a:	cf 93       	push	r28
	uint8_t game_board_num;
	
	if (serial_input == 'b' || serial_input == 'B') {
    1c5c:	82 36       	cpi	r24, 0x62	; 98
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <handle_board_change_input+0xa>
    1c60:	82 34       	cpi	r24, 0x42	; 66
    1c62:	d1 f4       	brne	.+52     	; 0x1c98 <handle_board_change_input+0x3e>
		game_board_num = handle_game_board_num_change();
    1c64:	0e 94 b0 0a 	call	0x1560	; 0x1560 <handle_game_board_num_change>
    1c68:	c8 2f       	mov	r28, r24
		
		move_terminal_cursor(10,12);
    1c6a:	6c e0       	ldi	r22, 0x0C	; 12
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	8a e0       	ldi	r24, 0x0A	; 10
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
		printf("Level: %d", game_board_num);
    1c76:	1f 92       	push	r1
    1c78:	cf 93       	push	r28
    1c7a:	83 e1       	ldi	r24, 0x13	; 19
    1c7c:	95 e0       	ldi	r25, 0x05	; 5
    1c7e:	9f 93       	push	r25
    1c80:	8f 93       	push	r24
    1c82:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
		
		init_game_board(game_board_num);
    1c86:	8c 2f       	mov	r24, r28
    1c88:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <init_game_board>
		
		return 1;
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <handle_board_change_input+0x40>
	}
	
	return 0;
    1c98:	80 e0       	ldi	r24, 0x00	; 0
}
    1c9a:	cf 91       	pop	r28
    1c9c:	08 95       	ret

00001c9e <handle_multi_player_input>:

uint8_t handle_multi_player_input(char serial_input) {
	if (serial_input == '1') {
    1c9e:	81 33       	cpi	r24, 0x31	; 49
    1ca0:	29 f4       	brne	.+10     	; 0x1cac <handle_multi_player_input+0xe>
		set_single_player(1);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	0e 94 0f 0b 	call	0x161e	; 0x161e <set_single_player>
		return 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	08 95       	ret
	}
	else if (serial_input == '2') {
    1cac:	82 33       	cpi	r24, 0x32	; 50
    1cae:	29 f4       	brne	.+10     	; 0x1cba <handle_multi_player_input+0x1c>
		set_single_player(0);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	0e 94 0f 0b 	call	0x161e	; 0x161e <set_single_player>
		return 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	08 95       	ret
	}
	
	return 0;
    1cba:	80 e0       	ldi	r24, 0x00	; 0
}
    1cbc:	08 95       	ret

00001cbe <handle_audio_input>:

uint8_t handle_audio_input(char serial_input) {
	if (serial_input == 'q' || serial_input == 'Q') {
    1cbe:	81 37       	cpi	r24, 0x71	; 113
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <handle_audio_input+0x8>
    1cc2:	81 35       	cpi	r24, 0x51	; 81
    1cc4:	21 f4       	brne	.+8      	; 0x1cce <handle_audio_input+0x10>
		mute_tone_toggle();
    1cc6:	0e 94 95 04 	call	0x92a	; 0x92a <mute_tone_toggle>
		return 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	08 95       	ret
	}
	return 0;
    1cce:	80 e0       	ldi	r24, 0x00	; 0
}
    1cd0:	08 95       	ret

00001cd2 <start_screen>:
	
	// Turn on global interrupts
	sei();
}

void start_screen(void) {
    1cd2:	cf 93       	push	r28
	// Clear terminal screen and output a message
	clear_terminal();
    1cd4:	0e 94 b6 14 	call	0x296c	; 0x296c <clear_terminal>
	hide_cursor();
    1cd8:	0e 94 c8 14 	call	0x2990	; 0x2990 <hide_cursor>
	move_terminal_cursor(10,10);
    1cdc:	6a e0       	ldi	r22, 0x0A	; 10
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	8a e0       	ldi	r24, 0x0A	; 10
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Snakes and Ladders"));
    1ce8:	80 e9       	ldi	r24, 0x90	; 144
    1cea:	92 e0       	ldi	r25, 0x02	; 2
    1cec:	9f 93       	push	r25
    1cee:	8f 93       	push	r24
    1cf0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	move_terminal_cursor(10,12);
    1cf4:	6c e0       	ldi	r22, 0x0C	; 12
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	8a e0       	ldi	r24, 0x0A	; 10
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 A2 by LIAM MULHERN - 47428748"));
    1d00:	84 e6       	ldi	r24, 0x64	; 100
    1d02:	92 e0       	ldi	r25, 0x02	; 2
    1d04:	9f 93       	push	r25
    1d06:	8f 93       	push	r24
    1d08:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	// Output the static start screen
	start_display();
    1d0c:	0e 94 b1 05 	call	0xb62	; 0xb62 <start_display>
	play_melody(start_sound, 38);
    1d10:	66 e2       	ldi	r22, 0x26	; 38
    1d12:	81 e6       	ldi	r24, 0x61	; 97
    1d14:	92 e0       	ldi	r25, 0x02	; 2
    1d16:	0e 94 99 03 	call	0x732	; 0x732 <play_melody>
	
	// Wait until a button is pressed, or 's' is pressed on the terminal
	char serial_input = get_serial();
    1d1a:	0e 94 83 13 	call	0x2706	; 0x2706 <get_serial>
    1d1e:	c8 2f       	mov	r28, r24
	while(handle_restart_wait(serial_input)) {
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0b c0       	rjmp	.+22     	; 0x1d40 <start_screen+0x6e>
		serial_input = get_serial();
    1d2a:	0e 94 83 13 	call	0x2706	; 0x2706 <get_serial>
    1d2e:	c8 2f       	mov	r28, r24
		
		// Handle audio output change
		if (handle_audio_input(serial_input)) {
    1d30:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <handle_audio_input>
    1d34:	88 23       	and	r24, r24
    1d36:	21 f0       	breq	.+8      	; 0x1d40 <start_screen+0x6e>
			set_game_mute_flag(get_mute_tone());
    1d38:	0e 94 bc 04 	call	0x978	; 0x978 <get_mute_tone>
    1d3c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <set_game_mute_flag>
	start_display();
	play_melody(start_sound, 38);
	
	// Wait until a button is pressed, or 's' is pressed on the terminal
	char serial_input = get_serial();
	while(handle_restart_wait(serial_input)) {
    1d40:	8c 2f       	mov	r24, r28
    1d42:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <handle_restart_wait>
    1d46:	81 11       	cpse	r24, r1
    1d48:	f0 cf       	rjmp	.-32     	; 0x1d2a <start_screen+0x58>
		// Handle audio output change
		if (handle_audio_input(serial_input)) {
			set_game_mute_flag(get_mute_tone());
		}
	}
}
    1d4a:	cf 91       	pop	r28
    1d4c:	08 95       	ret

00001d4e <handle_pause_input>:
	}
	return 0;
}

uint8_t handle_pause_input(char serial_input, uint8_t btn) {
	return (serial_input == 'p' || serial_input == 'P' || btn == BUTTON3_PUSHED);
    1d4e:	80 37       	cpi	r24, 0x70	; 112
    1d50:	31 f0       	breq	.+12     	; 0x1d5e <handle_pause_input+0x10>
    1d52:	80 35       	cpi	r24, 0x50	; 80
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <handle_pause_input+0x14>
    1d56:	63 30       	cpi	r22, 0x03	; 3
    1d58:	31 f4       	brne	.+12     	; 0x1d66 <handle_pause_input+0x18>
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	08 95       	ret
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	08 95       	ret
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	08 95       	ret
    1d66:	80 e0       	ldi	r24, 0x00	; 0
}
    1d68:	08 95       	ret

00001d6a <print_new_game>:

void print_new_game(void) {
	clear_terminal();
    1d6a:	0e 94 b6 14 	call	0x296c	; 0x296c <clear_terminal>
	
	move_terminal_cursor(10,10);
    1d6e:	6a e0       	ldi	r22, 0x0A	; 10
    1d70:	70 e0       	ldi	r23, 0x00	; 0
    1d72:	8a e0       	ldi	r24, 0x0A	; 10
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("NEW GAME"));
    1d7a:	8b e5       	ldi	r24, 0x5B	; 91
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	9f 93       	push	r25
    1d80:	8f 93       	push	r24
    1d82:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,15);
    1d86:	6f e0       	ldi	r22, 0x0F	; 15
    1d88:	70 e0       	ldi	r23, 0x00	; 0
    1d8a:	8a e0       	ldi	r24, 0x0A	; 10
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (e)/(m)/(h) To Select Difficulty"));
    1d92:	84 e3       	ldi	r24, 0x34	; 52
    1d94:	92 e0       	ldi	r25, 0x02	; 2
    1d96:	9f 93       	push	r25
    1d98:	8f 93       	push	r24
    1d9a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,16);
    1d9e:	60 e1       	ldi	r22, 0x10	; 16
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	8a e0       	ldi	r24, 0x0A	; 10
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (b) To Select Level"));
    1daa:	8a e1       	ldi	r24, 0x1A	; 26
    1dac:	92 e0       	ldi	r25, 0x02	; 2
    1dae:	9f 93       	push	r25
    1db0:	8f 93       	push	r24
    1db2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,17);
    1db6:	61 e1       	ldi	r22, 0x11	; 17
    1db8:	70 e0       	ldi	r23, 0x00	; 0
    1dba:	8a e0       	ldi	r24, 0x0A	; 10
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (1)/(2) To Select Multi-Player Game"));
    1dc2:	80 ef       	ldi	r24, 0xF0	; 240
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	9f 93       	push	r25
    1dc8:	8f 93       	push	r24
    1dca:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,18);
    1dce:	62 e1       	ldi	r22, 0x12	; 18
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	8a e0       	ldi	r24, 0x0A	; 10
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (s)/(Any Button) To Start Selected Level"));
    1dda:	81 ec       	ldi	r24, 0xC1	; 193
    1ddc:	91 e0       	ldi	r25, 0x01	; 1
    1dde:	9f 93       	push	r25
    1de0:	8f 93       	push	r24
    1de2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,19);
    1de6:	63 e1       	ldi	r22, 0x13	; 19
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	8a e0       	ldi	r24, 0x0A	; 10
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (q) To Mute Sound"));
    1df2:	89 ea       	ldi	r24, 0xA9	; 169
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	9f 93       	push	r25
    1df8:	8f 93       	push	r24
    1dfa:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
}
    1dfe:	8d b7       	in	r24, 0x3d	; 61
    1e00:	9e b7       	in	r25, 0x3e	; 62
    1e02:	0c 96       	adiw	r24, 0x0c	; 12
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	9e bf       	out	0x3e, r25	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	8d bf       	out	0x3d, r24	; 61
    1e0e:	08 95       	ret

00001e10 <print_multi_player>:

void print_multi_player(void) {
	move_terminal_cursor(10,13);
    1e10:	6d e0       	ldi	r22, 0x0D	; 13
    1e12:	70 e0       	ldi	r23, 0x00	; 0
    1e14:	8a e0       	ldi	r24, 0x0A	; 10
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	clear_to_end_of_line();
    1e1c:	0e 94 bf 14 	call	0x297e	; 0x297e <clear_to_end_of_line>
	if (get_single_player()) {
    1e20:	0e 94 32 0b 	call	0x1664	; 0x1664 <get_single_player>
    1e24:	88 23       	and	r24, r24
    1e26:	49 f0       	breq	.+18     	; 0x1e3a <print_multi_player+0x2a>
		printf_P(PSTR("Mode : Single-Player"));
    1e28:	84 e9       	ldi	r24, 0x94	; 148
    1e2a:	91 e0       	ldi	r25, 0x01	; 1
    1e2c:	9f 93       	push	r25
    1e2e:	8f 93       	push	r24
    1e30:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	08 95       	ret
	}
	else {
		printf_P(PSTR("Mode : Multi-Player"));
    1e3a:	80 e8       	ldi	r24, 0x80	; 128
    1e3c:	91 e0       	ldi	r25, 0x01	; 1
    1e3e:	9f 93       	push	r25
    1e40:	8f 93       	push	r24
    1e42:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	08 95       	ret

00001e4c <print_game_over>:
	
	print_difficulty();
}

void print_game_over(void) {
	clear_terminal();
    1e4c:	0e 94 b6 14 	call	0x296c	; 0x296c <clear_terminal>
	
	move_terminal_cursor(10,10);
    1e50:	6a e0       	ldi	r22, 0x0A	; 10
    1e52:	70 e0       	ldi	r23, 0x00	; 0
    1e54:	8a e0       	ldi	r24, 0x0A	; 10
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    1e5c:	80 ef       	ldi	r24, 0xF0	; 240
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9f 93       	push	r25
    1e62:	8f 93       	push	r24
    1e64:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,11);
    1e68:	6b e0       	ldi	r22, 0x0B	; 11
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	8a e0       	ldi	r24, 0x0A	; 10
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	
	switch (get_game_winner()) {
    1e74:	0e 94 8d 0b 	call	0x171a	; 0x171a <get_game_winner>
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	80 34       	cpi	r24, 0x40	; 64
    1e7e:	19 f0       	breq	.+6      	; 0x1e86 <print_game_over+0x3a>
    1e80:	80 35       	cpi	r24, 0x50	; 80
    1e82:	51 f0       	breq	.+20     	; 0x1e98 <print_game_over+0x4c>
    1e84:	11 c0       	rjmp	.+34     	; 0x1ea8 <print_game_over+0x5c>
		case PLAYER_1:
			printf("Player 1 Wins!");
    1e86:	8d e1       	ldi	r24, 0x1D	; 29
    1e88:	95 e0       	ldi	r25, 0x05	; 5
    1e8a:	9f 93       	push	r25
    1e8c:	8f 93       	push	r24
    1e8e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
			break;
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	08 c0       	rjmp	.+16     	; 0x1ea8 <print_game_over+0x5c>
		case PLAYER_2:
			printf("Player 2 Wins!");
    1e98:	8c e2       	ldi	r24, 0x2C	; 44
    1e9a:	95 e0       	ldi	r25, 0x05	; 5
    1e9c:	9f 93       	push	r25
    1e9e:	8f 93       	push	r24
    1ea0:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
			break;
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
	};
	
	move_terminal_cursor(10,13);
    1ea8:	6d e0       	ldi	r22, 0x0D	; 13
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	8a e0       	ldi	r24, 0x0A	; 10
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (s)/(Any Button) To Start New Game"));
    1eb4:	87 ec       	ldi	r24, 0xC7	; 199
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9f 93       	push	r25
    1eba:	8f 93       	push	r24
    1ebc:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,14);
    1ec0:	6e e0       	ldi	r22, 0x0E	; 14
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	8a e0       	ldi	r24, 0x0A	; 10
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (q) To Mute Sound"));
    1ecc:	8f ea       	ldi	r24, 0xAF	; 175
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9f 93       	push	r25
    1ed2:	8f 93       	push	r24
    1ed4:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	08 95       	ret

00001ee2 <handle_game_over>:
			}
		}
	}
}

void handle_game_over() {
    1ee2:	cf 93       	push	r28
	play_melody(gameover_sound, 17);
    1ee4:	61 e1       	ldi	r22, 0x11	; 17
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	94 e0       	ldi	r25, 0x04	; 4
    1eea:	0e 94 99 03 	call	0x732	; 0x732 <play_melody>
	play_game_over_anim();
    1eee:	0e 94 61 02 	call	0x4c2	; 0x4c2 <play_game_over_anim>
	print_game_over();
    1ef2:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <print_game_over>

	char serial_input = get_serial();
    1ef6:	0e 94 83 13 	call	0x2706	; 0x2706 <get_serial>
    1efa:	c8 2f       	mov	r28, r24
	
	while(handle_restart_wait(serial_input)) {
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <handle_game_over+0x32>
		serial_input = get_serial();
    1efe:	0e 94 83 13 	call	0x2706	; 0x2706 <get_serial>
    1f02:	c8 2f       	mov	r28, r24
		
		// Handle audio output change
		if (handle_audio_input(serial_input)) {
    1f04:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <handle_audio_input>
    1f08:	88 23       	and	r24, r24
    1f0a:	21 f0       	breq	.+8      	; 0x1f14 <handle_game_over+0x32>
			set_game_mute_flag(get_mute_tone());
    1f0c:	0e 94 bc 04 	call	0x978	; 0x978 <get_mute_tone>
    1f10:	0e 94 e5 04 	call	0x9ca	; 0x9ca <set_game_mute_flag>
	play_game_over_anim();
	print_game_over();

	char serial_input = get_serial();
	
	while(handle_restart_wait(serial_input)) {
    1f14:	8c 2f       	mov	r24, r28
    1f16:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <handle_restart_wait>
    1f1a:	81 11       	cpse	r24, r1
    1f1c:	f0 cf       	rjmp	.-32     	; 0x1efe <handle_game_over+0x1c>
		if (handle_audio_input(serial_input)) {
			set_game_mute_flag(get_mute_tone());
		}
	}
	
	stop_animations();
    1f1e:	0e 94 6d 02 	call	0x4da	; 0x4da <stop_animations>
}
    1f22:	cf 91       	pop	r28
    1f24:	08 95       	ret

00001f26 <print_difficulty>:
	
	move_terminal_cursor(10,14);
	printf_P(PSTR("Press (q) To Mute Sound"));
}

void print_difficulty(void) {
    1f26:	cf 93       	push	r28
	uint8_t difficulty_num = get_game_difficulty();
    1f28:	0e 94 0c 0b 	call	0x1618	; 0x1618 <get_game_difficulty>
    1f2c:	c8 2f       	mov	r28, r24
	
	move_terminal_cursor(10,11);
    1f2e:	6b e0       	ldi	r22, 0x0B	; 11
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	8a e0       	ldi	r24, 0x0A	; 10
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	clear_to_end_of_line();
    1f3a:	0e 94 bf 14 	call	0x297e	; 0x297e <clear_to_end_of_line>
	
	switch (difficulty_num) {
    1f3e:	cd 32       	cpi	r28, 0x2D	; 45
    1f40:	f1 f0       	breq	.+60     	; 0x1f7e <print_difficulty+0x58>
    1f42:	ca 35       	cpi	r28, 0x5A	; 90
    1f44:	99 f0       	breq	.+38     	; 0x1f6c <print_difficulty+0x46>
    1f46:	c1 11       	cpse	r28, r1
    1f48:	22 c0       	rjmp	.+68     	; 0x1f8e <print_difficulty+0x68>
		case EASY:
			printf("Difficulty: Easy");
    1f4a:	8b e3       	ldi	r24, 0x3B	; 59
    1f4c:	95 e0       	ldi	r25, 0x05	; 5
    1f4e:	9f 93       	push	r25
    1f50:	8f 93       	push	r24
    1f52:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
			move_terminal_cursor(17,0);
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	81 e1       	ldi	r24, 0x11	; 17
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
			clear_to_end_of_line();
    1f62:	0e 94 bf 14 	call	0x297e	; 0x297e <clear_to_end_of_line>
			break;
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	11 c0       	rjmp	.+34     	; 0x1f8e <print_difficulty+0x68>
		case MEDIUM:
			printf("Difficulty: Medium");
    1f6c:	8c e4       	ldi	r24, 0x4C	; 76
    1f6e:	95 e0       	ldi	r25, 0x05	; 5
    1f70:	9f 93       	push	r25
    1f72:	8f 93       	push	r24
    1f74:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
			break;
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	08 c0       	rjmp	.+16     	; 0x1f8e <print_difficulty+0x68>
		case HARD:
			printf("Difficulty: Hard");
    1f7e:	8f e5       	ldi	r24, 0x5F	; 95
    1f80:	95 e0       	ldi	r25, 0x05	; 5
    1f82:	9f 93       	push	r25
    1f84:	8f 93       	push	r24
    1f86:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
			break;
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
	}
}
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <print_start_game>:
	}

}

void print_start_game(void) {
	clear_terminal();
    1f92:	0e 94 b6 14 	call	0x296c	; 0x296c <clear_terminal>
		
	move_terminal_cursor(0, 0);
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	70 e0       	ldi	r23, 0x00	; 0
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Time Remaining: "));
    1fa2:	8f e6       	ldi	r24, 0x6F	; 111
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	9f 93       	push	r25
    1fa8:	8f 93       	push	r24
    1faa:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,10);
    1fae:	6a e0       	ldi	r22, 0x0A	; 10
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	8a e0       	ldi	r24, 0x0A	; 10
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("GAME START"));
    1fba:	84 e6       	ldi	r24, 0x64	; 100
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	9f 93       	push	r25
    1fc0:	8f 93       	push	r24
    1fc2:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,12);
    1fc6:	6c e0       	ldi	r22, 0x0C	; 12
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	8a e0       	ldi	r24, 0x0A	; 10
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Dice: Stopped"));
    1fd2:	86 e5       	ldi	r24, 0x56	; 86
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	9f 93       	push	r25
    1fd8:	8f 93       	push	r24
    1fda:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
		
	
	move_terminal_cursor(10,13);
    1fde:	6d e0       	ldi	r22, 0x0D	; 13
    1fe0:	70 e0       	ldi	r23, 0x00	; 0
    1fe2:	8a e0       	ldi	r24, 0x0A	; 10
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf("Dice Number: %d", 0);
    1fea:	1f 92       	push	r1
    1fec:	1f 92       	push	r1
    1fee:	80 e7       	ldi	r24, 0x70	; 112
    1ff0:	95 e0       	ldi	r25, 0x05	; 5
    1ff2:	9f 93       	push	r25
    1ff4:	8f 93       	push	r24
    1ff6:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
	
	move_terminal_cursor(10,15);
    1ffa:	6f e0       	ldi	r22, 0x0F	; 15
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	8a e0       	ldi	r24, 0x0A	; 10
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (e)/(m)/(h) To Select Difficulty"));
    2006:	8f e2       	ldi	r24, 0x2F	; 47
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	9f 93       	push	r25
    200c:	8f 93       	push	r24
    200e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,16);
    2012:	60 e1       	ldi	r22, 0x10	; 16
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	8a e0       	ldi	r24, 0x0A	; 10
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (p)/(B3) To Pause Game"));
    201e:	82 e1       	ldi	r24, 0x12	; 18
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	9f 93       	push	r25
    2024:	8f 93       	push	r24
    2026:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	move_terminal_cursor(10,17);
    202a:	61 e1       	ldi	r22, 0x11	; 17
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	8a e0       	ldi	r24, 0x0A	; 10
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf_P(PSTR("Press (q) To Mute Sound"));
    2036:	8a ef       	ldi	r24, 0xFA	; 250
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	9f 93       	push	r25
    203c:	8f 93       	push	r24
    203e:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
	
	print_difficulty();
    2042:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <print_difficulty>
}
    2046:	8d b7       	in	r24, 0x3d	; 61
    2048:	9e b7       	in	r25, 0x3e	; 62
    204a:	40 96       	adiw	r24, 0x10	; 16
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	9e bf       	out	0x3e, r25	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	8d bf       	out	0x3d, r24	; 61
    2056:	08 95       	ret

00002058 <new_game>:
			set_game_mute_flag(get_mute_tone());
		}
	}
}

void new_game(void) {
    2058:	cf 93       	push	r28
	sevenseg_display_digit(0,0);
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <sevenseg_display_digit>
	
	// Clear the serial terminal
	print_new_game();
    2062:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <print_new_game>
	print_multi_player();
    2066:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <print_multi_player>
	
	//Set game board to default level.
	init_game_board(GAMEBOARD_1);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <init_game_board>
	
	move_terminal_cursor(10,12);
    2070:	6c e0       	ldi	r22, 0x0C	; 12
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	8a e0       	ldi	r24, 0x0A	; 10
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	printf("Level: %d", GAMEBOARD_1);
    207c:	1f 92       	push	r1
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	8f 93       	push	r24
    2082:	83 e1       	ldi	r24, 0x13	; 19
    2084:	95 e0       	ldi	r25, 0x05	; 5
    2086:	9f 93       	push	r25
    2088:	8f 93       	push	r24
    208a:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>

	print_difficulty();
    208e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <print_difficulty>
	
	char serial_input = get_serial();
    2092:	0e 94 83 13 	call	0x2706	; 0x2706 <get_serial>
    2096:	c8 2f       	mov	r28, r24
	
	while(handle_restart_wait(serial_input)) {
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	14 c0       	rjmp	.+40     	; 0x20ca <new_game+0x72>
		serial_input = get_serial();
    20a2:	0e 94 83 13 	call	0x2706	; 0x2706 <get_serial>
    20a6:	c8 2f       	mov	r28, r24
		
		handle_audio_input(serial_input);
    20a8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <handle_audio_input>
		handle_board_change_input(serial_input);
    20ac:	8c 2f       	mov	r24, r28
    20ae:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <handle_board_change_input>
		
		if (handle_multi_player_input(serial_input)) {
    20b2:	8c 2f       	mov	r24, r28
    20b4:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <handle_multi_player_input>
    20b8:	81 11       	cpse	r24, r1
			print_multi_player();
    20ba:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <print_multi_player>
		}
		
		if (handle_difficulty_input(serial_input)) {
    20be:	8c 2f       	mov	r24, r28
    20c0:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <handle_difficulty_input>
    20c4:	81 11       	cpse	r24, r1
			print_difficulty();
    20c6:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <print_difficulty>

	print_difficulty();
	
	char serial_input = get_serial();
	
	while(handle_restart_wait(serial_input)) {
    20ca:	8c 2f       	mov	r24, r28
    20cc:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <handle_restart_wait>
    20d0:	81 11       	cpse	r24, r1
    20d2:	e7 cf       	rjmp	.-50     	; 0x20a2 <new_game+0x4a>
		if (handle_difficulty_input(serial_input)) {
			print_difficulty();
		}
	}
	
	print_start_game();
    20d4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <print_start_game>
	
	// Initialise the game and display
	init_game();
    20d8:	0e 94 46 06 	call	0xc8c	; 0xc8c <init_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void) button_pushed();
    20dc:	0e 94 80 02 	call	0x500	; 0x500 <button_pushed>
	clear_serial_input_buffer();
    20e0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <clear_serial_input_buffer>
}
    20e4:	cf 91       	pop	r28
    20e6:	08 95       	ret

000020e8 <print_difficulty_time>:
			printf("Difficulty: Hard");
			break;
	}
}

void print_difficulty_time(uint16_t player_time) {
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	8c 01       	movw	r16, r24
	uint16_t difficulty_num = get_game_difficulty();
    20f2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <get_game_difficulty>
	uint16_t time_remaining = (difficulty_num * 100) - player_time;
    20f6:	24 e6       	ldi	r18, 0x64	; 100
    20f8:	82 9f       	mul	r24, r18
    20fa:	c0 01       	movw	r24, r0
    20fc:	11 24       	eor	r1, r1
    20fe:	ec 01       	movw	r28, r24
    2100:	c0 1b       	sub	r28, r16
    2102:	d1 0b       	sbc	r29, r17
	
	move_terminal_cursor(17,0);
    2104:	60 e0       	ldi	r22, 0x00	; 0
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	81 e1       	ldi	r24, 0x11	; 17
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	clear_to_end_of_line();
    2110:	0e 94 bf 14 	call	0x297e	; 0x297e <clear_to_end_of_line>
	
	if (time_remaining > 1000)	{
    2114:	c9 3e       	cpi	r28, 0xE9	; 233
    2116:	83 e0       	ldi	r24, 0x03	; 3
    2118:	d8 07       	cpc	r29, r24
    211a:	c0 f0       	brcs	.+48     	; 0x214c <print_difficulty_time+0x64>
		printf("%d", time_remaining / 100);
    211c:	9e 01       	movw	r18, r28
    211e:	36 95       	lsr	r19
    2120:	27 95       	ror	r18
    2122:	36 95       	lsr	r19
    2124:	27 95       	ror	r18
    2126:	ab e7       	ldi	r26, 0x7B	; 123
    2128:	b4 e1       	ldi	r27, 0x14	; 20
    212a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__umulhisi3>
    212e:	96 95       	lsr	r25
    2130:	87 95       	ror	r24
    2132:	9f 93       	push	r25
    2134:	8f 93       	push	r24
    2136:	8a e1       	ldi	r24, 0x1A	; 26
    2138:	95 e0       	ldi	r25, 0x05	; 5
    213a:	9f 93       	push	r25
    213c:	8f 93       	push	r24
    213e:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	2d c0       	rjmp	.+90     	; 0x21a6 <print_difficulty_time+0xbe>
	}
	else if (time_remaining >= 0 && time_remaining <= 1000)	{
    214c:	c9 3e       	cpi	r28, 0xE9	; 233
    214e:	23 e0       	ldi	r18, 0x03	; 3
    2150:	d2 07       	cpc	r29, r18
    2152:	48 f5       	brcc	.+82     	; 0x21a6 <print_difficulty_time+0xbe>
		printf("%d:%d", time_remaining / 100, time_remaining % 100);
    2154:	ae 01       	movw	r20, r28
    2156:	56 95       	lsr	r21
    2158:	47 95       	ror	r20
    215a:	56 95       	lsr	r21
    215c:	47 95       	ror	r20
    215e:	9a 01       	movw	r18, r20
    2160:	ab e7       	ldi	r26, 0x7B	; 123
    2162:	b4 e1       	ldi	r27, 0x14	; 20
    2164:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__umulhisi3>
    2168:	96 95       	lsr	r25
    216a:	87 95       	ror	r24
    216c:	64 e6       	ldi	r22, 0x64	; 100
    216e:	68 9f       	mul	r22, r24
    2170:	90 01       	movw	r18, r0
    2172:	69 9f       	mul	r22, r25
    2174:	30 0d       	add	r19, r0
    2176:	11 24       	eor	r1, r1
    2178:	c2 1b       	sub	r28, r18
    217a:	d3 0b       	sbc	r29, r19
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	9a 01       	movw	r18, r20
    2182:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__umulhisi3>
    2186:	96 95       	lsr	r25
    2188:	87 95       	ror	r24
    218a:	9f 93       	push	r25
    218c:	8f 93       	push	r24
    218e:	80 e8       	ldi	r24, 0x80	; 128
    2190:	95 e0       	ldi	r25, 0x05	; 5
    2192:	9f 93       	push	r25
    2194:	8f 93       	push	r24
    2196:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
	}
}
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	08 95       	ret

000021b0 <print_paused>:

void print_paused(uint8_t paused) {
    21b0:	cf 93       	push	r28
    21b2:	c8 2f       	mov	r28, r24
	move_terminal_cursor(10,10);
    21b4:	6a e0       	ldi	r22, 0x0A	; 10
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	8a e0       	ldi	r24, 0x0A	; 10
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
	clear_to_end_of_line();
    21c0:	0e 94 bf 14 	call	0x297e	; 0x297e <clear_to_end_of_line>
	
	switch (paused) {
    21c4:	cc 23       	and	r28, r28
    21c6:	19 f0       	breq	.+6      	; 0x21ce <print_paused+0x1e>
    21c8:	c1 30       	cpi	r28, 0x01	; 1
    21ca:	51 f0       	breq	.+20     	; 0x21e0 <print_paused+0x30>
    21cc:	11 c0       	rjmp	.+34     	; 0x21f0 <print_paused+0x40>
		case 0:		
			printf_P(PSTR("GAME START"));
    21ce:	84 ea       	ldi	r24, 0xA4	; 164
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9f 93       	push	r25
    21d4:	8f 93       	push	r24
    21d6:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
			break;
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	08 c0       	rjmp	.+16     	; 0x21f0 <print_paused+0x40>
		case 1:
			printf_P(PSTR("GAME PAUSED"));
    21e0:	88 e9       	ldi	r24, 0x98	; 152
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
			break;
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
	}

    21f0:	cf 91       	pop	r28
    21f2:	08 95       	ret

000021f4 <play_game>:
	// (The cast to void means the return value is ignored.)
	(void) button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
    21f4:	2f 92       	push	r2
    21f6:	3f 92       	push	r3
    21f8:	4f 92       	push	r4
    21fa:	5f 92       	push	r5
    21fc:	6f 92       	push	r6
    21fe:	7f 92       	push	r7
    2200:	8f 92       	push	r8
    2202:	9f 92       	push	r9
    2204:	af 92       	push	r10
    2206:	bf 92       	push	r11
    2208:	cf 92       	push	r12
    220a:	df 92       	push	r13
    220c:	ef 92       	push	r14
    220e:	ff 92       	push	r15
    2210:	0f 93       	push	r16
    2212:	1f 93       	push	r17
    2214:	cf 93       	push	r28
    2216:	df 93       	push	r29
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	65 97       	sbiw	r28, 0x15	; 21
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
	uint16_t joystick_delay = 0;
	uint8_t button_input;
	uint8_t dice_num = 0;
	uint8_t pause_flag = 0;
	uint8_t current_player_num = PLAYER_1;	
	int8_t current_player_dx = 0;
    2228:	19 82       	std	Y+1, r1	; 0x01
	int8_t current_player_dy = 0;
    222a:	1a 82       	std	Y+2, r1	; 0x02
	char serial_input;
	
	pause_start_time = 0;
	pause_delta_time = 0;
	
	last_flash_time = get_current_time();
    222c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
    2230:	4b 01       	movw	r8, r22
    2232:	5c 01       	movw	r10, r24
	last_dice_time = get_current_time();
    2234:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
    2238:	68 87       	std	Y+8, r22	; 0x08
    223a:	79 87       	std	Y+9, r23	; 0x09
    223c:	8a 87       	std	Y+10, r24	; 0x0a
    223e:	9b 87       	std	Y+11, r25	; 0x0b
	last_difficulty_time = get_current_time();
    2240:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
    2244:	6c 83       	std	Y+4, r22	; 0x04
    2246:	7d 83       	std	Y+5, r23	; 0x05
    2248:	8e 83       	std	Y+6, r24	; 0x06
    224a:	9f 83       	std	Y+7, r25	; 0x07
	joystick_time = get_current_time();
    224c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
    2250:	6e 87       	std	Y+14, r22	; 0x0e
    2252:	7f 87       	std	Y+15, r23	; 0x0f
    2254:	88 8b       	std	Y+16, r24	; 0x10
    2256:	99 8b       	std	Y+17, r25	; 0x11
	uint32_t last_flash_time, last_dice_time, last_difficulty_time, pause_start_time, pause_delta_time, joystick_time, current_time;
	uint16_t joystick_delay = 0;
	uint8_t button_input;
	uint8_t dice_num = 0;
	uint8_t pause_flag = 0;
	uint8_t current_player_num = PLAYER_1;	
    2258:	68 94       	set
    225a:	22 24       	eor	r2, r2
    225c:	26 f8       	bld	r2, 6
void play_game(void) {
	uint32_t last_flash_time, last_dice_time, last_difficulty_time, pause_start_time, pause_delta_time, joystick_time, current_time;
	uint16_t joystick_delay = 0;
	uint8_t button_input;
	uint8_t dice_num = 0;
	uint8_t pause_flag = 0;
    225e:	31 2c       	mov	r3, r1

void play_game(void) {
	uint32_t last_flash_time, last_dice_time, last_difficulty_time, pause_start_time, pause_delta_time, joystick_time, current_time;
	uint16_t joystick_delay = 0;
	uint8_t button_input;
	uint8_t dice_num = 0;
    2260:	1b 82       	std	Y+3, r1	; 0x03
	clear_serial_input_buffer();
}

void play_game(void) {
	uint32_t last_flash_time, last_dice_time, last_difficulty_time, pause_start_time, pause_delta_time, joystick_time, current_time;
	uint16_t joystick_delay = 0;
    2262:	1d 86       	std	Y+13, r1	; 0x0d
    2264:	1c 86       	std	Y+12, r1	; 0x0c
	int8_t current_player_dx = 0;
	int8_t current_player_dy = 0;
	char serial_input;
	
	pause_start_time = 0;
	pause_delta_time = 0;
    2266:	41 2c       	mov	r4, r1
    2268:	51 2c       	mov	r5, r1
    226a:	32 01       	movw	r6, r4
	uint8_t current_player_num = PLAYER_1;	
	int8_t current_player_dx = 0;
	int8_t current_player_dy = 0;
	char serial_input;
	
	pause_start_time = 0;
    226c:	1a 8a       	std	Y+18, r1	; 0x12
    226e:	1b 8a       	std	Y+19, r1	; 0x13
    2270:	1c 8a       	std	Y+20, r1	; 0x14
    2272:	1d 8a       	std	Y+21, r1	; 0x15
	last_dice_time = get_current_time();
	last_difficulty_time = get_current_time();
	joystick_time = get_current_time();
	
	// Loop game until game over is triggered
	while(!is_game_over()) {
    2274:	66 c1       	rjmp	.+716    	; 0x2542 <play_game+0x34e>
		// Check if any button has been pushed
		button_input = button_pushed();
    2276:	0e 94 80 02 	call	0x500	; 0x500 <button_pushed>
    227a:	08 2f       	mov	r16, r24
		// Read serial input from terminal
		serial_input = get_serial();
    227c:	0e 94 83 13 	call	0x2706	; 0x2706 <get_serial>
    2280:	18 2f       	mov	r17, r24
		// Set current time in ms
		current_time = get_current_time();
    2282:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
    2286:	6b 01       	movw	r12, r22
    2288:	7c 01       	movw	r14, r24
		
		// Handle game pause conditions
		if (handle_pause_input(serial_input, button_input)) {
    228a:	60 2f       	mov	r22, r16
    228c:	81 2f       	mov	r24, r17
    228e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <handle_pause_input>
    2292:	88 23       	and	r24, r24
    2294:	19 f1       	breq	.+70     	; 0x22dc <play_game+0xe8>
			pause_flag = 1 - pause_flag;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	83 19       	sub	r24, r3
    229a:	38 2e       	mov	r3, r24
			print_paused(pause_flag);
    229c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <print_paused>
			
			if (pause_flag) {
    22a0:	33 20       	and	r3, r3
    22a2:	59 f0       	breq	.+22     	; 0x22ba <play_game+0xc6>
				pause_start_time = current_time;
				pause_animations(1);
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <pause_animations>
				set_mute_tone(1);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 bf 04 	call	0x97e	; 0x97e <set_mute_tone>
		if (handle_pause_input(serial_input, button_input)) {
			pause_flag = 1 - pause_flag;
			print_paused(pause_flag);
			
			if (pause_flag) {
				pause_start_time = current_time;
    22b0:	ca 8a       	std	Y+18, r12	; 0x12
    22b2:	db 8a       	std	Y+19, r13	; 0x13
    22b4:	ec 8a       	std	Y+20, r14	; 0x14
    22b6:	fd 8a       	std	Y+21, r15	; 0x15
    22b8:	11 c0       	rjmp	.+34     	; 0x22dc <play_game+0xe8>
				pause_animations(1);
				set_mute_tone(1);
			}
			else {
				pause_delta_time = current_time - pause_start_time;
    22ba:	26 01       	movw	r4, r12
    22bc:	37 01       	movw	r6, r14
    22be:	8a 89       	ldd	r24, Y+18	; 0x12
    22c0:	9b 89       	ldd	r25, Y+19	; 0x13
    22c2:	ac 89       	ldd	r26, Y+20	; 0x14
    22c4:	bd 89       	ldd	r27, Y+21	; 0x15
    22c6:	48 1a       	sub	r4, r24
    22c8:	59 0a       	sbc	r5, r25
    22ca:	6a 0a       	sbc	r6, r26
    22cc:	7b 0a       	sbc	r7, r27
				set_mute_tone(get_game_mute_flag());
    22ce:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_game_mute_flag>
    22d2:	0e 94 bf 04 	call	0x97e	; 0x97e <set_mute_tone>
				pause_animations(0);
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <pause_animations>
			}
		}
		
		if (!pause_flag) {
    22dc:	31 10       	cpse	r3, r1
    22de:	31 c1       	rjmp	.+610    	; 0x2542 <play_game+0x34e>
			sevenseg_display_digit(get_player_turns() % 10, dice_num);
    22e0:	0e 94 13 07 	call	0xe26	; 0xe26 <get_player_turns>
    22e4:	9d ec       	ldi	r25, 0xCD	; 205
    22e6:	89 9f       	mul	r24, r25
    22e8:	91 2d       	mov	r25, r1
    22ea:	11 24       	eor	r1, r1
    22ec:	96 95       	lsr	r25
    22ee:	96 95       	lsr	r25
    22f0:	96 95       	lsr	r25
    22f2:	99 0f       	add	r25, r25
    22f4:	29 2f       	mov	r18, r25
    22f6:	22 0f       	add	r18, r18
    22f8:	22 0f       	add	r18, r18
    22fa:	92 0f       	add	r25, r18
    22fc:	6b 81       	ldd	r22, Y+3	; 0x03
    22fe:	89 1b       	sub	r24, r25
    2300:	0e 94 64 14 	call	0x28c8	; 0x28c8 <sevenseg_display_digit>
			
			// Handle audio output change
			if (handle_audio_input(serial_input)) {
    2304:	81 2f       	mov	r24, r17
    2306:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <handle_audio_input>
    230a:	88 23       	and	r24, r24
    230c:	21 f0       	breq	.+8      	; 0x2316 <play_game+0x122>
				set_game_mute_flag(get_mute_tone());
    230e:	0e 94 bc 04 	call	0x978	; 0x978 <get_mute_tone>
    2312:	0e 94 e5 04 	call	0x9ca	; 0x9ca <set_game_mute_flag>
			}
			
			// Handle difficulty change
			if (handle_difficulty_input(serial_input)) {
    2316:	81 2f       	mov	r24, r17
    2318:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <handle_difficulty_input>
    231c:	81 11       	cpse	r24, r1
				print_difficulty();
    231e:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <print_difficulty>
			}
			
			// Handle joystick movement
			if (current_time >= joystick_time + joystick_delay) {
    2322:	8e 85       	ldd	r24, Y+14	; 0x0e
    2324:	9f 85       	ldd	r25, Y+15	; 0x0f
    2326:	a8 89       	ldd	r26, Y+16	; 0x10
    2328:	b9 89       	ldd	r27, Y+17	; 0x11
    232a:	2c 85       	ldd	r18, Y+12	; 0x0c
    232c:	3d 85       	ldd	r19, Y+13	; 0x0d
    232e:	82 0f       	add	r24, r18
    2330:	93 1f       	adc	r25, r19
    2332:	a1 1d       	adc	r26, r1
    2334:	b1 1d       	adc	r27, r1
    2336:	c8 16       	cp	r12, r24
    2338:	d9 06       	cpc	r13, r25
    233a:	ea 06       	cpc	r14, r26
    233c:	fb 06       	cpc	r15, r27
    233e:	d8 f1       	brcs	.+118    	; 0x23b6 <play_game+0x1c2>
				joystick_delay = 0;
				
				if (handle_joysick_input(&current_player_dx, &current_player_dy, current_player_num)) {
    2340:	42 2d       	mov	r20, r2
    2342:	be 01       	movw	r22, r28
    2344:	6e 5f       	subi	r22, 0xFE	; 254
    2346:	7f 4f       	sbci	r23, 0xFF	; 255
    2348:	ce 01       	movw	r24, r28
    234a:	01 96       	adiw	r24, 0x01	; 1
    234c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <handle_joysick_input>
    2350:	88 23       	and	r24, r24
    2352:	f1 f0       	breq	.+60     	; 0x2390 <play_game+0x19c>
					set_player_visibility(1, current_player_num);
    2354:	62 2d       	mov	r22, r2
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	0e 94 92 07 	call	0xf24	; 0xf24 <set_player_visibility>
					
					if (!get_single_player()) {
    235c:	0e 94 32 0b 	call	0x1664	; 0x1664 <get_single_player>
    2360:	81 11       	cpse	r24, r1
    2362:	1d c0       	rjmp	.+58     	; 0x239e <play_game+0x1aa>
						current_player_num = handle_player_num_change(current_player_num);
    2364:	82 2d       	mov	r24, r2
    2366:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <handle_player_num_change>
    236a:	28 2e       	mov	r2, r24
						joystick_delay = 800;
						set_axis_hold(0);
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	0e 94 17 0c 	call	0x182e	; 0x182e <set_axis_hold>
					}
					last_flash_time = current_time;
					last_difficulty_time = current_time;
				}
				joystick_time = current_time;
    2372:	ce 86       	std	Y+14, r12	; 0x0e
    2374:	df 86       	std	Y+15, r13	; 0x0f
    2376:	e8 8a       	std	Y+16, r14	; 0x10
    2378:	f9 8a       	std	Y+17, r15	; 0x11
						current_player_num = handle_player_num_change(current_player_num);
						joystick_delay = 800;
						set_axis_hold(0);
					}
					last_flash_time = current_time;
					last_difficulty_time = current_time;
    237a:	cc 82       	std	Y+4, r12	; 0x04
    237c:	dd 82       	std	Y+5, r13	; 0x05
    237e:	ee 82       	std	Y+6, r14	; 0x06
    2380:	ff 82       	std	Y+7, r15	; 0x07
					if (!get_single_player()) {
						current_player_num = handle_player_num_change(current_player_num);
						joystick_delay = 800;
						set_axis_hold(0);
					}
					last_flash_time = current_time;
    2382:	46 01       	movw	r8, r12
    2384:	57 01       	movw	r10, r14
				if (handle_joysick_input(&current_player_dx, &current_player_dy, current_player_num)) {
					set_player_visibility(1, current_player_num);
					
					if (!get_single_player()) {
						current_player_num = handle_player_num_change(current_player_num);
						joystick_delay = 800;
    2386:	80 e2       	ldi	r24, 0x20	; 32
    2388:	93 e0       	ldi	r25, 0x03	; 3
    238a:	9d 87       	std	Y+13, r25	; 0x0d
    238c:	8c 87       	std	Y+12, r24	; 0x0c
    238e:	13 c0       	rjmp	.+38     	; 0x23b6 <play_game+0x1c2>
						set_axis_hold(0);
					}
					last_flash_time = current_time;
					last_difficulty_time = current_time;
				}
				joystick_time = current_time;
    2390:	ce 86       	std	Y+14, r12	; 0x0e
    2392:	df 86       	std	Y+15, r13	; 0x0f
    2394:	e8 8a       	std	Y+16, r14	; 0x10
    2396:	f9 8a       	std	Y+17, r15	; 0x11
				print_difficulty();
			}
			
			// Handle joystick movement
			if (current_time >= joystick_time + joystick_delay) {
				joystick_delay = 0;
    2398:	1d 86       	std	Y+13, r1	; 0x0d
    239a:	1c 86       	std	Y+12, r1	; 0x0c
    239c:	0c c0       	rjmp	.+24     	; 0x23b6 <play_game+0x1c2>
						set_axis_hold(0);
					}
					last_flash_time = current_time;
					last_difficulty_time = current_time;
				}
				joystick_time = current_time;
    239e:	ce 86       	std	Y+14, r12	; 0x0e
    23a0:	df 86       	std	Y+15, r13	; 0x0f
    23a2:	e8 8a       	std	Y+16, r14	; 0x10
    23a4:	f9 8a       	std	Y+17, r15	; 0x11
						current_player_num = handle_player_num_change(current_player_num);
						joystick_delay = 800;
						set_axis_hold(0);
					}
					last_flash_time = current_time;
					last_difficulty_time = current_time;
    23a6:	cc 82       	std	Y+4, r12	; 0x04
    23a8:	dd 82       	std	Y+5, r13	; 0x05
    23aa:	ee 82       	std	Y+6, r14	; 0x06
    23ac:	ff 82       	std	Y+7, r15	; 0x07
					if (!get_single_player()) {
						current_player_num = handle_player_num_change(current_player_num);
						joystick_delay = 800;
						set_axis_hold(0);
					}
					last_flash_time = current_time;
    23ae:	46 01       	movw	r8, r12
    23b0:	57 01       	movw	r10, r14
				print_difficulty();
			}
			
			// Handle joystick movement
			if (current_time >= joystick_time + joystick_delay) {
				joystick_delay = 0;
    23b2:	1d 86       	std	Y+13, r1	; 0x0d
    23b4:	1c 86       	std	Y+12, r1	; 0x0c
				}
				joystick_time = current_time;
			}
		
			// Handle IO board button input
			if (handle_button_input(button_input, current_player_num)) {
    23b6:	62 2d       	mov	r22, r2
    23b8:	80 2f       	mov	r24, r16
    23ba:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <handle_button_input>
    23be:	88 23       	and	r24, r24
    23c0:	c9 f0       	breq	.+50     	; 0x23f4 <play_game+0x200>
				set_player_visibility(1, current_player_num);
    23c2:	62 2d       	mov	r22, r2
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	0e 94 92 07 	call	0xf24	; 0xf24 <set_player_visibility>
				if (!get_single_player()) current_player_num = handle_player_num_change(current_player_num);
    23ca:	0e 94 32 0b 	call	0x1664	; 0x1664 <get_single_player>
    23ce:	81 11       	cpse	r24, r1
    23d0:	0b c0       	rjmp	.+22     	; 0x23e8 <play_game+0x1f4>
    23d2:	82 2d       	mov	r24, r2
    23d4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <handle_player_num_change>
    23d8:	28 2e       	mov	r2, r24
				last_flash_time = current_time;
				last_difficulty_time = current_time;
    23da:	cc 82       	std	Y+4, r12	; 0x04
    23dc:	dd 82       	std	Y+5, r13	; 0x05
    23de:	ee 82       	std	Y+6, r14	; 0x06
    23e0:	ff 82       	std	Y+7, r15	; 0x07
		
			// Handle IO board button input
			if (handle_button_input(button_input, current_player_num)) {
				set_player_visibility(1, current_player_num);
				if (!get_single_player()) current_player_num = handle_player_num_change(current_player_num);
				last_flash_time = current_time;
    23e2:	46 01       	movw	r8, r12
    23e4:	57 01       	movw	r10, r14
    23e6:	06 c0       	rjmp	.+12     	; 0x23f4 <play_game+0x200>
				last_difficulty_time = current_time;
    23e8:	cc 82       	std	Y+4, r12	; 0x04
    23ea:	dd 82       	std	Y+5, r13	; 0x05
    23ec:	ee 82       	std	Y+6, r14	; 0x06
    23ee:	ff 82       	std	Y+7, r15	; 0x07
		
			// Handle IO board button input
			if (handle_button_input(button_input, current_player_num)) {
				set_player_visibility(1, current_player_num);
				if (!get_single_player()) current_player_num = handle_player_num_change(current_player_num);
				last_flash_time = current_time;
    23f0:	46 01       	movw	r8, r12
    23f2:	57 01       	movw	r10, r14
				last_difficulty_time = current_time;
			}
			
			// Handle serial terminal input
			if (handle_serial_input(serial_input, current_player_num)) {
    23f4:	62 2d       	mov	r22, r2
    23f6:	81 2f       	mov	r24, r17
    23f8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <handle_serial_input>
    23fc:	88 23       	and	r24, r24
    23fe:	51 f0       	breq	.+20     	; 0x2414 <play_game+0x220>
				set_player_visibility(1, current_player_num);
    2400:	62 2d       	mov	r22, r2
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	0e 94 92 07 	call	0xf24	; 0xf24 <set_player_visibility>
				last_flash_time = current_time;
				last_difficulty_time = current_time;
    2408:	cc 82       	std	Y+4, r12	; 0x04
    240a:	dd 82       	std	Y+5, r13	; 0x05
    240c:	ee 82       	std	Y+6, r14	; 0x06
    240e:	ff 82       	std	Y+7, r15	; 0x07
			}
			
			// Handle serial terminal input
			if (handle_serial_input(serial_input, current_player_num)) {
				set_player_visibility(1, current_player_num);
				last_flash_time = current_time;
    2410:	46 01       	movw	r8, r12
    2412:	57 01       	movw	r10, r14
				last_difficulty_time = current_time;
			}
			
			// When the dice roll finishes generate random number and print to terminal 
			if (get_dice_roll_finish()) {
    2414:	0e 94 5e 05 	call	0xabc	; 0xabc <get_dice_roll_finish>
    2418:	88 23       	and	r24, r24
    241a:	99 f1       	breq	.+102    	; 0x2482 <play_game+0x28e>
				dice_num = dice_roll_rand();
    241c:	0e 94 70 05 	call	0xae0	; 0xae0 <dice_roll_rand>
    2420:	8b 83       	std	Y+3, r24	; 0x03
			
				move_terminal_cursor(10,13);
    2422:	6d e0       	ldi	r22, 0x0D	; 13
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	8a e0       	ldi	r24, 0x0A	; 10
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
				printf("Dice Number: %d", dice_num);
    242e:	1f 92       	push	r1
    2430:	9b 81       	ldd	r25, Y+3	; 0x03
    2432:	9f 93       	push	r25
    2434:	80 e7       	ldi	r24, 0x70	; 112
    2436:	95 e0       	ldi	r25, 0x05	; 5
    2438:	9f 93       	push	r25
    243a:	8f 93       	push	r24
    243c:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
			
				move_player_n(dice_num, current_player_num);
    2440:	62 2d       	mov	r22, r2
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	0e 94 85 09 	call	0x130a	; 0x130a <move_player_n>
				set_player_visibility(1, current_player_num);
    2448:	62 2d       	mov	r22, r2
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	0e 94 92 07 	call	0xf24	; 0xf24 <set_player_visibility>
			
				if (!get_single_player()) current_player_num = handle_player_num_change(current_player_num);
    2450:	0e 94 32 0b 	call	0x1664	; 0x1664 <get_single_player>
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	81 11       	cpse	r24, r1
    245e:	0b c0       	rjmp	.+22     	; 0x2476 <play_game+0x282>
    2460:	82 2d       	mov	r24, r2
    2462:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <handle_player_num_change>
    2466:	28 2e       	mov	r2, r24
				last_flash_time = current_time;
				last_difficulty_time = current_time;
    2468:	cc 82       	std	Y+4, r12	; 0x04
    246a:	dd 82       	std	Y+5, r13	; 0x05
    246c:	ee 82       	std	Y+6, r14	; 0x06
    246e:	ff 82       	std	Y+7, r15	; 0x07
			
				move_player_n(dice_num, current_player_num);
				set_player_visibility(1, current_player_num);
			
				if (!get_single_player()) current_player_num = handle_player_num_change(current_player_num);
				last_flash_time = current_time;
    2470:	46 01       	movw	r8, r12
    2472:	57 01       	movw	r10, r14
    2474:	06 c0       	rjmp	.+12     	; 0x2482 <play_game+0x28e>
				last_difficulty_time = current_time;
    2476:	cc 82       	std	Y+4, r12	; 0x04
    2478:	dd 82       	std	Y+5, r13	; 0x05
    247a:	ee 82       	std	Y+6, r14	; 0x06
    247c:	ff 82       	std	Y+7, r15	; 0x07
			
				move_player_n(dice_num, current_player_num);
				set_player_visibility(1, current_player_num);
			
				if (!get_single_player()) current_player_num = handle_player_num_change(current_player_num);
				last_flash_time = current_time;
    247e:	46 01       	movw	r8, r12
    2480:	57 01       	movw	r10, r14
				last_difficulty_time = current_time;
			}
		
			// Decrement difficulty timer every 10ms
			if (current_time >= last_difficulty_time + 10 && get_game_difficulty() != EASY)  {
    2482:	8c 81       	ldd	r24, Y+4	; 0x04
    2484:	9d 81       	ldd	r25, Y+5	; 0x05
    2486:	ae 81       	ldd	r26, Y+6	; 0x06
    2488:	bf 81       	ldd	r27, Y+7	; 0x07
    248a:	0a 96       	adiw	r24, 0x0a	; 10
    248c:	a1 1d       	adc	r26, r1
    248e:	b1 1d       	adc	r27, r1
    2490:	c8 16       	cp	r12, r24
    2492:	d9 06       	cpc	r13, r25
    2494:	ea 06       	cpc	r14, r26
    2496:	fb 06       	cpc	r15, r27
    2498:	68 f0       	brcs	.+26     	; 0x24b4 <play_game+0x2c0>
    249a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <get_game_difficulty>
    249e:	88 23       	and	r24, r24
    24a0:	49 f0       	breq	.+18     	; 0x24b4 <play_game+0x2c0>
				print_difficulty_time(update_player_time(current_player_num));
    24a2:	82 2d       	mov	r24, r2
    24a4:	0e 94 35 0b 	call	0x166a	; 0x166a <update_player_time>
    24a8:	0e 94 74 10 	call	0x20e8	; 0x20e8 <print_difficulty_time>
				last_difficulty_time = current_time;
    24ac:	cc 82       	std	Y+4, r12	; 0x04
    24ae:	dd 82       	std	Y+5, r13	; 0x05
    24b0:	ee 82       	std	Y+6, r14	; 0x06
    24b2:	ff 82       	std	Y+7, r15	; 0x07
			}
		
			// Change dice roll every 80ms
			if (current_time >= last_dice_time + 80) {
    24b4:	88 85       	ldd	r24, Y+8	; 0x08
    24b6:	99 85       	ldd	r25, Y+9	; 0x09
    24b8:	aa 85       	ldd	r26, Y+10	; 0x0a
    24ba:	bb 85       	ldd	r27, Y+11	; 0x0b
    24bc:	80 5b       	subi	r24, 0xB0	; 176
    24be:	9f 4f       	sbci	r25, 0xFF	; 255
    24c0:	af 4f       	sbci	r26, 0xFF	; 255
    24c2:	bf 4f       	sbci	r27, 0xFF	; 255
    24c4:	c8 16       	cp	r12, r24
    24c6:	d9 06       	cpc	r13, r25
    24c8:	ea 06       	cpc	r14, r26
    24ca:	fb 06       	cpc	r15, r27
    24cc:	18 f1       	brcs	.+70     	; 0x2514 <play_game+0x320>
				if (get_dice_rolling()) {
    24ce:	0e 94 5b 05 	call	0xab6	; 0xab6 <get_dice_rolling>
    24d2:	88 23       	and	r24, r24
    24d4:	d9 f0       	breq	.+54     	; 0x250c <play_game+0x318>
					dice_num = dice_roll();
    24d6:	0e 94 63 05 	call	0xac6	; 0xac6 <dice_roll>
    24da:	8b 83       	std	Y+3, r24	; 0x03
				
					move_terminal_cursor(10,13);
    24dc:	6d e0       	ldi	r22, 0x0D	; 13
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	8a e0       	ldi	r24, 0x0A	; 10
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	0e 94 a5 14 	call	0x294a	; 0x294a <move_terminal_cursor>
					printf("Dice Number: %d", dice_num);
    24e8:	1f 92       	push	r1
    24ea:	ab 81       	ldd	r26, Y+3	; 0x03
    24ec:	af 93       	push	r26
    24ee:	80 e7       	ldi	r24, 0x70	; 112
    24f0:	95 e0       	ldi	r25, 0x05	; 5
    24f2:	9f 93       	push	r25
    24f4:	8f 93       	push	r24
    24f6:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <printf>
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
				}
				last_dice_time = current_time;
    2502:	c8 86       	std	Y+8, r12	; 0x08
    2504:	d9 86       	std	Y+9, r13	; 0x09
    2506:	ea 86       	std	Y+10, r14	; 0x0a
    2508:	fb 86       	std	Y+11, r15	; 0x0b
    250a:	04 c0       	rjmp	.+8      	; 0x2514 <play_game+0x320>
    250c:	c8 86       	std	Y+8, r12	; 0x08
    250e:	d9 86       	std	Y+9, r13	; 0x09
    2510:	ea 86       	std	Y+10, r14	; 0x0a
    2512:	fb 86       	std	Y+11, r15	; 0x0b
			}
		
			// Flash player
			if (current_time >= last_flash_time + pause_delta_time + 500) {
    2514:	d5 01       	movw	r26, r10
    2516:	c4 01       	movw	r24, r8
    2518:	84 0d       	add	r24, r4
    251a:	95 1d       	adc	r25, r5
    251c:	a6 1d       	adc	r26, r6
    251e:	b7 1d       	adc	r27, r7
    2520:	8c 50       	subi	r24, 0x0C	; 12
    2522:	9e 4f       	sbci	r25, 0xFE	; 254
    2524:	af 4f       	sbci	r26, 0xFF	; 255
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	c8 16       	cp	r12, r24
    252a:	d9 06       	cpc	r13, r25
    252c:	ea 06       	cpc	r14, r26
    252e:	fb 06       	cpc	r15, r27
    2530:	40 f0       	brcs	.+16     	; 0x2542 <play_game+0x34e>
				flash_player_cursor(current_player_num);
    2532:	82 2d       	mov	r24, r2
    2534:	0e 94 76 0a 	call	0x14ec	; 0x14ec <flash_player_cursor>
				pause_delta_time = 0;
				last_flash_time = current_time;
    2538:	46 01       	movw	r8, r12
    253a:	57 01       	movw	r10, r14
			}
		
			// Flash player
			if (current_time >= last_flash_time + pause_delta_time + 500) {
				flash_player_cursor(current_player_num);
				pause_delta_time = 0;
    253c:	41 2c       	mov	r4, r1
    253e:	51 2c       	mov	r5, r1
    2540:	32 01       	movw	r6, r4
	last_dice_time = get_current_time();
	last_difficulty_time = get_current_time();
	joystick_time = get_current_time();
	
	// Loop game until game over is triggered
	while(!is_game_over()) {
    2542:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <is_game_over>
    2546:	88 23       	and	r24, r24
    2548:	09 f4       	brne	.+2      	; 0x254c <play_game+0x358>
    254a:	95 ce       	rjmp	.-726    	; 0x2276 <play_game+0x82>
				pause_delta_time = 0;
				last_flash_time = current_time;
			}
		}
	}
}
    254c:	65 96       	adiw	r28, 0x15	; 21
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	df 90       	pop	r13
    2566:	cf 90       	pop	r12
    2568:	bf 90       	pop	r11
    256a:	af 90       	pop	r10
    256c:	9f 90       	pop	r9
    256e:	8f 90       	pop	r8
    2570:	7f 90       	pop	r7
    2572:	6f 90       	pop	r6
    2574:	5f 90       	pop	r5
    2576:	4f 90       	pop	r4
    2578:	3f 90       	pop	r3
    257a:	2f 90       	pop	r2
    257c:	08 95       	ret

0000257e <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    257e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    2582:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1) {
		new_game();
    2586:	0e 94 2c 10 	call	0x2058	; 0x2058 <new_game>
		play_game();
    258a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <play_game>
		handle_game_over();
    258e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <handle_game_over>
    2592:	f9 cf       	rjmp	.-14     	; 0x2586 <main+0x8>

00002594 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    2594:	cf 93       	push	r28
    2596:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    2598:	8a 30       	cpi	r24, 0x0A	; 10
    259a:	19 f4       	brne	.+6      	; 0x25a2 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    259c:	8d e0       	ldi	r24, 0x0D	; 13
    259e:	0e 94 ca 12 	call	0x2594	; 0x2594 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    25a2:	9f b7       	in	r25, 0x3f	; 63
    25a4:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <uart_put_char+0x18>
		if(!interrupts_enabled) {
    25a8:	99 23       	and	r25, r25
    25aa:	29 f1       	breq	.+74     	; 0x25f6 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    25ac:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <bytes_in_out_buffer>
    25b0:	8f 3f       	cpi	r24, 0xFF	; 255
    25b2:	d1 f3       	breq	.-12     	; 0x25a8 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    25b4:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    25b6:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <out_insert_pos>
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	8e 0f       	add	r24, r30
    25be:	80 93 e5 06 	sts	0x06E5, r24	; 0x8006e5 <out_insert_pos>
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	e9 51       	subi	r30, 0x19	; 25
    25c6:	f9 4f       	sbci	r31, 0xF9	; 249
    25c8:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    25ca:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <bytes_in_out_buffer>
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    25d4:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <out_insert_pos>
    25d8:	8f 3f       	cpi	r24, 0xFF	; 255
    25da:	11 f4       	brne	.+4      	; 0x25e0 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    25dc:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    25e0:	e1 ec       	ldi	r30, 0xC1	; 193
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	80 62       	ori	r24, 0x20	; 32
    25e8:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    25ea:	99 23       	and	r25, r25
    25ec:	39 f0       	breq	.+14     	; 0x25fc <uart_put_char+0x68>
		sei();
    25ee:	78 94       	sei
	}
	return 0;
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	05 c0       	rjmp	.+10     	; 0x2600 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
}
    2600:	cf 91       	pop	r28
    2602:	08 95       	ret

00002604 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    2604:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <bytes_in_input_buffer>
    2608:	88 23       	and	r24, r24
    260a:	e1 f3       	breq	.-8      	; 0x2604 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    260c:	2f b7       	in	r18, 0x3f	; 63
    260e:	20 78       	andi	r18, 0x80	; 128
	cli();
    2610:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    2612:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <input_insert_pos>
    2616:	30 91 f8 07 	lds	r19, 0x07F8	; 0x8007f8 <bytes_in_input_buffer>
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	83 1b       	sub	r24, r19
    261e:	91 09       	sbc	r25, r1
    2620:	5a f4       	brpl	.+22     	; 0x2638 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    2622:	e0 91 e6 07 	lds	r30, 0x07E6	; 0x8007e6 <input_insert_pos>
    2626:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <bytes_in_input_buffer>
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	e8 1b       	sub	r30, r24
    262e:	f1 09       	sbc	r31, r1
    2630:	e9 50       	subi	r30, 0x09	; 9
    2632:	f8 4f       	sbci	r31, 0xF8	; 248
    2634:	80 81       	ld	r24, Z
    2636:	0a c0       	rjmp	.+20     	; 0x264c <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    2638:	e0 91 e6 07 	lds	r30, 0x07E6	; 0x8007e6 <input_insert_pos>
    263c:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <bytes_in_input_buffer>
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	e8 1b       	sub	r30, r24
    2644:	f1 09       	sbc	r31, r1
    2646:	e9 51       	subi	r30, 0x19	; 25
    2648:	f8 4f       	sbci	r31, 0xF8	; 248
    264a:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    264c:	90 91 f8 07 	lds	r25, 0x07F8	; 0x8007f8 <bytes_in_input_buffer>
    2650:	91 50       	subi	r25, 0x01	; 1
    2652:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    2656:	22 23       	and	r18, r18
    2658:	09 f0       	breq	.+2      	; 0x265c <uart_get_char+0x58>
		sei();
    265a:	78 94       	sei
	}	
	return c;
}
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	08 95       	ret

00002660 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    2660:	10 92 e5 06 	sts	0x06E5, r1	; 0x8006e5 <out_insert_pos>
	bytes_in_out_buffer = 0;
    2664:	10 92 e6 06 	sts	0x06E6, r1	; 0x8006e6 <bytes_in_out_buffer>
	input_insert_pos = 0;
    2668:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <input_insert_pos>
	bytes_in_input_buffer = 0;
    266c:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <bytes_in_input_buffer>
	input_overrun = 0;
    2670:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    2674:	40 93 31 06 	sts	0x0631, r20	; 0x800631 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	aa 1f       	adc	r26, r26
    2682:	bb 1f       	adc	r27, r27
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	aa 1f       	adc	r26, r26
    268a:	bb 1f       	adc	r27, r27
    268c:	9c 01       	movw	r18, r24
    268e:	ad 01       	movw	r20, r26
    2690:	22 0f       	add	r18, r18
    2692:	33 1f       	adc	r19, r19
    2694:	44 1f       	adc	r20, r20
    2696:	55 1f       	adc	r21, r21
    2698:	60 e0       	ldi	r22, 0x00	; 0
    269a:	72 e1       	ldi	r23, 0x12	; 18
    269c:	8a e7       	ldi	r24, 0x7A	; 122
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <__divmodsi4>
    26a4:	ba 01       	movw	r22, r20
    26a6:	a9 01       	movw	r20, r18
    26a8:	4f 5f       	subi	r20, 0xFF	; 255
    26aa:	5f 4f       	sbci	r21, 0xFF	; 255
    26ac:	6f 4f       	sbci	r22, 0xFF	; 255
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	db 01       	movw	r26, r22
    26b2:	ca 01       	movw	r24, r20
    26b4:	1a f4       	brpl	.+6      	; 0x26bc <init_serial_stdio+0x5c>
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	a1 1d       	adc	r26, r1
    26ba:	b1 1d       	adc	r27, r1
    26bc:	b5 95       	asr	r27
    26be:	a7 95       	ror	r26
    26c0:	97 95       	ror	r25
    26c2:	87 95       	ror	r24
    26c4:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    26c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    26ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    26ce:	e1 ec       	ldi	r30, 0xC1	; 193
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	88 e1       	ldi	r24, 0x18	; 24
    26d4:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    26d6:	80 81       	ld	r24, Z
    26d8:	80 68       	ori	r24, 0x80	; 128
    26da:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    26dc:	e0 e0       	ldi	r30, 0x00	; 0
    26de:	f8 e0       	ldi	r31, 0x08	; 8
    26e0:	8e eb       	ldi	r24, 0xBE	; 190
    26e2:	94 e0       	ldi	r25, 0x04	; 4
    26e4:	93 83       	std	Z+3, r25	; 0x03
    26e6:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    26e8:	91 83       	std	Z+1, r25	; 0x01
    26ea:	80 83       	st	Z, r24
    26ec:	08 95       	ret

000026ee <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    26ee:	90 91 f8 07 	lds	r25, 0x07F8	; 0x8007f8 <bytes_in_input_buffer>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	91 11       	cpse	r25, r1
    26f6:	01 c0       	rjmp	.+2      	; 0x26fa <serial_input_available+0xc>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
}
    26fa:	08 95       	ret

000026fc <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    26fc:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <input_insert_pos>
	bytes_in_input_buffer = 0;
    2700:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <bytes_in_input_buffer>
    2704:	08 95       	ret

00002706 <get_serial>:
}

char get_serial(void) {
	char serial_input = -1;
	
	if (serial_input_available()) {
    2706:	0e 94 77 13 	call	0x26ee	; 0x26ee <serial_input_available>
    270a:	88 23       	and	r24, r24
    270c:	39 f0       	breq	.+14     	; 0x271c <get_serial+0x16>
		serial_input = fgetc(stdin);
    270e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__iob>
    2712:	90 91 01 08 	lds	r25, 0x0801	; 0x800801 <__iob+0x1>
    2716:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <fgetc>
    271a:	08 95       	ret
	}	
	return c;
}

char get_serial(void) {
	char serial_input = -1;
    271c:	8f ef       	ldi	r24, 0xFF	; 255
	if (serial_input_available()) {
		serial_input = fgetc(stdin);
	}
	
	return serial_input;
}
    271e:	08 95       	ret

00002720 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    2720:	1f 92       	push	r1
    2722:	0f 92       	push	r0
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	0f 92       	push	r0
    2728:	11 24       	eor	r1, r1
    272a:	2f 93       	push	r18
    272c:	8f 93       	push	r24
    272e:	9f 93       	push	r25
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    2734:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <bytes_in_out_buffer>
    2738:	88 23       	and	r24, r24
    273a:	29 f1       	breq	.+74     	; 0x2786 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    273c:	80 91 e5 06 	lds	r24, 0x06E5	; 0x8006e5 <out_insert_pos>
    2740:	20 91 e6 06 	lds	r18, 0x06E6	; 0x8006e6 <bytes_in_out_buffer>
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	82 1b       	sub	r24, r18
    2748:	91 09       	sbc	r25, r1
    274a:	5a f4       	brpl	.+22     	; 0x2762 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    274c:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <out_insert_pos>
    2750:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <bytes_in_out_buffer>
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	e8 1b       	sub	r30, r24
    2758:	f1 09       	sbc	r31, r1
    275a:	ea 51       	subi	r30, 0x1A	; 26
    275c:	f8 4f       	sbci	r31, 0xF8	; 248
    275e:	90 81       	ld	r25, Z
    2760:	0a c0       	rjmp	.+20     	; 0x2776 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    2762:	e0 91 e5 06 	lds	r30, 0x06E5	; 0x8006e5 <out_insert_pos>
    2766:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <bytes_in_out_buffer>
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	e8 1b       	sub	r30, r24
    276e:	f1 09       	sbc	r31, r1
    2770:	e9 51       	subi	r30, 0x19	; 25
    2772:	f9 4f       	sbci	r31, 0xF9	; 249
    2774:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    2776:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <bytes_in_out_buffer>
    277a:	81 50       	subi	r24, 0x01	; 1
    277c:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    2780:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    2784:	05 c0       	rjmp	.+10     	; 0x2790 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    2786:	e1 ec       	ldi	r30, 0xC1	; 193
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	8f 7d       	andi	r24, 0xDF	; 223
    278e:	80 83       	st	Z, r24
	}
}
    2790:	ff 91       	pop	r31
    2792:	ef 91       	pop	r30
    2794:	9f 91       	pop	r25
    2796:	8f 91       	pop	r24
    2798:	2f 91       	pop	r18
    279a:	0f 90       	pop	r0
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	0f 90       	pop	r0
    27a0:	1f 90       	pop	r1
    27a2:	18 95       	reti

000027a4 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    27a4:	1f 92       	push	r1
    27a6:	0f 92       	push	r0
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	0f 92       	push	r0
    27ac:	11 24       	eor	r1, r1
    27ae:	2f 93       	push	r18
    27b0:	3f 93       	push	r19
    27b2:	4f 93       	push	r20
    27b4:	5f 93       	push	r21
    27b6:	6f 93       	push	r22
    27b8:	7f 93       	push	r23
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
    27be:	af 93       	push	r26
    27c0:	bf 93       	push	r27
    27c2:	cf 93       	push	r28
    27c4:	ef 93       	push	r30
    27c6:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    27c8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    27cc:	80 91 31 06 	lds	r24, 0x0631	; 0x800631 <do_echo>
    27d0:	88 23       	and	r24, r24
    27d2:	49 f0       	breq	.+18     	; 0x27e6 <__vector_20+0x42>
    27d4:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <bytes_in_out_buffer>
    27d8:	8f 3f       	cpi	r24, 0xFF	; 255
    27da:	29 f0       	breq	.+10     	; 0x27e6 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    27dc:	60 e0       	ldi	r22, 0x00	; 0
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	8c 2f       	mov	r24, r28
    27e2:	0e 94 ca 12 	call	0x2594	; 0x2594 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    27e6:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <bytes_in_input_buffer>
    27ea:	80 31       	cpi	r24, 0x10	; 16
    27ec:	20 f0       	brcs	.+8      	; 0x27f6 <__vector_20+0x52>
		input_overrun = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <input_overrun>
    27f4:	18 c0       	rjmp	.+48     	; 0x2826 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    27f6:	cd 30       	cpi	r28, 0x0D	; 13
    27f8:	09 f4       	brne	.+2      	; 0x27fc <__vector_20+0x58>
			c = '\n';
    27fa:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    27fc:	e0 91 e6 07 	lds	r30, 0x07E6	; 0x8007e6 <input_insert_pos>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	8e 0f       	add	r24, r30
    2804:	80 93 e6 07 	sts	0x07E6, r24	; 0x8007e6 <input_insert_pos>
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	e9 51       	subi	r30, 0x19	; 25
    280c:	f8 4f       	sbci	r31, 0xF8	; 248
    280e:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    2810:	80 91 f8 07 	lds	r24, 0x07F8	; 0x8007f8 <bytes_in_input_buffer>
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	80 93 f8 07 	sts	0x07F8, r24	; 0x8007f8 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    281a:	80 91 e6 07 	lds	r24, 0x07E6	; 0x8007e6 <input_insert_pos>
    281e:	80 31       	cpi	r24, 0x10	; 16
    2820:	11 f4       	brne	.+4      	; 0x2826 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    2822:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <input_insert_pos>
		}
	}
}
    2826:	ff 91       	pop	r31
    2828:	ef 91       	pop	r30
    282a:	cf 91       	pop	r28
    282c:	bf 91       	pop	r27
    282e:	af 91       	pop	r26
    2830:	9f 91       	pop	r25
    2832:	8f 91       	pop	r24
    2834:	7f 91       	pop	r23
    2836:	6f 91       	pop	r22
    2838:	5f 91       	pop	r21
    283a:	4f 91       	pop	r20
    283c:	3f 91       	pop	r19
    283e:	2f 91       	pop	r18
    2840:	0f 90       	pop	r0
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	0f 90       	pop	r0
    2846:	1f 90       	pop	r1
    2848:	18 95       	reti

0000284a <sevenseg_display>:
	}
}

void sevenseg_clear(void) {
	seven_seg_left = 17;
	seven_seg_right = 17;
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <get_current_time>
    2852:	00 91 fa 07 	lds	r16, 0x07FA	; 0x8007fa <last_display_time>
    2856:	10 91 fb 07 	lds	r17, 0x07FB	; 0x8007fb <last_display_time+0x1>
    285a:	20 91 fc 07 	lds	r18, 0x07FC	; 0x8007fc <last_display_time+0x2>
    285e:	30 91 fd 07 	lds	r19, 0x07FD	; 0x8007fd <last_display_time+0x3>
    2862:	0b 5f       	subi	r16, 0xFB	; 251
    2864:	1f 4f       	sbci	r17, 0xFF	; 255
    2866:	2f 4f       	sbci	r18, 0xFF	; 255
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	60 17       	cp	r22, r16
    286c:	71 07       	cpc	r23, r17
    286e:	82 07       	cpc	r24, r18
    2870:	93 07       	cpc	r25, r19
    2872:	38 f1       	brcs	.+78     	; 0x28c2 <sevenseg_display+0x78>
    2874:	20 91 fe 07 	lds	r18, 0x07FE	; 0x8007fe <seven_seg_cc>
    2878:	22 23       	and	r18, r18
    287a:	59 f0       	breq	.+22     	; 0x2892 <sevenseg_display+0x48>
    287c:	2b b1       	in	r18, 0x0b	; 11
    287e:	24 60       	ori	r18, 0x04	; 4
    2880:	2b b9       	out	0x0b, r18	; 11
    2882:	e0 91 f9 07 	lds	r30, 0x07F9	; 0x8007f9 <seven_seg_left>
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	ef 56       	subi	r30, 0x6F	; 111
    288a:	fa 4f       	sbci	r31, 0xFA	; 250
    288c:	20 81       	ld	r18, Z
    288e:	28 b9       	out	0x08, r18	; 8
    2890:	0a c0       	rjmp	.+20     	; 0x28a6 <sevenseg_display+0x5c>
    2892:	2b b1       	in	r18, 0x0b	; 11
    2894:	2b 7f       	andi	r18, 0xFB	; 251
    2896:	2b b9       	out	0x0b, r18	; 11
    2898:	e0 91 ff 07 	lds	r30, 0x07FF	; 0x8007ff <seven_seg_right>
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	ef 56       	subi	r30, 0x6F	; 111
    28a0:	fa 4f       	sbci	r31, 0xFA	; 250
    28a2:	20 81       	ld	r18, Z
    28a4:	28 b9       	out	0x08, r18	; 8
    28a6:	20 91 fe 07 	lds	r18, 0x07FE	; 0x8007fe <seven_seg_cc>
    28aa:	31 e0       	ldi	r19, 0x01	; 1
    28ac:	32 1b       	sub	r19, r18
    28ae:	30 93 fe 07 	sts	0x07FE, r19	; 0x8007fe <seven_seg_cc>
    28b2:	60 93 fa 07 	sts	0x07FA, r22	; 0x8007fa <last_display_time>
    28b6:	70 93 fb 07 	sts	0x07FB, r23	; 0x8007fb <last_display_time+0x1>
    28ba:	80 93 fc 07 	sts	0x07FC, r24	; 0x8007fc <last_display_time+0x2>
    28be:	90 93 fd 07 	sts	0x07FD, r25	; 0x8007fd <last_display_time+0x3>
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	08 95       	ret

000028c8 <sevenseg_display_digit>:
}

void sevenseg_display_digit(uint8_t number_left, uint8_t number_right)
{
	seven_seg_left = number_left;
    28c8:	80 93 f9 07 	sts	0x07F9, r24	; 0x8007f9 <seven_seg_left>
	seven_seg_right = number_right;
    28cc:	60 93 ff 07 	sts	0x07FF, r22	; 0x8007ff <seven_seg_right>
    28d0:	08 95       	ret

000028d2 <init_sevenseg>:

uint32_t last_display_time;

void init_sevenseg(void) {
	// Set port C, pins C0 : A to C7 : DP to be outputs
	DDRC = 0xFF;
    28d2:	8f ef       	ldi	r24, 0xFF	; 255
    28d4:	87 b9       	out	0x07, r24	; 7

	// Set port D, pin D2 to be an output for CC.
	DDRD |= (1 << DDRD2);
    28d6:	8a b1       	in	r24, 0x0a	; 10
    28d8:	84 60       	ori	r24, 0x04	; 4
    28da:	8a b9       	out	0x0a, r24	; 10
	
	sevenseg_display_digit(0,0);
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	0e 94 64 14 	call	0x28c8	; 0x28c8 <sevenseg_display_digit>
    28e4:	08 95       	ret

000028e6 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
    28e6:	94 b1       	in	r25, 0x04	; 4
    28e8:	90 6b       	ori	r25, 0xB0	; 176
    28ea:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1 << PORTB4);
    28ec:	95 b1       	in	r25, 0x05	; 5
    28ee:	90 61       	ori	r25, 0x10	; 16
    28f0:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
    28f2:	90 e5       	ldi	r25, 0x50	; 80
    28f4:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    28f6:	88 30       	cpi	r24, 0x08	; 8
    28f8:	21 f0       	breq	.+8      	; 0x2902 <spi_setup_master+0x1c>
    28fa:	80 32       	cpi	r24, 0x20	; 32
    28fc:	11 f0       	breq	.+4      	; 0x2902 <spi_setup_master+0x1c>
    28fe:	82 30       	cpi	r24, 0x02	; 2
    2900:	19 f4       	brne	.+6      	; 0x2908 <spi_setup_master+0x22>
		case 2: /* FALLTHROUGH */
		case 8: /* FALLTHROUGH */
		case 32:
			SPSR0 = (1 << SPI2X0);
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	9d bd       	out	0x2d, r25	; 45
			break;
    2906:	01 c0       	rjmp	.+2      	; 0x290a <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    2908:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    290a:	80 32       	cpi	r24, 0x20	; 32
    290c:	69 f0       	breq	.+26     	; 0x2928 <spi_setup_master+0x42>
    290e:	28 f4       	brcc	.+10     	; 0x291a <spi_setup_master+0x34>
    2910:	88 30       	cpi	r24, 0x08	; 8
    2912:	71 f0       	breq	.+28     	; 0x2930 <spi_setup_master+0x4a>
    2914:	80 31       	cpi	r24, 0x10	; 16
    2916:	61 f0       	breq	.+24     	; 0x2930 <spi_setup_master+0x4a>
    2918:	0e c0       	rjmp	.+28     	; 0x2936 <spi_setup_master+0x50>
    291a:	80 34       	cpi	r24, 0x40	; 64
    291c:	29 f0       	breq	.+10     	; 0x2928 <spi_setup_master+0x42>
    291e:	80 38       	cpi	r24, 0x80	; 128
    2920:	51 f4       	brne	.+20     	; 0x2936 <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1 << SPR00);
    2922:	8c b5       	in	r24, 0x2c	; 44
    2924:	81 60       	ori	r24, 0x01	; 1
    2926:	8c bd       	out	0x2c, r24	; 44
			/* FALLTHROUGH */
		case 32: /* FALLTHROUGH */
		case 64:
			SPCR0 |= (1<<SPR10);
    2928:	8c b5       	in	r24, 0x2c	; 44
    292a:	82 60       	ori	r24, 0x02	; 2
    292c:	8c bd       	out	0x2c, r24	; 44
			break;
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <spi_setup_master+0x50>
		case 8: /* FALLTHROUGH */
		case 16:
			SPCR0 |= (1<<SPR00);
    2930:	8c b5       	in	r24, 0x2c	; 44
    2932:	81 60       	ori	r24, 0x01	; 1
    2934:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1 << PORTB4);
    2936:	85 b1       	in	r24, 0x05	; 5
    2938:	8f 7e       	andi	r24, 0xEF	; 239
    293a:	85 b9       	out	0x05, r24	; 5
    293c:	08 95       	ret

0000293e <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    293e:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1 << SPIF0)) == 0) {
    2940:	0d b4       	in	r0, 0x2d	; 45
    2942:	07 fe       	sbrs	r0, 7
    2944:	fd cf       	rjmp	.-6      	; 0x2940 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    2946:	8e b5       	in	r24, 0x2e	; 46
    2948:	08 95       	ret

0000294a <move_terminal_cursor>:
	printf_P(PSTR("\x1b[K"));
}

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
}
    294a:	9f 93       	push	r25
    294c:	8f 93       	push	r24
    294e:	7f 93       	push	r23
    2950:	6f 93       	push	r22
    2952:	83 eb       	ldi	r24, 0xB3	; 179
    2954:	92 e0       	ldi	r25, 0x02	; 2
    2956:	9f 93       	push	r25
    2958:	8f 93       	push	r24
    295a:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	08 95       	ret

0000296c <clear_terminal>:
    296c:	8e ea       	ldi	r24, 0xAE	; 174
    296e:	92 e0       	ldi	r25, 0x02	; 2
    2970:	9f 93       	push	r25
    2972:	8f 93       	push	r24
    2974:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
    2978:	0f 90       	pop	r0
    297a:	0f 90       	pop	r0
    297c:	08 95       	ret

0000297e <clear_to_end_of_line>:
    297e:	8a ea       	ldi	r24, 0xAA	; 170
    2980:	92 e0       	ldi	r25, 0x02	; 2
    2982:	9f 93       	push	r25
    2984:	8f 93       	push	r24
    2986:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	08 95       	ret

00002990 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    2990:	83 ea       	ldi	r24, 0xA3	; 163
    2992:	92 e0       	ldi	r25, 0x02	; 2
    2994:	9f 93       	push	r25
    2996:	8f 93       	push	r24
    2998:	0e 94 80 17 	call	0x2f00	; 0x2f00 <printf_P>
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	08 95       	ret

000029a2 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    29a2:	10 92 32 06 	sts	0x0632, r1	; 0x800632 <clockTicks>
    29a6:	10 92 33 06 	sts	0x0633, r1	; 0x800633 <clockTicks+0x1>
    29aa:	10 92 34 06 	sts	0x0634, r1	; 0x800634 <clockTicks+0x2>
    29ae:	10 92 35 06 	sts	0x0635, r1	; 0x800635 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    29b2:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    29b4:	8c e7       	ldi	r24, 0x7C	; 124
    29b6:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    29bc:	83 e0       	ldi	r24, 0x03	; 3
    29be:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    29c0:	ee e6       	ldi	r30, 0x6E	; 110
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	82 60       	ori	r24, 0x02	; 2
    29c8:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    29ca:	85 b3       	in	r24, 0x15	; 21
    29cc:	82 70       	andi	r24, 0x02	; 2
    29ce:	85 bb       	out	0x15, r24	; 21
    29d0:	08 95       	ret

000029d2 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    29d2:	8f b7       	in	r24, 0x3f	; 63
    29d4:	28 2f       	mov	r18, r24
    29d6:	20 78       	andi	r18, 0x80	; 128
	cli();
    29d8:	f8 94       	cli
	returnValue = clockTicks;
    29da:	60 91 32 06 	lds	r22, 0x0632	; 0x800632 <clockTicks>
    29de:	70 91 33 06 	lds	r23, 0x0633	; 0x800633 <clockTicks+0x1>
    29e2:	80 91 34 06 	lds	r24, 0x0634	; 0x800634 <clockTicks+0x2>
    29e6:	90 91 35 06 	lds	r25, 0x0635	; 0x800635 <clockTicks+0x3>
	if(interruptsOn) {
    29ea:	22 23       	and	r18, r18
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <get_current_time+0x1e>
		sei();
    29ee:	78 94       	sei
	}
	return returnValue;
}
    29f0:	08 95       	ret

000029f2 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    29f2:	1f 92       	push	r1
    29f4:	0f 92       	push	r0
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	0f 92       	push	r0
    29fa:	11 24       	eor	r1, r1
    29fc:	2f 93       	push	r18
    29fe:	3f 93       	push	r19
    2a00:	4f 93       	push	r20
    2a02:	5f 93       	push	r21
    2a04:	6f 93       	push	r22
    2a06:	7f 93       	push	r23
    2a08:	8f 93       	push	r24
    2a0a:	9f 93       	push	r25
    2a0c:	af 93       	push	r26
    2a0e:	bf 93       	push	r27
    2a10:	ef 93       	push	r30
    2a12:	ff 93       	push	r31
	/* Increment our clock tick count */
	clockTicks++;
    2a14:	80 91 32 06 	lds	r24, 0x0632	; 0x800632 <clockTicks>
    2a18:	90 91 33 06 	lds	r25, 0x0633	; 0x800633 <clockTicks+0x1>
    2a1c:	a0 91 34 06 	lds	r26, 0x0634	; 0x800634 <clockTicks+0x2>
    2a20:	b0 91 35 06 	lds	r27, 0x0635	; 0x800635 <clockTicks+0x3>
    2a24:	01 96       	adiw	r24, 0x01	; 1
    2a26:	a1 1d       	adc	r26, r1
    2a28:	b1 1d       	adc	r27, r1
    2a2a:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <clockTicks>
    2a2e:	90 93 33 06 	sts	0x0633, r25	; 0x800633 <clockTicks+0x1>
    2a32:	a0 93 34 06 	sts	0x0634, r26	; 0x800634 <clockTicks+0x2>
    2a36:	b0 93 35 06 	sts	0x0635, r27	; 0x800635 <clockTicks+0x3>
	play_buzzer();
    2a3a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <play_buzzer>
	play_animations();
    2a3e:	0e 94 0f 02 	call	0x41e	; 0x41e <play_animations>
	sevenseg_display();
    2a42:	0e 94 25 14 	call	0x284a	; 0x284a <sevenseg_display>
}
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	bf 91       	pop	r27
    2a4c:	af 91       	pop	r26
    2a4e:	9f 91       	pop	r25
    2a50:	8f 91       	pop	r24
    2a52:	7f 91       	pop	r23
    2a54:	6f 91       	pop	r22
    2a56:	5f 91       	pop	r21
    2a58:	4f 91       	pop	r20
    2a5a:	3f 91       	pop	r19
    2a5c:	2f 91       	pop	r18
    2a5e:	0f 90       	pop	r0
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	0f 90       	pop	r0
    2a64:	1f 90       	pop	r1
    2a66:	18 95       	reti

00002a68 <__divsf3>:
    2a68:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__divsf3x>
    2a6c:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__fp_round>
    2a70:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__fp_pscB>
    2a74:	58 f0       	brcs	.+22     	; 0x2a8c <__divsf3+0x24>
    2a76:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <__fp_pscA>
    2a7a:	40 f0       	brcs	.+16     	; 0x2a8c <__divsf3+0x24>
    2a7c:	29 f4       	brne	.+10     	; 0x2a88 <__divsf3+0x20>
    2a7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2a80:	29 f0       	breq	.+10     	; 0x2a8c <__divsf3+0x24>
    2a82:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_inf>
    2a86:	51 11       	cpse	r21, r1
    2a88:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__fp_szero>
    2a8c:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_nan>

00002a90 <__divsf3x>:
    2a90:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__fp_split3>
    2a94:	68 f3       	brcs	.-38     	; 0x2a70 <__divsf3+0x8>

00002a96 <__divsf3_pse>:
    2a96:	99 23       	and	r25, r25
    2a98:	b1 f3       	breq	.-20     	; 0x2a86 <__divsf3+0x1e>
    2a9a:	55 23       	and	r21, r21
    2a9c:	91 f3       	breq	.-28     	; 0x2a82 <__divsf3+0x1a>
    2a9e:	95 1b       	sub	r25, r21
    2aa0:	55 0b       	sbc	r21, r21
    2aa2:	bb 27       	eor	r27, r27
    2aa4:	aa 27       	eor	r26, r26
    2aa6:	62 17       	cp	r22, r18
    2aa8:	73 07       	cpc	r23, r19
    2aaa:	84 07       	cpc	r24, r20
    2aac:	38 f0       	brcs	.+14     	; 0x2abc <__divsf3_pse+0x26>
    2aae:	9f 5f       	subi	r25, 0xFF	; 255
    2ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab2:	22 0f       	add	r18, r18
    2ab4:	33 1f       	adc	r19, r19
    2ab6:	44 1f       	adc	r20, r20
    2ab8:	aa 1f       	adc	r26, r26
    2aba:	a9 f3       	breq	.-22     	; 0x2aa6 <__divsf3_pse+0x10>
    2abc:	35 d0       	rcall	.+106    	; 0x2b28 <__divsf3_pse+0x92>
    2abe:	0e 2e       	mov	r0, r30
    2ac0:	3a f0       	brmi	.+14     	; 0x2ad0 <__divsf3_pse+0x3a>
    2ac2:	e0 e8       	ldi	r30, 0x80	; 128
    2ac4:	32 d0       	rcall	.+100    	; 0x2b2a <__divsf3_pse+0x94>
    2ac6:	91 50       	subi	r25, 0x01	; 1
    2ac8:	50 40       	sbci	r21, 0x00	; 0
    2aca:	e6 95       	lsr	r30
    2acc:	00 1c       	adc	r0, r0
    2ace:	ca f7       	brpl	.-14     	; 0x2ac2 <__divsf3_pse+0x2c>
    2ad0:	2b d0       	rcall	.+86     	; 0x2b28 <__divsf3_pse+0x92>
    2ad2:	fe 2f       	mov	r31, r30
    2ad4:	29 d0       	rcall	.+82     	; 0x2b28 <__divsf3_pse+0x92>
    2ad6:	66 0f       	add	r22, r22
    2ad8:	77 1f       	adc	r23, r23
    2ada:	88 1f       	adc	r24, r24
    2adc:	bb 1f       	adc	r27, r27
    2ade:	26 17       	cp	r18, r22
    2ae0:	37 07       	cpc	r19, r23
    2ae2:	48 07       	cpc	r20, r24
    2ae4:	ab 07       	cpc	r26, r27
    2ae6:	b0 e8       	ldi	r27, 0x80	; 128
    2ae8:	09 f0       	breq	.+2      	; 0x2aec <__divsf3_pse+0x56>
    2aea:	bb 0b       	sbc	r27, r27
    2aec:	80 2d       	mov	r24, r0
    2aee:	bf 01       	movw	r22, r30
    2af0:	ff 27       	eor	r31, r31
    2af2:	93 58       	subi	r25, 0x83	; 131
    2af4:	5f 4f       	sbci	r21, 0xFF	; 255
    2af6:	3a f0       	brmi	.+14     	; 0x2b06 <__divsf3_pse+0x70>
    2af8:	9e 3f       	cpi	r25, 0xFE	; 254
    2afa:	51 05       	cpc	r21, r1
    2afc:	78 f0       	brcs	.+30     	; 0x2b1c <__divsf3_pse+0x86>
    2afe:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_inf>
    2b02:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__fp_szero>
    2b06:	5f 3f       	cpi	r21, 0xFF	; 255
    2b08:	e4 f3       	brlt	.-8      	; 0x2b02 <__divsf3_pse+0x6c>
    2b0a:	98 3e       	cpi	r25, 0xE8	; 232
    2b0c:	d4 f3       	brlt	.-12     	; 0x2b02 <__divsf3_pse+0x6c>
    2b0e:	86 95       	lsr	r24
    2b10:	77 95       	ror	r23
    2b12:	67 95       	ror	r22
    2b14:	b7 95       	ror	r27
    2b16:	f7 95       	ror	r31
    2b18:	9f 5f       	subi	r25, 0xFF	; 255
    2b1a:	c9 f7       	brne	.-14     	; 0x2b0e <__divsf3_pse+0x78>
    2b1c:	88 0f       	add	r24, r24
    2b1e:	91 1d       	adc	r25, r1
    2b20:	96 95       	lsr	r25
    2b22:	87 95       	ror	r24
    2b24:	97 f9       	bld	r25, 7
    2b26:	08 95       	ret
    2b28:	e1 e0       	ldi	r30, 0x01	; 1
    2b2a:	66 0f       	add	r22, r22
    2b2c:	77 1f       	adc	r23, r23
    2b2e:	88 1f       	adc	r24, r24
    2b30:	bb 1f       	adc	r27, r27
    2b32:	62 17       	cp	r22, r18
    2b34:	73 07       	cpc	r23, r19
    2b36:	84 07       	cpc	r24, r20
    2b38:	ba 07       	cpc	r27, r26
    2b3a:	20 f0       	brcs	.+8      	; 0x2b44 <__divsf3_pse+0xae>
    2b3c:	62 1b       	sub	r22, r18
    2b3e:	73 0b       	sbc	r23, r19
    2b40:	84 0b       	sbc	r24, r20
    2b42:	ba 0b       	sbc	r27, r26
    2b44:	ee 1f       	adc	r30, r30
    2b46:	88 f7       	brcc	.-30     	; 0x2b2a <__divsf3_pse+0x94>
    2b48:	e0 95       	com	r30
    2b4a:	08 95       	ret

00002b4c <__fixunssfsi>:
    2b4c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__fp_splitA>
    2b50:	88 f0       	brcs	.+34     	; 0x2b74 <__fixunssfsi+0x28>
    2b52:	9f 57       	subi	r25, 0x7F	; 127
    2b54:	98 f0       	brcs	.+38     	; 0x2b7c <__fixunssfsi+0x30>
    2b56:	b9 2f       	mov	r27, r25
    2b58:	99 27       	eor	r25, r25
    2b5a:	b7 51       	subi	r27, 0x17	; 23
    2b5c:	b0 f0       	brcs	.+44     	; 0x2b8a <__fixunssfsi+0x3e>
    2b5e:	e1 f0       	breq	.+56     	; 0x2b98 <__fixunssfsi+0x4c>
    2b60:	66 0f       	add	r22, r22
    2b62:	77 1f       	adc	r23, r23
    2b64:	88 1f       	adc	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	1a f0       	brmi	.+6      	; 0x2b70 <__fixunssfsi+0x24>
    2b6a:	ba 95       	dec	r27
    2b6c:	c9 f7       	brne	.-14     	; 0x2b60 <__fixunssfsi+0x14>
    2b6e:	14 c0       	rjmp	.+40     	; 0x2b98 <__fixunssfsi+0x4c>
    2b70:	b1 30       	cpi	r27, 0x01	; 1
    2b72:	91 f0       	breq	.+36     	; 0x2b98 <__fixunssfsi+0x4c>
    2b74:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <__fp_zero>
    2b78:	b1 e0       	ldi	r27, 0x01	; 1
    2b7a:	08 95       	ret
    2b7c:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__fp_zero>
    2b80:	67 2f       	mov	r22, r23
    2b82:	78 2f       	mov	r23, r24
    2b84:	88 27       	eor	r24, r24
    2b86:	b8 5f       	subi	r27, 0xF8	; 248
    2b88:	39 f0       	breq	.+14     	; 0x2b98 <__fixunssfsi+0x4c>
    2b8a:	b9 3f       	cpi	r27, 0xF9	; 249
    2b8c:	cc f3       	brlt	.-14     	; 0x2b80 <__fixunssfsi+0x34>
    2b8e:	86 95       	lsr	r24
    2b90:	77 95       	ror	r23
    2b92:	67 95       	ror	r22
    2b94:	b3 95       	inc	r27
    2b96:	d9 f7       	brne	.-10     	; 0x2b8e <__fixunssfsi+0x42>
    2b98:	3e f4       	brtc	.+14     	; 0x2ba8 <__fixunssfsi+0x5c>
    2b9a:	90 95       	com	r25
    2b9c:	80 95       	com	r24
    2b9e:	70 95       	com	r23
    2ba0:	61 95       	neg	r22
    2ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba8:	08 95       	ret

00002baa <__floatunsisf>:
    2baa:	e8 94       	clt
    2bac:	09 c0       	rjmp	.+18     	; 0x2bc0 <__floatsisf+0x12>

00002bae <__floatsisf>:
    2bae:	97 fb       	bst	r25, 7
    2bb0:	3e f4       	brtc	.+14     	; 0x2bc0 <__floatsisf+0x12>
    2bb2:	90 95       	com	r25
    2bb4:	80 95       	com	r24
    2bb6:	70 95       	com	r23
    2bb8:	61 95       	neg	r22
    2bba:	7f 4f       	sbci	r23, 0xFF	; 255
    2bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    2bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc0:	99 23       	and	r25, r25
    2bc2:	a9 f0       	breq	.+42     	; 0x2bee <__floatsisf+0x40>
    2bc4:	f9 2f       	mov	r31, r25
    2bc6:	96 e9       	ldi	r25, 0x96	; 150
    2bc8:	bb 27       	eor	r27, r27
    2bca:	93 95       	inc	r25
    2bcc:	f6 95       	lsr	r31
    2bce:	87 95       	ror	r24
    2bd0:	77 95       	ror	r23
    2bd2:	67 95       	ror	r22
    2bd4:	b7 95       	ror	r27
    2bd6:	f1 11       	cpse	r31, r1
    2bd8:	f8 cf       	rjmp	.-16     	; 0x2bca <__floatsisf+0x1c>
    2bda:	fa f4       	brpl	.+62     	; 0x2c1a <__floatsisf+0x6c>
    2bdc:	bb 0f       	add	r27, r27
    2bde:	11 f4       	brne	.+4      	; 0x2be4 <__floatsisf+0x36>
    2be0:	60 ff       	sbrs	r22, 0
    2be2:	1b c0       	rjmp	.+54     	; 0x2c1a <__floatsisf+0x6c>
    2be4:	6f 5f       	subi	r22, 0xFF	; 255
    2be6:	7f 4f       	sbci	r23, 0xFF	; 255
    2be8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	16 c0       	rjmp	.+44     	; 0x2c1a <__floatsisf+0x6c>
    2bee:	88 23       	and	r24, r24
    2bf0:	11 f0       	breq	.+4      	; 0x2bf6 <__floatsisf+0x48>
    2bf2:	96 e9       	ldi	r25, 0x96	; 150
    2bf4:	11 c0       	rjmp	.+34     	; 0x2c18 <__floatsisf+0x6a>
    2bf6:	77 23       	and	r23, r23
    2bf8:	21 f0       	breq	.+8      	; 0x2c02 <__floatsisf+0x54>
    2bfa:	9e e8       	ldi	r25, 0x8E	; 142
    2bfc:	87 2f       	mov	r24, r23
    2bfe:	76 2f       	mov	r23, r22
    2c00:	05 c0       	rjmp	.+10     	; 0x2c0c <__floatsisf+0x5e>
    2c02:	66 23       	and	r22, r22
    2c04:	71 f0       	breq	.+28     	; 0x2c22 <__floatsisf+0x74>
    2c06:	96 e8       	ldi	r25, 0x86	; 134
    2c08:	86 2f       	mov	r24, r22
    2c0a:	70 e0       	ldi	r23, 0x00	; 0
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	2a f0       	brmi	.+10     	; 0x2c1a <__floatsisf+0x6c>
    2c10:	9a 95       	dec	r25
    2c12:	66 0f       	add	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	88 1f       	adc	r24, r24
    2c18:	da f7       	brpl	.-10     	; 0x2c10 <__floatsisf+0x62>
    2c1a:	88 0f       	add	r24, r24
    2c1c:	96 95       	lsr	r25
    2c1e:	87 95       	ror	r24
    2c20:	97 f9       	bld	r25, 7
    2c22:	08 95       	ret

00002c24 <__fp_inf>:
    2c24:	97 f9       	bld	r25, 7
    2c26:	9f 67       	ori	r25, 0x7F	; 127
    2c28:	80 e8       	ldi	r24, 0x80	; 128
    2c2a:	70 e0       	ldi	r23, 0x00	; 0
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	08 95       	ret

00002c30 <__fp_nan>:
    2c30:	9f ef       	ldi	r25, 0xFF	; 255
    2c32:	80 ec       	ldi	r24, 0xC0	; 192
    2c34:	08 95       	ret

00002c36 <__fp_pscA>:
    2c36:	00 24       	eor	r0, r0
    2c38:	0a 94       	dec	r0
    2c3a:	16 16       	cp	r1, r22
    2c3c:	17 06       	cpc	r1, r23
    2c3e:	18 06       	cpc	r1, r24
    2c40:	09 06       	cpc	r0, r25
    2c42:	08 95       	ret

00002c44 <__fp_pscB>:
    2c44:	00 24       	eor	r0, r0
    2c46:	0a 94       	dec	r0
    2c48:	12 16       	cp	r1, r18
    2c4a:	13 06       	cpc	r1, r19
    2c4c:	14 06       	cpc	r1, r20
    2c4e:	05 06       	cpc	r0, r21
    2c50:	08 95       	ret

00002c52 <__fp_round>:
    2c52:	09 2e       	mov	r0, r25
    2c54:	03 94       	inc	r0
    2c56:	00 0c       	add	r0, r0
    2c58:	11 f4       	brne	.+4      	; 0x2c5e <__fp_round+0xc>
    2c5a:	88 23       	and	r24, r24
    2c5c:	52 f0       	brmi	.+20     	; 0x2c72 <__fp_round+0x20>
    2c5e:	bb 0f       	add	r27, r27
    2c60:	40 f4       	brcc	.+16     	; 0x2c72 <__fp_round+0x20>
    2c62:	bf 2b       	or	r27, r31
    2c64:	11 f4       	brne	.+4      	; 0x2c6a <__fp_round+0x18>
    2c66:	60 ff       	sbrs	r22, 0
    2c68:	04 c0       	rjmp	.+8      	; 0x2c72 <__fp_round+0x20>
    2c6a:	6f 5f       	subi	r22, 0xFF	; 255
    2c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c70:	9f 4f       	sbci	r25, 0xFF	; 255
    2c72:	08 95       	ret

00002c74 <__fp_split3>:
    2c74:	57 fd       	sbrc	r21, 7
    2c76:	90 58       	subi	r25, 0x80	; 128
    2c78:	44 0f       	add	r20, r20
    2c7a:	55 1f       	adc	r21, r21
    2c7c:	59 f0       	breq	.+22     	; 0x2c94 <__fp_splitA+0x10>
    2c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c80:	71 f0       	breq	.+28     	; 0x2c9e <__fp_splitA+0x1a>
    2c82:	47 95       	ror	r20

00002c84 <__fp_splitA>:
    2c84:	88 0f       	add	r24, r24
    2c86:	97 fb       	bst	r25, 7
    2c88:	99 1f       	adc	r25, r25
    2c8a:	61 f0       	breq	.+24     	; 0x2ca4 <__fp_splitA+0x20>
    2c8c:	9f 3f       	cpi	r25, 0xFF	; 255
    2c8e:	79 f0       	breq	.+30     	; 0x2cae <__fp_splitA+0x2a>
    2c90:	87 95       	ror	r24
    2c92:	08 95       	ret
    2c94:	12 16       	cp	r1, r18
    2c96:	13 06       	cpc	r1, r19
    2c98:	14 06       	cpc	r1, r20
    2c9a:	55 1f       	adc	r21, r21
    2c9c:	f2 cf       	rjmp	.-28     	; 0x2c82 <__fp_split3+0xe>
    2c9e:	46 95       	lsr	r20
    2ca0:	f1 df       	rcall	.-30     	; 0x2c84 <__fp_splitA>
    2ca2:	08 c0       	rjmp	.+16     	; 0x2cb4 <__fp_splitA+0x30>
    2ca4:	16 16       	cp	r1, r22
    2ca6:	17 06       	cpc	r1, r23
    2ca8:	18 06       	cpc	r1, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	f1 cf       	rjmp	.-30     	; 0x2c90 <__fp_splitA+0xc>
    2cae:	86 95       	lsr	r24
    2cb0:	71 05       	cpc	r23, r1
    2cb2:	61 05       	cpc	r22, r1
    2cb4:	08 94       	sec
    2cb6:	08 95       	ret

00002cb8 <__fp_zero>:
    2cb8:	e8 94       	clt

00002cba <__fp_szero>:
    2cba:	bb 27       	eor	r27, r27
    2cbc:	66 27       	eor	r22, r22
    2cbe:	77 27       	eor	r23, r23
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	97 f9       	bld	r25, 7
    2cc4:	08 95       	ret

00002cc6 <__mulsf3>:
    2cc6:	0e 94 76 16 	call	0x2cec	; 0x2cec <__mulsf3x>
    2cca:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__fp_round>
    2cce:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <__fp_pscA>
    2cd2:	38 f0       	brcs	.+14     	; 0x2ce2 <__mulsf3+0x1c>
    2cd4:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__fp_pscB>
    2cd8:	20 f0       	brcs	.+8      	; 0x2ce2 <__mulsf3+0x1c>
    2cda:	95 23       	and	r25, r21
    2cdc:	11 f0       	breq	.+4      	; 0x2ce2 <__mulsf3+0x1c>
    2cde:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_inf>
    2ce2:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__fp_nan>
    2ce6:	11 24       	eor	r1, r1
    2ce8:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__fp_szero>

00002cec <__mulsf3x>:
    2cec:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__fp_split3>
    2cf0:	70 f3       	brcs	.-36     	; 0x2cce <__mulsf3+0x8>

00002cf2 <__mulsf3_pse>:
    2cf2:	95 9f       	mul	r25, r21
    2cf4:	c1 f3       	breq	.-16     	; 0x2ce6 <__mulsf3+0x20>
    2cf6:	95 0f       	add	r25, r21
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
    2cfa:	55 1f       	adc	r21, r21
    2cfc:	62 9f       	mul	r22, r18
    2cfe:	f0 01       	movw	r30, r0
    2d00:	72 9f       	mul	r23, r18
    2d02:	bb 27       	eor	r27, r27
    2d04:	f0 0d       	add	r31, r0
    2d06:	b1 1d       	adc	r27, r1
    2d08:	63 9f       	mul	r22, r19
    2d0a:	aa 27       	eor	r26, r26
    2d0c:	f0 0d       	add	r31, r0
    2d0e:	b1 1d       	adc	r27, r1
    2d10:	aa 1f       	adc	r26, r26
    2d12:	64 9f       	mul	r22, r20
    2d14:	66 27       	eor	r22, r22
    2d16:	b0 0d       	add	r27, r0
    2d18:	a1 1d       	adc	r26, r1
    2d1a:	66 1f       	adc	r22, r22
    2d1c:	82 9f       	mul	r24, r18
    2d1e:	22 27       	eor	r18, r18
    2d20:	b0 0d       	add	r27, r0
    2d22:	a1 1d       	adc	r26, r1
    2d24:	62 1f       	adc	r22, r18
    2d26:	73 9f       	mul	r23, r19
    2d28:	b0 0d       	add	r27, r0
    2d2a:	a1 1d       	adc	r26, r1
    2d2c:	62 1f       	adc	r22, r18
    2d2e:	83 9f       	mul	r24, r19
    2d30:	a0 0d       	add	r26, r0
    2d32:	61 1d       	adc	r22, r1
    2d34:	22 1f       	adc	r18, r18
    2d36:	74 9f       	mul	r23, r20
    2d38:	33 27       	eor	r19, r19
    2d3a:	a0 0d       	add	r26, r0
    2d3c:	61 1d       	adc	r22, r1
    2d3e:	23 1f       	adc	r18, r19
    2d40:	84 9f       	mul	r24, r20
    2d42:	60 0d       	add	r22, r0
    2d44:	21 1d       	adc	r18, r1
    2d46:	82 2f       	mov	r24, r18
    2d48:	76 2f       	mov	r23, r22
    2d4a:	6a 2f       	mov	r22, r26
    2d4c:	11 24       	eor	r1, r1
    2d4e:	9f 57       	subi	r25, 0x7F	; 127
    2d50:	50 40       	sbci	r21, 0x00	; 0
    2d52:	9a f0       	brmi	.+38     	; 0x2d7a <__mulsf3_pse+0x88>
    2d54:	f1 f0       	breq	.+60     	; 0x2d92 <__mulsf3_pse+0xa0>
    2d56:	88 23       	and	r24, r24
    2d58:	4a f0       	brmi	.+18     	; 0x2d6c <__mulsf3_pse+0x7a>
    2d5a:	ee 0f       	add	r30, r30
    2d5c:	ff 1f       	adc	r31, r31
    2d5e:	bb 1f       	adc	r27, r27
    2d60:	66 1f       	adc	r22, r22
    2d62:	77 1f       	adc	r23, r23
    2d64:	88 1f       	adc	r24, r24
    2d66:	91 50       	subi	r25, 0x01	; 1
    2d68:	50 40       	sbci	r21, 0x00	; 0
    2d6a:	a9 f7       	brne	.-22     	; 0x2d56 <__mulsf3_pse+0x64>
    2d6c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d6e:	51 05       	cpc	r21, r1
    2d70:	80 f0       	brcs	.+32     	; 0x2d92 <__mulsf3_pse+0xa0>
    2d72:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__fp_inf>
    2d76:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__fp_szero>
    2d7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d7c:	e4 f3       	brlt	.-8      	; 0x2d76 <__mulsf3_pse+0x84>
    2d7e:	98 3e       	cpi	r25, 0xE8	; 232
    2d80:	d4 f3       	brlt	.-12     	; 0x2d76 <__mulsf3_pse+0x84>
    2d82:	86 95       	lsr	r24
    2d84:	77 95       	ror	r23
    2d86:	67 95       	ror	r22
    2d88:	b7 95       	ror	r27
    2d8a:	f7 95       	ror	r31
    2d8c:	e7 95       	ror	r30
    2d8e:	9f 5f       	subi	r25, 0xFF	; 255
    2d90:	c1 f7       	brne	.-16     	; 0x2d82 <__mulsf3_pse+0x90>
    2d92:	fe 2b       	or	r31, r30
    2d94:	88 0f       	add	r24, r24
    2d96:	91 1d       	adc	r25, r1
    2d98:	96 95       	lsr	r25
    2d9a:	87 95       	ror	r24
    2d9c:	97 f9       	bld	r25, 7
    2d9e:	08 95       	ret

00002da0 <__udivmodqi4>:
    2da0:	99 1b       	sub	r25, r25
    2da2:	79 e0       	ldi	r23, 0x09	; 9
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <__udivmodqi4_ep>

00002da6 <__udivmodqi4_loop>:
    2da6:	99 1f       	adc	r25, r25
    2da8:	96 17       	cp	r25, r22
    2daa:	08 f0       	brcs	.+2      	; 0x2dae <__udivmodqi4_ep>
    2dac:	96 1b       	sub	r25, r22

00002dae <__udivmodqi4_ep>:
    2dae:	88 1f       	adc	r24, r24
    2db0:	7a 95       	dec	r23
    2db2:	c9 f7       	brne	.-14     	; 0x2da6 <__udivmodqi4_loop>
    2db4:	80 95       	com	r24
    2db6:	08 95       	ret

00002db8 <__udivmodsi4>:
    2db8:	a1 e2       	ldi	r26, 0x21	; 33
    2dba:	1a 2e       	mov	r1, r26
    2dbc:	aa 1b       	sub	r26, r26
    2dbe:	bb 1b       	sub	r27, r27
    2dc0:	fd 01       	movw	r30, r26
    2dc2:	0d c0       	rjmp	.+26     	; 0x2dde <__udivmodsi4_ep>

00002dc4 <__udivmodsi4_loop>:
    2dc4:	aa 1f       	adc	r26, r26
    2dc6:	bb 1f       	adc	r27, r27
    2dc8:	ee 1f       	adc	r30, r30
    2dca:	ff 1f       	adc	r31, r31
    2dcc:	a2 17       	cp	r26, r18
    2dce:	b3 07       	cpc	r27, r19
    2dd0:	e4 07       	cpc	r30, r20
    2dd2:	f5 07       	cpc	r31, r21
    2dd4:	20 f0       	brcs	.+8      	; 0x2dde <__udivmodsi4_ep>
    2dd6:	a2 1b       	sub	r26, r18
    2dd8:	b3 0b       	sbc	r27, r19
    2dda:	e4 0b       	sbc	r30, r20
    2ddc:	f5 0b       	sbc	r31, r21

00002dde <__udivmodsi4_ep>:
    2dde:	66 1f       	adc	r22, r22
    2de0:	77 1f       	adc	r23, r23
    2de2:	88 1f       	adc	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	1a 94       	dec	r1
    2de8:	69 f7       	brne	.-38     	; 0x2dc4 <__udivmodsi4_loop>
    2dea:	60 95       	com	r22
    2dec:	70 95       	com	r23
    2dee:	80 95       	com	r24
    2df0:	90 95       	com	r25
    2df2:	9b 01       	movw	r18, r22
    2df4:	ac 01       	movw	r20, r24
    2df6:	bd 01       	movw	r22, r26
    2df8:	cf 01       	movw	r24, r30
    2dfa:	08 95       	ret

00002dfc <__divmodsi4>:
    2dfc:	05 2e       	mov	r0, r21
    2dfe:	97 fb       	bst	r25, 7
    2e00:	1e f4       	brtc	.+6      	; 0x2e08 <__divmodsi4+0xc>
    2e02:	00 94       	com	r0
    2e04:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <__negsi2>
    2e08:	57 fd       	sbrc	r21, 7
    2e0a:	07 d0       	rcall	.+14     	; 0x2e1a <__divmodsi4_neg2>
    2e0c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__udivmodsi4>
    2e10:	07 fc       	sbrc	r0, 7
    2e12:	03 d0       	rcall	.+6      	; 0x2e1a <__divmodsi4_neg2>
    2e14:	4e f4       	brtc	.+18     	; 0x2e28 <__divmodsi4_exit>
    2e16:	0c 94 15 17 	jmp	0x2e2a	; 0x2e2a <__negsi2>

00002e1a <__divmodsi4_neg2>:
    2e1a:	50 95       	com	r21
    2e1c:	40 95       	com	r20
    2e1e:	30 95       	com	r19
    2e20:	21 95       	neg	r18
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	4f 4f       	sbci	r20, 0xFF	; 255
    2e26:	5f 4f       	sbci	r21, 0xFF	; 255

00002e28 <__divmodsi4_exit>:
    2e28:	08 95       	ret

00002e2a <__negsi2>:
    2e2a:	90 95       	com	r25
    2e2c:	80 95       	com	r24
    2e2e:	70 95       	com	r23
    2e30:	61 95       	neg	r22
    2e32:	7f 4f       	sbci	r23, 0xFF	; 255
    2e34:	8f 4f       	sbci	r24, 0xFF	; 255
    2e36:	9f 4f       	sbci	r25, 0xFF	; 255
    2e38:	08 95       	ret

00002e3a <__umulhisi3>:
    2e3a:	a2 9f       	mul	r26, r18
    2e3c:	b0 01       	movw	r22, r0
    2e3e:	b3 9f       	mul	r27, r19
    2e40:	c0 01       	movw	r24, r0
    2e42:	a3 9f       	mul	r26, r19
    2e44:	70 0d       	add	r23, r0
    2e46:	81 1d       	adc	r24, r1
    2e48:	11 24       	eor	r1, r1
    2e4a:	91 1d       	adc	r25, r1
    2e4c:	b2 9f       	mul	r27, r18
    2e4e:	70 0d       	add	r23, r0
    2e50:	81 1d       	adc	r24, r1
    2e52:	11 24       	eor	r1, r1
    2e54:	91 1d       	adc	r25, r1
    2e56:	08 95       	ret

00002e58 <fgetc>:
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	ec 01       	movw	r28, r24
    2e5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e60:	20 ff       	sbrs	r18, 0
    2e62:	33 c0       	rjmp	.+102    	; 0x2eca <fgetc+0x72>
    2e64:	26 ff       	sbrs	r18, 6
    2e66:	0a c0       	rjmp	.+20     	; 0x2e7c <fgetc+0x24>
    2e68:	2f 7b       	andi	r18, 0xBF	; 191
    2e6a:	2b 83       	std	Y+3, r18	; 0x03
    2e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	9f 83       	std	Y+7, r25	; 0x07
    2e74:	8e 83       	std	Y+6, r24	; 0x06
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	29 c0       	rjmp	.+82     	; 0x2ece <fgetc+0x76>
    2e7c:	22 ff       	sbrs	r18, 2
    2e7e:	0f c0       	rjmp	.+30     	; 0x2e9e <fgetc+0x46>
    2e80:	e8 81       	ld	r30, Y
    2e82:	f9 81       	ldd	r31, Y+1	; 0x01
    2e84:	80 81       	ld	r24, Z
    2e86:	08 2e       	mov	r0, r24
    2e88:	00 0c       	add	r0, r0
    2e8a:	99 0b       	sbc	r25, r25
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	19 f4       	brne	.+6      	; 0x2e96 <fgetc+0x3e>
    2e90:	20 62       	ori	r18, 0x20	; 32
    2e92:	2b 83       	std	Y+3, r18	; 0x03
    2e94:	1a c0       	rjmp	.+52     	; 0x2eca <fgetc+0x72>
    2e96:	31 96       	adiw	r30, 0x01	; 1
    2e98:	f9 83       	std	Y+1, r31	; 0x01
    2e9a:	e8 83       	st	Y, r30
    2e9c:	0e c0       	rjmp	.+28     	; 0x2eba <fgetc+0x62>
    2e9e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2ea0:	fb 85       	ldd	r31, Y+11	; 0x0b
    2ea2:	09 95       	icall
    2ea4:	97 ff       	sbrs	r25, 7
    2ea6:	09 c0       	rjmp	.+18     	; 0x2eba <fgetc+0x62>
    2ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    2eaa:	01 96       	adiw	r24, 0x01	; 1
    2eac:	11 f0       	breq	.+4      	; 0x2eb2 <fgetc+0x5a>
    2eae:	80 e2       	ldi	r24, 0x20	; 32
    2eb0:	01 c0       	rjmp	.+2      	; 0x2eb4 <fgetc+0x5c>
    2eb2:	80 e1       	ldi	r24, 0x10	; 16
    2eb4:	82 2b       	or	r24, r18
    2eb6:	8b 83       	std	Y+3, r24	; 0x03
    2eb8:	08 c0       	rjmp	.+16     	; 0x2eca <fgetc+0x72>
    2eba:	2e 81       	ldd	r18, Y+6	; 0x06
    2ebc:	3f 81       	ldd	r19, Y+7	; 0x07
    2ebe:	2f 5f       	subi	r18, 0xFF	; 255
    2ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec2:	3f 83       	std	Y+7, r19	; 0x07
    2ec4:	2e 83       	std	Y+6, r18	; 0x06
    2ec6:	99 27       	eor	r25, r25
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <fgetc+0x76>
    2eca:	8f ef       	ldi	r24, 0xFF	; 255
    2ecc:	9f ef       	ldi	r25, 0xFF	; 255
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	08 95       	ret

00002ed4 <printf>:
    2ed4:	a0 e0       	ldi	r26, 0x00	; 0
    2ed6:	b0 e0       	ldi	r27, 0x00	; 0
    2ed8:	e0 e7       	ldi	r30, 0x70	; 112
    2eda:	f7 e1       	ldi	r31, 0x17	; 23
    2edc:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__prologue_saves__+0x20>
    2ee0:	ae 01       	movw	r20, r28
    2ee2:	4b 5f       	subi	r20, 0xFB	; 251
    2ee4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ee6:	fa 01       	movw	r30, r20
    2ee8:	61 91       	ld	r22, Z+
    2eea:	71 91       	ld	r23, Z+
    2eec:	af 01       	movw	r20, r30
    2eee:	80 91 02 08 	lds	r24, 0x0802	; 0x800802 <__iob+0x2>
    2ef2:	90 91 03 08 	lds	r25, 0x0803	; 0x800803 <__iob+0x3>
    2ef6:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <vfprintf>
    2efa:	e2 e0       	ldi	r30, 0x02	; 2
    2efc:	0c 94 63 1a 	jmp	0x34c6	; 0x34c6 <__epilogue_restores__+0x20>

00002f00 <printf_P>:
    2f00:	a0 e0       	ldi	r26, 0x00	; 0
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e6 e8       	ldi	r30, 0x86	; 134
    2f06:	f7 e1       	ldi	r31, 0x17	; 23
    2f08:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__prologue_saves__+0x1c>
    2f0c:	ae 01       	movw	r20, r28
    2f0e:	49 5f       	subi	r20, 0xF9	; 249
    2f10:	5f 4f       	sbci	r21, 0xFF	; 255
    2f12:	da 01       	movw	r26, r20
    2f14:	6d 91       	ld	r22, X+
    2f16:	7d 91       	ld	r23, X+
    2f18:	ad 01       	movw	r20, r26
    2f1a:	00 e0       	ldi	r16, 0x00	; 0
    2f1c:	18 e0       	ldi	r17, 0x08	; 8
    2f1e:	f8 01       	movw	r30, r16
    2f20:	82 81       	ldd	r24, Z+2	; 0x02
    2f22:	93 81       	ldd	r25, Z+3	; 0x03
    2f24:	dc 01       	movw	r26, r24
    2f26:	13 96       	adiw	r26, 0x03	; 3
    2f28:	2c 91       	ld	r18, X
    2f2a:	13 97       	sbiw	r26, 0x03	; 3
    2f2c:	28 60       	ori	r18, 0x08	; 8
    2f2e:	13 96       	adiw	r26, 0x03	; 3
    2f30:	2c 93       	st	X, r18
    2f32:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <vfprintf>
    2f36:	d8 01       	movw	r26, r16
    2f38:	12 96       	adiw	r26, 0x02	; 2
    2f3a:	ed 91       	ld	r30, X+
    2f3c:	fc 91       	ld	r31, X
    2f3e:	13 97       	sbiw	r26, 0x03	; 3
    2f40:	23 81       	ldd	r18, Z+3	; 0x03
    2f42:	27 7f       	andi	r18, 0xF7	; 247
    2f44:	23 83       	std	Z+3, r18	; 0x03
    2f46:	e4 e0       	ldi	r30, 0x04	; 4
    2f48:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__epilogue_restores__+0x1c>

00002f4c <vfprintf>:
    2f4c:	ab e0       	ldi	r26, 0x0B	; 11
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	ec ea       	ldi	r30, 0xAC	; 172
    2f52:	f7 e1       	ldi	r31, 0x17	; 23
    2f54:	0c 94 37 1a 	jmp	0x346e	; 0x346e <__prologue_saves__>
    2f58:	6c 01       	movw	r12, r24
    2f5a:	7b 01       	movw	r14, r22
    2f5c:	8a 01       	movw	r16, r20
    2f5e:	fc 01       	movw	r30, r24
    2f60:	17 82       	std	Z+7, r1	; 0x07
    2f62:	16 82       	std	Z+6, r1	; 0x06
    2f64:	83 81       	ldd	r24, Z+3	; 0x03
    2f66:	81 ff       	sbrs	r24, 1
    2f68:	cc c1       	rjmp	.+920    	; 0x3302 <vfprintf+0x3b6>
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	01 96       	adiw	r24, 0x01	; 1
    2f6e:	3c 01       	movw	r6, r24
    2f70:	f6 01       	movw	r30, r12
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	f7 01       	movw	r30, r14
    2f76:	93 fd       	sbrc	r25, 3
    2f78:	85 91       	lpm	r24, Z+
    2f7a:	93 ff       	sbrs	r25, 3
    2f7c:	81 91       	ld	r24, Z+
    2f7e:	7f 01       	movw	r14, r30
    2f80:	88 23       	and	r24, r24
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <vfprintf+0x3a>
    2f84:	ba c1       	rjmp	.+884    	; 0x32fa <vfprintf+0x3ae>
    2f86:	85 32       	cpi	r24, 0x25	; 37
    2f88:	39 f4       	brne	.+14     	; 0x2f98 <vfprintf+0x4c>
    2f8a:	93 fd       	sbrc	r25, 3
    2f8c:	85 91       	lpm	r24, Z+
    2f8e:	93 ff       	sbrs	r25, 3
    2f90:	81 91       	ld	r24, Z+
    2f92:	7f 01       	movw	r14, r30
    2f94:	85 32       	cpi	r24, 0x25	; 37
    2f96:	29 f4       	brne	.+10     	; 0x2fa2 <vfprintf+0x56>
    2f98:	b6 01       	movw	r22, r12
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    2fa0:	e7 cf       	rjmp	.-50     	; 0x2f70 <vfprintf+0x24>
    2fa2:	91 2c       	mov	r9, r1
    2fa4:	21 2c       	mov	r2, r1
    2fa6:	31 2c       	mov	r3, r1
    2fa8:	ff e1       	ldi	r31, 0x1F	; 31
    2faa:	f3 15       	cp	r31, r3
    2fac:	d8 f0       	brcs	.+54     	; 0x2fe4 <vfprintf+0x98>
    2fae:	8b 32       	cpi	r24, 0x2B	; 43
    2fb0:	79 f0       	breq	.+30     	; 0x2fd0 <vfprintf+0x84>
    2fb2:	38 f4       	brcc	.+14     	; 0x2fc2 <vfprintf+0x76>
    2fb4:	80 32       	cpi	r24, 0x20	; 32
    2fb6:	79 f0       	breq	.+30     	; 0x2fd6 <vfprintf+0x8a>
    2fb8:	83 32       	cpi	r24, 0x23	; 35
    2fba:	a1 f4       	brne	.+40     	; 0x2fe4 <vfprintf+0x98>
    2fbc:	23 2d       	mov	r18, r3
    2fbe:	20 61       	ori	r18, 0x10	; 16
    2fc0:	1d c0       	rjmp	.+58     	; 0x2ffc <vfprintf+0xb0>
    2fc2:	8d 32       	cpi	r24, 0x2D	; 45
    2fc4:	61 f0       	breq	.+24     	; 0x2fde <vfprintf+0x92>
    2fc6:	80 33       	cpi	r24, 0x30	; 48
    2fc8:	69 f4       	brne	.+26     	; 0x2fe4 <vfprintf+0x98>
    2fca:	23 2d       	mov	r18, r3
    2fcc:	21 60       	ori	r18, 0x01	; 1
    2fce:	16 c0       	rjmp	.+44     	; 0x2ffc <vfprintf+0xb0>
    2fd0:	83 2d       	mov	r24, r3
    2fd2:	82 60       	ori	r24, 0x02	; 2
    2fd4:	38 2e       	mov	r3, r24
    2fd6:	e3 2d       	mov	r30, r3
    2fd8:	e4 60       	ori	r30, 0x04	; 4
    2fda:	3e 2e       	mov	r3, r30
    2fdc:	2a c0       	rjmp	.+84     	; 0x3032 <vfprintf+0xe6>
    2fde:	f3 2d       	mov	r31, r3
    2fe0:	f8 60       	ori	r31, 0x08	; 8
    2fe2:	1d c0       	rjmp	.+58     	; 0x301e <vfprintf+0xd2>
    2fe4:	37 fc       	sbrc	r3, 7
    2fe6:	2d c0       	rjmp	.+90     	; 0x3042 <vfprintf+0xf6>
    2fe8:	20 ed       	ldi	r18, 0xD0	; 208
    2fea:	28 0f       	add	r18, r24
    2fec:	2a 30       	cpi	r18, 0x0A	; 10
    2fee:	40 f0       	brcs	.+16     	; 0x3000 <vfprintf+0xb4>
    2ff0:	8e 32       	cpi	r24, 0x2E	; 46
    2ff2:	b9 f4       	brne	.+46     	; 0x3022 <vfprintf+0xd6>
    2ff4:	36 fc       	sbrc	r3, 6
    2ff6:	81 c1       	rjmp	.+770    	; 0x32fa <vfprintf+0x3ae>
    2ff8:	23 2d       	mov	r18, r3
    2ffa:	20 64       	ori	r18, 0x40	; 64
    2ffc:	32 2e       	mov	r3, r18
    2ffe:	19 c0       	rjmp	.+50     	; 0x3032 <vfprintf+0xe6>
    3000:	36 fe       	sbrs	r3, 6
    3002:	06 c0       	rjmp	.+12     	; 0x3010 <vfprintf+0xc4>
    3004:	8a e0       	ldi	r24, 0x0A	; 10
    3006:	98 9e       	mul	r9, r24
    3008:	20 0d       	add	r18, r0
    300a:	11 24       	eor	r1, r1
    300c:	92 2e       	mov	r9, r18
    300e:	11 c0       	rjmp	.+34     	; 0x3032 <vfprintf+0xe6>
    3010:	ea e0       	ldi	r30, 0x0A	; 10
    3012:	2e 9e       	mul	r2, r30
    3014:	20 0d       	add	r18, r0
    3016:	11 24       	eor	r1, r1
    3018:	22 2e       	mov	r2, r18
    301a:	f3 2d       	mov	r31, r3
    301c:	f0 62       	ori	r31, 0x20	; 32
    301e:	3f 2e       	mov	r3, r31
    3020:	08 c0       	rjmp	.+16     	; 0x3032 <vfprintf+0xe6>
    3022:	8c 36       	cpi	r24, 0x6C	; 108
    3024:	21 f4       	brne	.+8      	; 0x302e <vfprintf+0xe2>
    3026:	83 2d       	mov	r24, r3
    3028:	80 68       	ori	r24, 0x80	; 128
    302a:	38 2e       	mov	r3, r24
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <vfprintf+0xe6>
    302e:	88 36       	cpi	r24, 0x68	; 104
    3030:	41 f4       	brne	.+16     	; 0x3042 <vfprintf+0xf6>
    3032:	f7 01       	movw	r30, r14
    3034:	93 fd       	sbrc	r25, 3
    3036:	85 91       	lpm	r24, Z+
    3038:	93 ff       	sbrs	r25, 3
    303a:	81 91       	ld	r24, Z+
    303c:	7f 01       	movw	r14, r30
    303e:	81 11       	cpse	r24, r1
    3040:	b3 cf       	rjmp	.-154    	; 0x2fa8 <vfprintf+0x5c>
    3042:	98 2f       	mov	r25, r24
    3044:	9f 7d       	andi	r25, 0xDF	; 223
    3046:	95 54       	subi	r25, 0x45	; 69
    3048:	93 30       	cpi	r25, 0x03	; 3
    304a:	28 f4       	brcc	.+10     	; 0x3056 <vfprintf+0x10a>
    304c:	0c 5f       	subi	r16, 0xFC	; 252
    304e:	1f 4f       	sbci	r17, 0xFF	; 255
    3050:	9f e3       	ldi	r25, 0x3F	; 63
    3052:	99 83       	std	Y+1, r25	; 0x01
    3054:	0d c0       	rjmp	.+26     	; 0x3070 <vfprintf+0x124>
    3056:	83 36       	cpi	r24, 0x63	; 99
    3058:	31 f0       	breq	.+12     	; 0x3066 <vfprintf+0x11a>
    305a:	83 37       	cpi	r24, 0x73	; 115
    305c:	71 f0       	breq	.+28     	; 0x307a <vfprintf+0x12e>
    305e:	83 35       	cpi	r24, 0x53	; 83
    3060:	09 f0       	breq	.+2      	; 0x3064 <vfprintf+0x118>
    3062:	59 c0       	rjmp	.+178    	; 0x3116 <vfprintf+0x1ca>
    3064:	21 c0       	rjmp	.+66     	; 0x30a8 <vfprintf+0x15c>
    3066:	f8 01       	movw	r30, r16
    3068:	80 81       	ld	r24, Z
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	0e 5f       	subi	r16, 0xFE	; 254
    306e:	1f 4f       	sbci	r17, 0xFF	; 255
    3070:	88 24       	eor	r8, r8
    3072:	83 94       	inc	r8
    3074:	91 2c       	mov	r9, r1
    3076:	53 01       	movw	r10, r6
    3078:	13 c0       	rjmp	.+38     	; 0x30a0 <vfprintf+0x154>
    307a:	28 01       	movw	r4, r16
    307c:	f2 e0       	ldi	r31, 0x02	; 2
    307e:	4f 0e       	add	r4, r31
    3080:	51 1c       	adc	r5, r1
    3082:	f8 01       	movw	r30, r16
    3084:	a0 80       	ld	r10, Z
    3086:	b1 80       	ldd	r11, Z+1	; 0x01
    3088:	36 fe       	sbrs	r3, 6
    308a:	03 c0       	rjmp	.+6      	; 0x3092 <vfprintf+0x146>
    308c:	69 2d       	mov	r22, r9
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <vfprintf+0x14a>
    3092:	6f ef       	ldi	r22, 0xFF	; 255
    3094:	7f ef       	ldi	r23, 0xFF	; 255
    3096:	c5 01       	movw	r24, r10
    3098:	0e 94 92 19 	call	0x3324	; 0x3324 <strnlen>
    309c:	4c 01       	movw	r8, r24
    309e:	82 01       	movw	r16, r4
    30a0:	f3 2d       	mov	r31, r3
    30a2:	ff 77       	andi	r31, 0x7F	; 127
    30a4:	3f 2e       	mov	r3, r31
    30a6:	16 c0       	rjmp	.+44     	; 0x30d4 <vfprintf+0x188>
    30a8:	28 01       	movw	r4, r16
    30aa:	22 e0       	ldi	r18, 0x02	; 2
    30ac:	42 0e       	add	r4, r18
    30ae:	51 1c       	adc	r5, r1
    30b0:	f8 01       	movw	r30, r16
    30b2:	a0 80       	ld	r10, Z
    30b4:	b1 80       	ldd	r11, Z+1	; 0x01
    30b6:	36 fe       	sbrs	r3, 6
    30b8:	03 c0       	rjmp	.+6      	; 0x30c0 <vfprintf+0x174>
    30ba:	69 2d       	mov	r22, r9
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	02 c0       	rjmp	.+4      	; 0x30c4 <vfprintf+0x178>
    30c0:	6f ef       	ldi	r22, 0xFF	; 255
    30c2:	7f ef       	ldi	r23, 0xFF	; 255
    30c4:	c5 01       	movw	r24, r10
    30c6:	0e 94 87 19 	call	0x330e	; 0x330e <strnlen_P>
    30ca:	4c 01       	movw	r8, r24
    30cc:	f3 2d       	mov	r31, r3
    30ce:	f0 68       	ori	r31, 0x80	; 128
    30d0:	3f 2e       	mov	r3, r31
    30d2:	82 01       	movw	r16, r4
    30d4:	33 fc       	sbrc	r3, 3
    30d6:	1b c0       	rjmp	.+54     	; 0x310e <vfprintf+0x1c2>
    30d8:	82 2d       	mov	r24, r2
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	88 16       	cp	r8, r24
    30de:	99 06       	cpc	r9, r25
    30e0:	b0 f4       	brcc	.+44     	; 0x310e <vfprintf+0x1c2>
    30e2:	b6 01       	movw	r22, r12
    30e4:	80 e2       	ldi	r24, 0x20	; 32
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    30ec:	2a 94       	dec	r2
    30ee:	f4 cf       	rjmp	.-24     	; 0x30d8 <vfprintf+0x18c>
    30f0:	f5 01       	movw	r30, r10
    30f2:	37 fc       	sbrc	r3, 7
    30f4:	85 91       	lpm	r24, Z+
    30f6:	37 fe       	sbrs	r3, 7
    30f8:	81 91       	ld	r24, Z+
    30fa:	5f 01       	movw	r10, r30
    30fc:	b6 01       	movw	r22, r12
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    3104:	21 10       	cpse	r2, r1
    3106:	2a 94       	dec	r2
    3108:	21 e0       	ldi	r18, 0x01	; 1
    310a:	82 1a       	sub	r8, r18
    310c:	91 08       	sbc	r9, r1
    310e:	81 14       	cp	r8, r1
    3110:	91 04       	cpc	r9, r1
    3112:	71 f7       	brne	.-36     	; 0x30f0 <vfprintf+0x1a4>
    3114:	e8 c0       	rjmp	.+464    	; 0x32e6 <vfprintf+0x39a>
    3116:	84 36       	cpi	r24, 0x64	; 100
    3118:	11 f0       	breq	.+4      	; 0x311e <vfprintf+0x1d2>
    311a:	89 36       	cpi	r24, 0x69	; 105
    311c:	41 f5       	brne	.+80     	; 0x316e <vfprintf+0x222>
    311e:	f8 01       	movw	r30, r16
    3120:	37 fe       	sbrs	r3, 7
    3122:	07 c0       	rjmp	.+14     	; 0x3132 <vfprintf+0x1e6>
    3124:	60 81       	ld	r22, Z
    3126:	71 81       	ldd	r23, Z+1	; 0x01
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	93 81       	ldd	r25, Z+3	; 0x03
    312c:	0c 5f       	subi	r16, 0xFC	; 252
    312e:	1f 4f       	sbci	r17, 0xFF	; 255
    3130:	08 c0       	rjmp	.+16     	; 0x3142 <vfprintf+0x1f6>
    3132:	60 81       	ld	r22, Z
    3134:	71 81       	ldd	r23, Z+1	; 0x01
    3136:	07 2e       	mov	r0, r23
    3138:	00 0c       	add	r0, r0
    313a:	88 0b       	sbc	r24, r24
    313c:	99 0b       	sbc	r25, r25
    313e:	0e 5f       	subi	r16, 0xFE	; 254
    3140:	1f 4f       	sbci	r17, 0xFF	; 255
    3142:	f3 2d       	mov	r31, r3
    3144:	ff 76       	andi	r31, 0x6F	; 111
    3146:	3f 2e       	mov	r3, r31
    3148:	97 ff       	sbrs	r25, 7
    314a:	09 c0       	rjmp	.+18     	; 0x315e <vfprintf+0x212>
    314c:	90 95       	com	r25
    314e:	80 95       	com	r24
    3150:	70 95       	com	r23
    3152:	61 95       	neg	r22
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	8f 4f       	sbci	r24, 0xFF	; 255
    3158:	9f 4f       	sbci	r25, 0xFF	; 255
    315a:	f0 68       	ori	r31, 0x80	; 128
    315c:	3f 2e       	mov	r3, r31
    315e:	2a e0       	ldi	r18, 0x0A	; 10
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	a3 01       	movw	r20, r6
    3164:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__ultoa_invert>
    3168:	88 2e       	mov	r8, r24
    316a:	86 18       	sub	r8, r6
    316c:	45 c0       	rjmp	.+138    	; 0x31f8 <vfprintf+0x2ac>
    316e:	85 37       	cpi	r24, 0x75	; 117
    3170:	31 f4       	brne	.+12     	; 0x317e <vfprintf+0x232>
    3172:	23 2d       	mov	r18, r3
    3174:	2f 7e       	andi	r18, 0xEF	; 239
    3176:	b2 2e       	mov	r11, r18
    3178:	2a e0       	ldi	r18, 0x0A	; 10
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	25 c0       	rjmp	.+74     	; 0x31c8 <vfprintf+0x27c>
    317e:	93 2d       	mov	r25, r3
    3180:	99 7f       	andi	r25, 0xF9	; 249
    3182:	b9 2e       	mov	r11, r25
    3184:	8f 36       	cpi	r24, 0x6F	; 111
    3186:	c1 f0       	breq	.+48     	; 0x31b8 <vfprintf+0x26c>
    3188:	18 f4       	brcc	.+6      	; 0x3190 <vfprintf+0x244>
    318a:	88 35       	cpi	r24, 0x58	; 88
    318c:	79 f0       	breq	.+30     	; 0x31ac <vfprintf+0x260>
    318e:	b5 c0       	rjmp	.+362    	; 0x32fa <vfprintf+0x3ae>
    3190:	80 37       	cpi	r24, 0x70	; 112
    3192:	19 f0       	breq	.+6      	; 0x319a <vfprintf+0x24e>
    3194:	88 37       	cpi	r24, 0x78	; 120
    3196:	21 f0       	breq	.+8      	; 0x31a0 <vfprintf+0x254>
    3198:	b0 c0       	rjmp	.+352    	; 0x32fa <vfprintf+0x3ae>
    319a:	e9 2f       	mov	r30, r25
    319c:	e0 61       	ori	r30, 0x10	; 16
    319e:	be 2e       	mov	r11, r30
    31a0:	b4 fe       	sbrs	r11, 4
    31a2:	0d c0       	rjmp	.+26     	; 0x31be <vfprintf+0x272>
    31a4:	fb 2d       	mov	r31, r11
    31a6:	f4 60       	ori	r31, 0x04	; 4
    31a8:	bf 2e       	mov	r11, r31
    31aa:	09 c0       	rjmp	.+18     	; 0x31be <vfprintf+0x272>
    31ac:	34 fe       	sbrs	r3, 4
    31ae:	0a c0       	rjmp	.+20     	; 0x31c4 <vfprintf+0x278>
    31b0:	29 2f       	mov	r18, r25
    31b2:	26 60       	ori	r18, 0x06	; 6
    31b4:	b2 2e       	mov	r11, r18
    31b6:	06 c0       	rjmp	.+12     	; 0x31c4 <vfprintf+0x278>
    31b8:	28 e0       	ldi	r18, 0x08	; 8
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	05 c0       	rjmp	.+10     	; 0x31c8 <vfprintf+0x27c>
    31be:	20 e1       	ldi	r18, 0x10	; 16
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <vfprintf+0x27c>
    31c4:	20 e1       	ldi	r18, 0x10	; 16
    31c6:	32 e0       	ldi	r19, 0x02	; 2
    31c8:	f8 01       	movw	r30, r16
    31ca:	b7 fe       	sbrs	r11, 7
    31cc:	07 c0       	rjmp	.+14     	; 0x31dc <vfprintf+0x290>
    31ce:	60 81       	ld	r22, Z
    31d0:	71 81       	ldd	r23, Z+1	; 0x01
    31d2:	82 81       	ldd	r24, Z+2	; 0x02
    31d4:	93 81       	ldd	r25, Z+3	; 0x03
    31d6:	0c 5f       	subi	r16, 0xFC	; 252
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	06 c0       	rjmp	.+12     	; 0x31e8 <vfprintf+0x29c>
    31dc:	60 81       	ld	r22, Z
    31de:	71 81       	ldd	r23, Z+1	; 0x01
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	0e 5f       	subi	r16, 0xFE	; 254
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	a3 01       	movw	r20, r6
    31ea:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__ultoa_invert>
    31ee:	88 2e       	mov	r8, r24
    31f0:	86 18       	sub	r8, r6
    31f2:	fb 2d       	mov	r31, r11
    31f4:	ff 77       	andi	r31, 0x7F	; 127
    31f6:	3f 2e       	mov	r3, r31
    31f8:	36 fe       	sbrs	r3, 6
    31fa:	0d c0       	rjmp	.+26     	; 0x3216 <vfprintf+0x2ca>
    31fc:	23 2d       	mov	r18, r3
    31fe:	2e 7f       	andi	r18, 0xFE	; 254
    3200:	a2 2e       	mov	r10, r18
    3202:	89 14       	cp	r8, r9
    3204:	58 f4       	brcc	.+22     	; 0x321c <vfprintf+0x2d0>
    3206:	34 fe       	sbrs	r3, 4
    3208:	0b c0       	rjmp	.+22     	; 0x3220 <vfprintf+0x2d4>
    320a:	32 fc       	sbrc	r3, 2
    320c:	09 c0       	rjmp	.+18     	; 0x3220 <vfprintf+0x2d4>
    320e:	83 2d       	mov	r24, r3
    3210:	8e 7e       	andi	r24, 0xEE	; 238
    3212:	a8 2e       	mov	r10, r24
    3214:	05 c0       	rjmp	.+10     	; 0x3220 <vfprintf+0x2d4>
    3216:	b8 2c       	mov	r11, r8
    3218:	a3 2c       	mov	r10, r3
    321a:	03 c0       	rjmp	.+6      	; 0x3222 <vfprintf+0x2d6>
    321c:	b8 2c       	mov	r11, r8
    321e:	01 c0       	rjmp	.+2      	; 0x3222 <vfprintf+0x2d6>
    3220:	b9 2c       	mov	r11, r9
    3222:	a4 fe       	sbrs	r10, 4
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <vfprintf+0x2f8>
    3226:	fe 01       	movw	r30, r28
    3228:	e8 0d       	add	r30, r8
    322a:	f1 1d       	adc	r31, r1
    322c:	80 81       	ld	r24, Z
    322e:	80 33       	cpi	r24, 0x30	; 48
    3230:	21 f4       	brne	.+8      	; 0x323a <vfprintf+0x2ee>
    3232:	9a 2d       	mov	r25, r10
    3234:	99 7e       	andi	r25, 0xE9	; 233
    3236:	a9 2e       	mov	r10, r25
    3238:	09 c0       	rjmp	.+18     	; 0x324c <vfprintf+0x300>
    323a:	a2 fe       	sbrs	r10, 2
    323c:	06 c0       	rjmp	.+12     	; 0x324a <vfprintf+0x2fe>
    323e:	b3 94       	inc	r11
    3240:	b3 94       	inc	r11
    3242:	04 c0       	rjmp	.+8      	; 0x324c <vfprintf+0x300>
    3244:	8a 2d       	mov	r24, r10
    3246:	86 78       	andi	r24, 0x86	; 134
    3248:	09 f0       	breq	.+2      	; 0x324c <vfprintf+0x300>
    324a:	b3 94       	inc	r11
    324c:	a3 fc       	sbrc	r10, 3
    324e:	11 c0       	rjmp	.+34     	; 0x3272 <vfprintf+0x326>
    3250:	a0 fe       	sbrs	r10, 0
    3252:	06 c0       	rjmp	.+12     	; 0x3260 <vfprintf+0x314>
    3254:	b2 14       	cp	r11, r2
    3256:	88 f4       	brcc	.+34     	; 0x327a <vfprintf+0x32e>
    3258:	28 0c       	add	r2, r8
    325a:	92 2c       	mov	r9, r2
    325c:	9b 18       	sub	r9, r11
    325e:	0e c0       	rjmp	.+28     	; 0x327c <vfprintf+0x330>
    3260:	b2 14       	cp	r11, r2
    3262:	60 f4       	brcc	.+24     	; 0x327c <vfprintf+0x330>
    3264:	b6 01       	movw	r22, r12
    3266:	80 e2       	ldi	r24, 0x20	; 32
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    326e:	b3 94       	inc	r11
    3270:	f7 cf       	rjmp	.-18     	; 0x3260 <vfprintf+0x314>
    3272:	b2 14       	cp	r11, r2
    3274:	18 f4       	brcc	.+6      	; 0x327c <vfprintf+0x330>
    3276:	2b 18       	sub	r2, r11
    3278:	02 c0       	rjmp	.+4      	; 0x327e <vfprintf+0x332>
    327a:	98 2c       	mov	r9, r8
    327c:	21 2c       	mov	r2, r1
    327e:	a4 fe       	sbrs	r10, 4
    3280:	10 c0       	rjmp	.+32     	; 0x32a2 <vfprintf+0x356>
    3282:	b6 01       	movw	r22, r12
    3284:	80 e3       	ldi	r24, 0x30	; 48
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    328c:	a2 fe       	sbrs	r10, 2
    328e:	17 c0       	rjmp	.+46     	; 0x32be <vfprintf+0x372>
    3290:	a1 fc       	sbrc	r10, 1
    3292:	03 c0       	rjmp	.+6      	; 0x329a <vfprintf+0x34e>
    3294:	88 e7       	ldi	r24, 0x78	; 120
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	02 c0       	rjmp	.+4      	; 0x329e <vfprintf+0x352>
    329a:	88 e5       	ldi	r24, 0x58	; 88
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	b6 01       	movw	r22, r12
    32a0:	0c c0       	rjmp	.+24     	; 0x32ba <vfprintf+0x36e>
    32a2:	8a 2d       	mov	r24, r10
    32a4:	86 78       	andi	r24, 0x86	; 134
    32a6:	59 f0       	breq	.+22     	; 0x32be <vfprintf+0x372>
    32a8:	a1 fe       	sbrs	r10, 1
    32aa:	02 c0       	rjmp	.+4      	; 0x32b0 <vfprintf+0x364>
    32ac:	8b e2       	ldi	r24, 0x2B	; 43
    32ae:	01 c0       	rjmp	.+2      	; 0x32b2 <vfprintf+0x366>
    32b0:	80 e2       	ldi	r24, 0x20	; 32
    32b2:	a7 fc       	sbrc	r10, 7
    32b4:	8d e2       	ldi	r24, 0x2D	; 45
    32b6:	b6 01       	movw	r22, r12
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    32be:	89 14       	cp	r8, r9
    32c0:	38 f4       	brcc	.+14     	; 0x32d0 <vfprintf+0x384>
    32c2:	b6 01       	movw	r22, r12
    32c4:	80 e3       	ldi	r24, 0x30	; 48
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    32cc:	9a 94       	dec	r9
    32ce:	f7 cf       	rjmp	.-18     	; 0x32be <vfprintf+0x372>
    32d0:	8a 94       	dec	r8
    32d2:	f3 01       	movw	r30, r6
    32d4:	e8 0d       	add	r30, r8
    32d6:	f1 1d       	adc	r31, r1
    32d8:	80 81       	ld	r24, Z
    32da:	b6 01       	movw	r22, r12
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    32e2:	81 10       	cpse	r8, r1
    32e4:	f5 cf       	rjmp	.-22     	; 0x32d0 <vfprintf+0x384>
    32e6:	22 20       	and	r2, r2
    32e8:	09 f4       	brne	.+2      	; 0x32ec <vfprintf+0x3a0>
    32ea:	42 ce       	rjmp	.-892    	; 0x2f70 <vfprintf+0x24>
    32ec:	b6 01       	movw	r22, r12
    32ee:	80 e2       	ldi	r24, 0x20	; 32
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	0e 94 9d 19 	call	0x333a	; 0x333a <fputc>
    32f6:	2a 94       	dec	r2
    32f8:	f6 cf       	rjmp	.-20     	; 0x32e6 <vfprintf+0x39a>
    32fa:	f6 01       	movw	r30, r12
    32fc:	86 81       	ldd	r24, Z+6	; 0x06
    32fe:	97 81       	ldd	r25, Z+7	; 0x07
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <vfprintf+0x3ba>
    3302:	8f ef       	ldi	r24, 0xFF	; 255
    3304:	9f ef       	ldi	r25, 0xFF	; 255
    3306:	2b 96       	adiw	r28, 0x0b	; 11
    3308:	e2 e1       	ldi	r30, 0x12	; 18
    330a:	0c 94 53 1a 	jmp	0x34a6	; 0x34a6 <__epilogue_restores__>

0000330e <strnlen_P>:
    330e:	fc 01       	movw	r30, r24
    3310:	05 90       	lpm	r0, Z+
    3312:	61 50       	subi	r22, 0x01	; 1
    3314:	70 40       	sbci	r23, 0x00	; 0
    3316:	01 10       	cpse	r0, r1
    3318:	d8 f7       	brcc	.-10     	; 0x3310 <strnlen_P+0x2>
    331a:	80 95       	com	r24
    331c:	90 95       	com	r25
    331e:	8e 0f       	add	r24, r30
    3320:	9f 1f       	adc	r25, r31
    3322:	08 95       	ret

00003324 <strnlen>:
    3324:	fc 01       	movw	r30, r24
    3326:	61 50       	subi	r22, 0x01	; 1
    3328:	70 40       	sbci	r23, 0x00	; 0
    332a:	01 90       	ld	r0, Z+
    332c:	01 10       	cpse	r0, r1
    332e:	d8 f7       	brcc	.-10     	; 0x3326 <strnlen+0x2>
    3330:	80 95       	com	r24
    3332:	90 95       	com	r25
    3334:	8e 0f       	add	r24, r30
    3336:	9f 1f       	adc	r25, r31
    3338:	08 95       	ret

0000333a <fputc>:
    333a:	0f 93       	push	r16
    333c:	1f 93       	push	r17
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	fb 01       	movw	r30, r22
    3344:	23 81       	ldd	r18, Z+3	; 0x03
    3346:	21 fd       	sbrc	r18, 1
    3348:	03 c0       	rjmp	.+6      	; 0x3350 <fputc+0x16>
    334a:	8f ef       	ldi	r24, 0xFF	; 255
    334c:	9f ef       	ldi	r25, 0xFF	; 255
    334e:	2c c0       	rjmp	.+88     	; 0x33a8 <fputc+0x6e>
    3350:	22 ff       	sbrs	r18, 2
    3352:	16 c0       	rjmp	.+44     	; 0x3380 <fputc+0x46>
    3354:	46 81       	ldd	r20, Z+6	; 0x06
    3356:	57 81       	ldd	r21, Z+7	; 0x07
    3358:	24 81       	ldd	r18, Z+4	; 0x04
    335a:	35 81       	ldd	r19, Z+5	; 0x05
    335c:	42 17       	cp	r20, r18
    335e:	53 07       	cpc	r21, r19
    3360:	44 f4       	brge	.+16     	; 0x3372 <fputc+0x38>
    3362:	a0 81       	ld	r26, Z
    3364:	b1 81       	ldd	r27, Z+1	; 0x01
    3366:	9d 01       	movw	r18, r26
    3368:	2f 5f       	subi	r18, 0xFF	; 255
    336a:	3f 4f       	sbci	r19, 0xFF	; 255
    336c:	31 83       	std	Z+1, r19	; 0x01
    336e:	20 83       	st	Z, r18
    3370:	8c 93       	st	X, r24
    3372:	26 81       	ldd	r18, Z+6	; 0x06
    3374:	37 81       	ldd	r19, Z+7	; 0x07
    3376:	2f 5f       	subi	r18, 0xFF	; 255
    3378:	3f 4f       	sbci	r19, 0xFF	; 255
    337a:	37 83       	std	Z+7, r19	; 0x07
    337c:	26 83       	std	Z+6, r18	; 0x06
    337e:	14 c0       	rjmp	.+40     	; 0x33a8 <fputc+0x6e>
    3380:	8b 01       	movw	r16, r22
    3382:	ec 01       	movw	r28, r24
    3384:	fb 01       	movw	r30, r22
    3386:	00 84       	ldd	r0, Z+8	; 0x08
    3388:	f1 85       	ldd	r31, Z+9	; 0x09
    338a:	e0 2d       	mov	r30, r0
    338c:	09 95       	icall
    338e:	89 2b       	or	r24, r25
    3390:	e1 f6       	brne	.-72     	; 0x334a <fputc+0x10>
    3392:	d8 01       	movw	r26, r16
    3394:	16 96       	adiw	r26, 0x06	; 6
    3396:	8d 91       	ld	r24, X+
    3398:	9c 91       	ld	r25, X
    339a:	17 97       	sbiw	r26, 0x07	; 7
    339c:	01 96       	adiw	r24, 0x01	; 1
    339e:	17 96       	adiw	r26, 0x07	; 7
    33a0:	9c 93       	st	X, r25
    33a2:	8e 93       	st	-X, r24
    33a4:	16 97       	sbiw	r26, 0x06	; 6
    33a6:	ce 01       	movw	r24, r28
    33a8:	df 91       	pop	r29
    33aa:	cf 91       	pop	r28
    33ac:	1f 91       	pop	r17
    33ae:	0f 91       	pop	r16
    33b0:	08 95       	ret

000033b2 <__ultoa_invert>:
    33b2:	fa 01       	movw	r30, r20
    33b4:	aa 27       	eor	r26, r26
    33b6:	28 30       	cpi	r18, 0x08	; 8
    33b8:	51 f1       	breq	.+84     	; 0x340e <__ultoa_invert+0x5c>
    33ba:	20 31       	cpi	r18, 0x10	; 16
    33bc:	81 f1       	breq	.+96     	; 0x341e <__ultoa_invert+0x6c>
    33be:	e8 94       	clt
    33c0:	6f 93       	push	r22
    33c2:	6e 7f       	andi	r22, 0xFE	; 254
    33c4:	6e 5f       	subi	r22, 0xFE	; 254
    33c6:	7f 4f       	sbci	r23, 0xFF	; 255
    33c8:	8f 4f       	sbci	r24, 0xFF	; 255
    33ca:	9f 4f       	sbci	r25, 0xFF	; 255
    33cc:	af 4f       	sbci	r26, 0xFF	; 255
    33ce:	b1 e0       	ldi	r27, 0x01	; 1
    33d0:	3e d0       	rcall	.+124    	; 0x344e <__ultoa_invert+0x9c>
    33d2:	b4 e0       	ldi	r27, 0x04	; 4
    33d4:	3c d0       	rcall	.+120    	; 0x344e <__ultoa_invert+0x9c>
    33d6:	67 0f       	add	r22, r23
    33d8:	78 1f       	adc	r23, r24
    33da:	89 1f       	adc	r24, r25
    33dc:	9a 1f       	adc	r25, r26
    33de:	a1 1d       	adc	r26, r1
    33e0:	68 0f       	add	r22, r24
    33e2:	79 1f       	adc	r23, r25
    33e4:	8a 1f       	adc	r24, r26
    33e6:	91 1d       	adc	r25, r1
    33e8:	a1 1d       	adc	r26, r1
    33ea:	6a 0f       	add	r22, r26
    33ec:	71 1d       	adc	r23, r1
    33ee:	81 1d       	adc	r24, r1
    33f0:	91 1d       	adc	r25, r1
    33f2:	a1 1d       	adc	r26, r1
    33f4:	20 d0       	rcall	.+64     	; 0x3436 <__ultoa_invert+0x84>
    33f6:	09 f4       	brne	.+2      	; 0x33fa <__ultoa_invert+0x48>
    33f8:	68 94       	set
    33fa:	3f 91       	pop	r19
    33fc:	2a e0       	ldi	r18, 0x0A	; 10
    33fe:	26 9f       	mul	r18, r22
    3400:	11 24       	eor	r1, r1
    3402:	30 19       	sub	r19, r0
    3404:	30 5d       	subi	r19, 0xD0	; 208
    3406:	31 93       	st	Z+, r19
    3408:	de f6       	brtc	.-74     	; 0x33c0 <__ultoa_invert+0xe>
    340a:	cf 01       	movw	r24, r30
    340c:	08 95       	ret
    340e:	46 2f       	mov	r20, r22
    3410:	47 70       	andi	r20, 0x07	; 7
    3412:	40 5d       	subi	r20, 0xD0	; 208
    3414:	41 93       	st	Z+, r20
    3416:	b3 e0       	ldi	r27, 0x03	; 3
    3418:	0f d0       	rcall	.+30     	; 0x3438 <__ultoa_invert+0x86>
    341a:	c9 f7       	brne	.-14     	; 0x340e <__ultoa_invert+0x5c>
    341c:	f6 cf       	rjmp	.-20     	; 0x340a <__ultoa_invert+0x58>
    341e:	46 2f       	mov	r20, r22
    3420:	4f 70       	andi	r20, 0x0F	; 15
    3422:	40 5d       	subi	r20, 0xD0	; 208
    3424:	4a 33       	cpi	r20, 0x3A	; 58
    3426:	18 f0       	brcs	.+6      	; 0x342e <__ultoa_invert+0x7c>
    3428:	49 5d       	subi	r20, 0xD9	; 217
    342a:	31 fd       	sbrc	r19, 1
    342c:	40 52       	subi	r20, 0x20	; 32
    342e:	41 93       	st	Z+, r20
    3430:	02 d0       	rcall	.+4      	; 0x3436 <__ultoa_invert+0x84>
    3432:	a9 f7       	brne	.-22     	; 0x341e <__ultoa_invert+0x6c>
    3434:	ea cf       	rjmp	.-44     	; 0x340a <__ultoa_invert+0x58>
    3436:	b4 e0       	ldi	r27, 0x04	; 4
    3438:	a6 95       	lsr	r26
    343a:	97 95       	ror	r25
    343c:	87 95       	ror	r24
    343e:	77 95       	ror	r23
    3440:	67 95       	ror	r22
    3442:	ba 95       	dec	r27
    3444:	c9 f7       	brne	.-14     	; 0x3438 <__ultoa_invert+0x86>
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	61 05       	cpc	r22, r1
    344a:	71 05       	cpc	r23, r1
    344c:	08 95       	ret
    344e:	9b 01       	movw	r18, r22
    3450:	ac 01       	movw	r20, r24
    3452:	0a 2e       	mov	r0, r26
    3454:	06 94       	lsr	r0
    3456:	57 95       	ror	r21
    3458:	47 95       	ror	r20
    345a:	37 95       	ror	r19
    345c:	27 95       	ror	r18
    345e:	ba 95       	dec	r27
    3460:	c9 f7       	brne	.-14     	; 0x3454 <__ultoa_invert+0xa2>
    3462:	62 0f       	add	r22, r18
    3464:	73 1f       	adc	r23, r19
    3466:	84 1f       	adc	r24, r20
    3468:	95 1f       	adc	r25, r21
    346a:	a0 1d       	adc	r26, r0
    346c:	08 95       	ret

0000346e <__prologue_saves__>:
    346e:	2f 92       	push	r2
    3470:	3f 92       	push	r3
    3472:	4f 92       	push	r4
    3474:	5f 92       	push	r5
    3476:	6f 92       	push	r6
    3478:	7f 92       	push	r7
    347a:	8f 92       	push	r8
    347c:	9f 92       	push	r9
    347e:	af 92       	push	r10
    3480:	bf 92       	push	r11
    3482:	cf 92       	push	r12
    3484:	df 92       	push	r13
    3486:	ef 92       	push	r14
    3488:	ff 92       	push	r15
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	cf 93       	push	r28
    3490:	df 93       	push	r29
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	ca 1b       	sub	r28, r26
    3498:	db 0b       	sbc	r29, r27
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	09 94       	ijmp

000034a6 <__epilogue_restores__>:
    34a6:	2a 88       	ldd	r2, Y+18	; 0x12
    34a8:	39 88       	ldd	r3, Y+17	; 0x11
    34aa:	48 88       	ldd	r4, Y+16	; 0x10
    34ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    34ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    34b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    34b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    34b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    34b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    34b8:	b9 84       	ldd	r11, Y+9	; 0x09
    34ba:	c8 84       	ldd	r12, Y+8	; 0x08
    34bc:	df 80       	ldd	r13, Y+7	; 0x07
    34be:	ee 80       	ldd	r14, Y+6	; 0x06
    34c0:	fd 80       	ldd	r15, Y+5	; 0x05
    34c2:	0c 81       	ldd	r16, Y+4	; 0x04
    34c4:	1b 81       	ldd	r17, Y+3	; 0x03
    34c6:	aa 81       	ldd	r26, Y+2	; 0x02
    34c8:	b9 81       	ldd	r27, Y+1	; 0x01
    34ca:	ce 0f       	add	r28, r30
    34cc:	d1 1d       	adc	r29, r1
    34ce:	0f b6       	in	r0, 0x3f	; 63
    34d0:	f8 94       	cli
    34d2:	de bf       	out	0x3e, r29	; 62
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	cd bf       	out	0x3d, r28	; 61
    34d8:	ed 01       	movw	r28, r26
    34da:	08 95       	ret

000034dc <_exit>:
    34dc:	f8 94       	cli

000034de <__stop_program>:
    34de:	ff cf       	rjmp	.-2      	; 0x34de <__stop_program>
